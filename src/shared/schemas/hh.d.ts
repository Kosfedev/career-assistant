/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/resume_phone_confirm": {
    /** Подтвердить телефон кодом */
    post: operations["confirm-phone-in-resume"];
  };
  "/employers/{employer_id}/managers/{manager_id}/settings": {
    /**
     * Предпочтения менеджера
     * @description Возвращает информацию о предпочтениях менеджера.
     *
     * Проще всего получить URL из поля `manager_settings_url` объекта `manager`
     * в [информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info).
     *
     * Предпочтения менеджера *не влияют* на действия в API по умолчанию. Например, брендированный шаблон оформления
     * (`default_vacancy_branded_template`) не будет применен автоматически при публикации вакансии, если шаблон не был передан.
     * Приложение может использовать эту информацию для того, чтобы реализовать логику предзаполнения полей
     */
    get: operations["get-manager-settings"];
  };
  "/employers/{employer_id}/managers/{manager_id}/limits/resume": {
    /**
     * Дневной лимит просмотра резюме для текущего менеджера
     * @description Метод доступен менеджеру только для просмотра своего дневного лимита
     */
    get: operations["get-employer-manager-limits"];
  };
  "/employers/{employer_id}/addresses": {
    /**
     * Список адресов работодателя
     * @description Возвращает список адресов работодателя. Для компаний с большим количеством адресов, возможна ситуация, когда между созданием адреса и его чтением будет задержка. То есть, только что созданный адрес не будет содержаться в теле ответа
     */
    get: operations["get-employer-addresses"];
  };
  "/employers/{employer_id}/managers": {
    /** Список менеджеров работодателя */
    get: operations["get-employer-managers"];
    /** Добавление менеджера */
    post: operations["add-employer-manager"];
  };
  "/employers/{employer_id}/manager_types": {
    /** Справочник типов и прав менеджера */
    get: operations["get-employer-manager-types"];
  };
  "/manager_accounts/mine": {
    /**
     * Рабочие аккаунты менеджера
     * @description Возвращает список рабочих аккаунтов менеджера и информацию об основном и текущем аккаунте.
     *
     * Для работы под определенным аккаунтом необходимо передать значение account_id, полученное из списка, в заголовке:
     *
     * `X-Manager-Account-Id: {account_id}`
     *
     * Использовать данный заголовок можно во всех методах, доступных для работодателей.
     *
     * В заголовке можно передавать account_id основного аккаунта, который также подразумевается по умолчанию, при отсутствии заголовка
     */
    get: operations["get-manager-accounts"];
  };
  "/resume_should_send_sms": {
    /** Получить информацию о телефоне соискателя */
    get: operations["get-applicant-phone-info"];
  };
  "/employers/{employer_id}/addresses/{address_id}": {
    /** Получение адреса */
    get: operations["get-address"];
  };
  "/employers/{employer_id}/managers/{manager_id}": {
    /** Получение информации о менеджере */
    get: operations["get-employer-manager"];
    /** Редактирование менеджера */
    put: operations["edit-employer-manager"];
    /**
     * Удаление менеджера
     * @description Удаление менеджера занимает некоторое время. По этой причине, если сразу после успешного удаления менеджера вы запросите, например, список менеджеров, в ответе может вернуться удаленный менеджер
     */
    delete: operations["delete-employer-manager"];
  };
  "/resume_phone_generate_code": {
    /** Отправить код подтверждения для телефона резюме */
    post: operations["send-code-for-verify-phone-in-resume"];
  };
  "/oauth/token": {
    /** Получение access-токена */
    post: operations["authorize"];
    /**
     * Инвалидация токена
     * @description Инвалидация работает только на действующем access-токене.
     * После инвалидации токен нельзя будет запросить с помощью refresh-токена - для работы необходимо будет заново авторизоваться в API
     * Таким образом нельзя инвалидировать токен приложения <a name="invalidate_token"></a>.
     * В случае компрометации токена необходимо инвалидировать скомпрометированный токен и запросить токен заново!
     */
    delete: operations["invalidate-token"];
  };
  "/me": {
    /** Информация о текущем пользователе */
    get: operations["get-current-user-info"];
    /**
     * Редактирование информации авторизованного пользователя
     * @description Редактирование ФИО или изменение флага «ищу работу». Данные можно редактировать только группами
     */
    post: operations["edit-current-user-info"];
  };
  "/locales/resume": {
    /**
     * Список доступных локалей для резюме
     * @description Возвращает справочник возможных локалей резюме. Подколлекция [справочника локалей](#tag/Obshie-spravochniki/operation/get-locales-for-resume).
     *
     * Изменив локаль, можно, например, создать резюме на английском языке
     */
    get: operations["get-locales-for-resume"];
  };
  "/locales": {
    /**
     * Список доступных локалей
     * @description Возвращает список возможных значений (доступных локалей) в поле `id`. Список локалей будет зависеть от указанного сайта (параметр `host`). В любом запросе к API можно указывать параметр `?locale=` для передачи значения локали (языка)
     */
    get: operations["get-locales"];
  };
  "/suggests/positions": {
    /** Подсказки по должностям резюме */
    get: operations["get-positions-suggestions"];
  };
  "/suggests/educational_institutions": {
    /**
     * Подсказки по названиям учебных заведений
     * @description Чтобы узнать список факультетов, обратитесь к [соответствующему методу](#tag/Obshie-spravochniki/operation/get-educational-institutions-dictionary)
     */
    get: operations["get-educational-institutions-suggests"];
  };
  "/suggests/area_leaves": {
    /**
     * Подсказки по регионам, являющимися листами в дереве регионов
     * @description Также доступна загрузка [полного дерева регионов](#tag/Obshie-spravochniki/operation/get-areas) и [части дерева от определенного элемента](#tag/Obshie-spravochniki/operation/get-areas-from-specified)
     */
    get: operations["get-area-leaves-suggests"];
  };
  "/suggests/skill_set": {
    /** Подсказки по ключевым навыкам */
    get: operations["get-skill-set-suggests"];
  };
  "/suggests/vacancy_positions": {
    /** Подсказки по должностям вакансий */
    get: operations["get-vacancy-positions-suggests"];
  };
  "/suggests/professional_roles": {
    /** Подсказки по профессиональным ролям */
    get: operations["get-professional-roles-suggests"];
  };
  "/suggests/resume_search_keyword": {
    /**
     * Подсказки по ключевым словам поиска резюме
     * @description Предназначены для использования в поле `text` при [поиске резюме](#tag/Poisk-rezyume/operation/search-for-resumes). Содержит названия должностей, компаний и другие фразы, часто используемые при поиске резюме
     */
    get: operations["get-resume-search-keywords-suggests"];
  };
  "/suggests/areas": {
    /**
     * Подсказки по регионам
     * @description Также доступна загрузка [полного дерева регионов](#tag/Obshie-spravochniki/operation/get-areas) и [части дерева от определенного элемента](#tag/Obshie-spravochniki/operation/get-areas-from-specified)
     */
    get: operations["get-areas-suggests"];
  };
  "/suggests/vacancy_search_keyword": {
    /**
     * Подсказки по ключевым словам поиска вакансий
     * @description Предназначены для использования в поле `text` при [поиске вакансий](#tag/Poisk-vakansij/operation/get-vacancies). Содержит названия должностей, компаний и другие фразы, часто используемые при поиске вакансий
     */
    get: operations["get-vacancy-search-keywords"];
  };
  "/suggests/fields_of_study": {
    /** Подсказки по специализациям */
    get: operations["get-fields-of-study-suggestions"];
  };
  "/suggests/companies": {
    /**
     * Подсказки по зарегистрированным организациям
     * @description Данные из этой подсказки можно использовать, например, для выбора компании при заполнении опыта работы [в резюме](#tag/Rezyume.-Sozdanie-i-obnovlenie). Чтобы найти организации, которые могут публиковать вакансии, используйте [поиск](#tag/Rabotodatel/operation/search-employer)
     */
    get: operations["get-registered-companies-suggests"];
  };
  "/employers/{employer_id}/services/payable_api_actions/active": {
    /**
     * Информация по активным услугам API для платных методов
     * @description Каждая подключенная услуга отображается отдельным объектом в массиве `items`, даже при условии, что подключено несколько услуг одного типа.
     * Если у работодателя нет активных услуг, то в ответе придет пустой массив `items`
     */
    get: operations["get-payable-api-actions"];
  };
  "/employers/{employer_id}/managers/{manager_id}/method_access": {
    /**
     * Проверка доступа к платным методам
     * @description Начиная с 16 июля 2018 года, некоторые методы API HH для работодателей стали платными.
     *
     * Такие методы отмечены в [оглавлении GitHub](https://github.com/hhru/api/blob/master/README.md#content) лейблом <img src="http://hhru.github.io/api/badges/emp_paid.png" alt="employer with paid access" />
     *
     * Чтобы приобрести доступ к платным методам, обратитесь к своему персональному менеджеру.
     *
     * > Если вы работаете от имени нескольких учетных записей работодателя, проверьте [информацию о подключенных услугах](#tag/Uslugi-rabotodatelya/operation/get-payable-api-actions) — каждой учетной записи должен быть предоставлен доступ к платным методам API. При отсутствии доступа будет выдана ошибка `403 Forbidden`.
     *
     * Метод возвращает информацию о доступе к группам платных методов. Существующие группы:
     *
     * 1. Наличие доступа к методам резюме:
     *   * [Просмотр резюме](#tag/Prosmotr-rezyume/operation/get-resume).
     *   * [Работа с откликами](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md).
     *   * [Переписка с соискателем](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-messages).
     * 2. Наличие доступа к методам поиска вакансий:
     *   * [Поиск резюме](#tag/Poisk-rezyume/operation/search-for-resumes).
     *   * [Сохраненные поиски резюме](#tag/Sohranennye-poiski-rezyume/operation/get-saved-resume-searches).
     * 3. Наличие доступа к [просмотру резюме](#tag/Prosmotr-rezyume/operation/get-resume), у которого есть отклик или приглашение.
     * 4. Наличие доступа к [просмотру резюме](#tag/Prosmotr-rezyume/operation/get-resume), найденных через [поиск по базе](#tag/Poisk-rezyume/operation/search-for-resumes).
     *
     * **Внимание!** Изменился доступ к контактной информации резюме, подробнее [о новой модели работы с базой резюме](https://github.com/hhru/api/blob/master/docs/payable/resume.md)
     */
    get: operations["get-payable-api-method-access"];
  };
  "/saved_searches/vacancies": {
    /** Список сохраненных поисков вакансий */
    get: operations["get-saved-vacancy-searches"];
    /**
     * Создание нового сохраненного поиска вакансий
     * @description Некоторые параметры принимают множественные значения: `key=value&key=value`.
     *
     * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше 2000. Например, возможен запрос `per_page=10&page=199` (выдача с 1991 по 2000 вакансию), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с 2001 до 2010 вакансию)
     */
    post: operations["create-saved-vacancy-search"];
  };
  "/vacancies/{vacancy_id}/visitors": {
    /**
     * Посмотревшие вакансию
     * @description Возвращает список сокращенных резюме соискателей, просмотревших вакансию за последнюю неделю. Список отсортирован по убыванию по дате просмотра. Если у пользователя несколько резюме, то вернется резюме с наиболее поздней датой обновления.
     *
     * В списке `items` не отображаются резюме, которые соискатель удалил или скрыл от работодателя. Но они учитываются при пагинации (`per_page`) и при подсчете найденных резюме (`found`), а в поле `hidden_on_page` показано количество таких пропущенных резюме на странице
     */
    get: operations["get-vacancy-visitors"];
  };
  "/vacancies/{vacancy_id}": {
    /**
     * Просмотр вакансии
     * @description Возвращает подробную информацию по указанной вакансии
     */
    get: operations["get-vacancy"];
    /**
     * Редактирование вакансий
     * @description Изменяет поля вакансии, передаваемые в теле запроса.
     *
     * Составные поля (например, `salary`, `contacts`, `professional_roles`) можно редактировать только целиком, передавая полный объект. Например, для изменения валюты в зарплате, необходимо передавать также и значение зарплаты.
     *
     * Поля `billing_type` и `manager` необходимо передавать в отдельном запросе
     */
    put: operations["edit-vacancy"];
  };
  "/vacancies/blacklisted": {
    /**
     * Список скрытых вакансий
     * @description Возвращает [подмножество вакансий](#tag/Vakansii/operation/get-vacancy), скрытых пользователем, а также один дополнительный параметр
     */
    get: operations["get-blacklisted-vacancies"];
  };
  "/vacancies": {
    /**
     * Поиск по вакансиям
     * @description Возвращает список вакансий, размещенных в сервисе. Список вакансий фильтруется согласно переданным параметрам запроса.
     *
     * Особенности работы метода:
     *
     * * Неизвестные параметры и параметры с ошибкой в названии игнорируются.
     * * Если не передан токен авторизации, то после первого запроса будет предложено пройти капчу.
     * * Список вакансий зависит от типа авторизации пользователя. Например, для соискателей вакансии фильтруются по [списку скрытых вакансий](#tag/Skrytye-vakansii) и [списку скрытых компаний](#tag/Skrytye-rabotodateli).
     * * Список вакансий также зависит от [выбранного сайта](#section/Obshaya-informaciya/Vybor-sajta) (параметр `host`). Однако выбор регионального сайта, например hh.kz, не ограничивает список вакансиями данного региона. Чтобы ограничить список по региону, используйте параметр `area`.
     * * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше `2000`. Например, возможен запрос `per_page=10&page=199` (выдача с `1991` по `2000` вакансию), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с `2001` по `2010` вакансию)
     */
    get: operations["get-vacancies"];
    /**
     * Публикация вакансии
     * @description Создает новую вакансию с полями, передаваемыми в теле запроса.
     *
     * В соответствии с [законом РФ № 1032-1 от 19.04.1991 в ред. от 02.07.2013 г.](https://hh.ru/article/13967) запрещено размещать информацию, ограничивающую права или устанавливающую преимущества для соискателей по полу, возрасту, семейному положению и другим обстоятельствам, не связанным с деловыми качествами работников.
     *
     * Примечания:
     *
     * * При успешной публикации будут списаны соответствующие услуги.
     * * Все вакансии проходят ручную модерацию.
     * * В течение нескольких минут после публикации вакансия станет доступна в поиске.
     *
     * Полезные ссылки:
     *
     * * [Правила размещения вакансий](https://hh.ru/article/341)
     * * [Как составить хорошее описание вакансии](https://hh.ru/article/16239)
     */
    post: operations["publish-vacancy"];
  };
  "/saved_searches/vacancies/{id}": {
    /** Получение единичного сохраненного поиска вакансий */
    get: operations["get-saved-vacancy-search"];
    /**
     * Обновление сохраненного поиска вакансий
     * @description У сохраненного поиска можно изменить имя (`name`) и статус подписки (`subscription`). В одном запросе можно передать только один из параметров
     */
    put: operations["update-saved-vacancy-search"];
    /** Удаление сохраненного поиска вакансий */
    delete: operations["delete-saved-vacancy-search"];
  };
  "/vacancies/{vacancy_id}/similar_vacancies": {
    /**
     * Поиск по вакансиям, похожим на вакансию
     * @description Если не передан токен авторизации, то после первого запроса будет предложено пройти капчу.
     *
     * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше `2000`. Например, возможен запрос `per_page=10&page=199` (выдача с `1991` по `2000` вакансию), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с `2001` по `2010` вакансию)
     */
    get: operations["get-vacancies-similar-to-vacancy"];
  };
  "/vacancies/{vacancy_id}/upgrades": {
    /** Список улучшений для вакансии */
    get: operations["get-vacancy-upgrade-list"];
  };
  "/resumes/{resume_id}/similar_vacancies": {
    /**
     * Поиск по вакансиям, похожим на резюме
     * @description Данные доступны только автору резюме.
     *
     * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше `2000`. Например, возможен запрос `per_page=10&page=199` (выдача с `1991` по `2000` вакансию), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с `2001` по `2010` вакансию)
     */
    get: operations["get-vacancies-similar-to-resume"];
  };
  "/vacancies/favorited": {
    /**
     * Список отобранных вакансий
     * @description Возвращает [подмножество вакансий](#tag/Vakansii/operation/get-vacancy), добавленных пользователем в отобранные, а также ряд дополнительных полей
     */
    get: operations["get-favorite-vacancies"];
  };
  "/vacancies/blacklisted/{vacancy_id}": {
    /**
     * Добавление вакансии в список скрытых
     * @description Добавляет указанную вакансию в [список скрытых вакансий](#tag/Skrytye-vakansii/operation/get-blacklisted-vacancies)
     */
    put: operations["add-vacancy-to-blacklisted"];
    /**
     * Удаление вакансии из списка скрытых
     * @description Удаляет указанную вакансию из [списка скрытых вакансий](#tag/Skrytye-vakansii/operation/get-blacklisted-vacancies)
     */
    delete: operations["delete-vacancy-from-blacklisted"];
  };
  "/employers/{employer_id}/vacancies/active": {
    /**
     * Просмотр списка опубликованных вакансий
     * @description Возвращает список опубликованных вакансий.
     *
     * Если передан параметр `resume_id`, то в список попадут только те вакансии, которые подходят для указанного резюме. Кроме того, ответ будет содержать дополнительные поля
     */
    get: operations["get-active-vacancy-list"];
  };
  "/employers/{employer_id}/vacancies/hidden": {
    /** Список удаленных вакансий */
    get: operations["get-hidden-vacancies"];
  };
  "/employers/{employer_id}/vacancies/hidden/{vacancy_id}": {
    /**
     * Удаление вакансий
     * @description Удалить можно только вакансию из архива
     */
    put: operations["add-vacancy-to-hidden"];
    /**
     * Восстановление вакансии из удаленных
     * @description Восстановить можно только удаленную из архива вакансию. Вакансия вернется в архив
     */
    delete: operations["restore-vacancy-from-hidden"];
  };
  "/vacancy_conditions": {
    /** Условия заполнения полей при добавлении и редактировании вакансий */
    get: operations["get-vacancy-conditions"];
  };
  "/vacancies/{vacancy_id}/prolongate": {
    /**
     * Информация о возможности продления вакансии
     * @description Условия продления:
     *
     *     * Стоимость продления вакансии равна стоимости новой публикации.
     *     * Стандартные вакансии можно продлевать, если с момента предыдущего продления прошло не менее 1 минуты.
     *     * Вакансии "стандарт-плюс" можно продлевать не ранее, чем за 7 дней до окончания срока публикации
     */
    get: operations["get-prolongation-vacancy-info"];
    /**
     * Продление вакансии
     * @description Продлевает срок размещения указанной вакансии.
     *
     * Условия продления:
     *
     * * Стоимость продления вакансии равна стоимости новой публикации.
     * * Стандартные вакансии можно продлевать, если с момента предыдущего продления прошло не менее 1 минуты.
     * * Вакансии "стандарт-плюс" можно продлевать не ранее, чем за 7 дней до окончания срока публикации
     */
    post: operations["vacancy-prolongation"];
  };
  "/employers/{employer_id}/vacancies/archived/{vacancy_id}": {
    /**
     * Архивация вакансии
     * @description Переносит вакансию в архив
     */
    put: operations["add-vacancy-to-archive"];
  };
  "/vacancies/{id}/preferred_negotiations_order": {
    /** Просмотр предпочитаемой сортировки откликов */
    get: operations["get-pref-negotiations-order"];
    /** Изменение предпочитаемой сортировки откликов */
    put: operations["put-pref-negotiations-order"];
  };
  "/vacancies/favorited/{vacancy_id}": {
    /**
     * Добавление вакансии в список отобранных
     * @description Добавляет указанную вакансию в [список отобранных вакансий](#tag/Otobrannye-vakansii/operation/get-favorite-vacancies)
     */
    put: operations["add-vacancy-to-favorite"];
    /**
     * Удаление вакансии из списка отобранных
     * @description Удаляет указанную вакансию из [списка отобранных вакансий](#tag/Otobrannye-vakansii/operation/get-favorite-vacancies)
     */
    delete: operations["delete-vacancy-from-favorite"];
  };
  "/employers/{employer_id}/managers/{manager_id}/vacancies/available_types": {
    /**
     * Варианты публикации вакансий у текущего менеджера
     * @description Метод позволяет понять, может ли менеджер публиковать вакансии и какие типы вакансий ему доступны. Возвращает все возможные типы публикации
     */
    get: operations["get-available-vacancy-types"];
  };
  "/vacancies/{vacancy_id}/stats": {
    /**
     * Статистика по вакансии
     * @description Возвращает статистику за последние пять дней существования вакансии.
     *
     * При этом:
     *
     * * Если вакансия создана менее пяти дней назад, то первой датой в ответе будет дата создания вакансии. Для будущих дат в полях `responses` и `views` вернется `null`.
     * * Если вакансия находится в архиве или удалена, то последней датой будет дата архивации
     */
    get: operations["get-vacancy-stats"];
  };
  "/employers/{employer_id}/vacancies/archived": {
    /** Список архивных вакансий */
    get: operations["get-archived-vacancies"];
  };
  "/artifacts/portfolio/conditions": {
    /** Условия загрузки портфолио */
    get: operations["get-artifacts-portfolio-conditions"];
  };
  "/artifacts/{id}": {
    /**
     * Редактирование артефакта
     * @description Метод позволяет отредактировать описание портфолио
     */
    put: operations["edit-artifact"];
    /** Удаление артефакта */
    delete: operations["delete-artifact"];
  };
  "/artifacts": {
    /**
     * Загрузка артефакта
     * @description Запрос загружает файл с локальной машины в сервис.
     *
     * Ограничения на типы файлов и их размер доступны в [условиях загрузки артефактов](#tag/Rabota-s-artefaktami).
     *
     * Для прикрепления загруженных изображений в резюме, необходимо передать `id` артефакта в [соответствующее поле резюме](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#resume-fields). Для удаления артефакта из резюме укажите `null`
     */
    post: operations["load-artifact"];
  };
  "/artifacts/portfolio": {
    /**
     * Получение портфолио
     * @description Возвращает список ранее загруженных изображений с портфолио. Их можно использовать при создании/редактировании резюме
     */
    get: operations["get-artifacts-portfolio"];
  };
  "/artifacts/photo/conditions": {
    /** Условия загрузки фотографий */
    get: operations["get-artifact-photos-conditions"];
  };
  "/artifacts/photo": {
    /**
     * Получение фотографий
     * @description Возвращает список ранее загруженных изображений с фотографиями. Их можно использовать при создании/редактировании резюме
     */
    get: operations["get-artifact-photos"];
  };
  "/dictionaries": {
    /**
     * Справочники полей
     * @description Справочники полей и сущностей, используемых в API. Значения в справочниках могут поменяться в любой момент
     */
    get: operations["get-dictionaries"];
  };
  "/languages": {
    /** Список всех языков */
    get: operations["get-languages"];
  };
  "/educational_institutions": {
    /** Основная информация об учебных заведениях */
    get: operations["get-educational-institutions-dictionary"];
  };
  "/skills": {
    /**
     * Справочник ключевых навыков
     * @description Метод возвращает информацию по запрашиваемым ключевым навыкам.
     *
     * Значения в справочнике могут поменяться в любой момент
     */
    get: operations["get-skills"];
  };
  "/professional_roles": {
    /**
     * Справочник профессиональных ролей
     * @description Возвращает профессиональные роли, их категории и другую информацию о профессиональных ролях
     */
    get: operations["get-professional-roles-dictionary"];
  };
  "/educational_institutions/{id}/faculties": {
    /**
     * Список факультетов учебного заведения
     * @description Возвращает список факультетов указанного учебного заведения
     */
    get: operations["get-faculties"];
  };
  "/industries": {
    /**
     * Отрасли компаний
     * @description Возвращает двухуровневый справочник всех отраслей
     */
    get: operations["get-industries"];
  };
  "/areas/countries": {
    /**
     * Справочник стран
     * @description Возвращает подмножество регионов, являющихся странами
     */
    get: operations["get-countries"];
  };
  "/areas": {
    /**
     * Дерево всех регионов
     * @description Возвращает древовидный список всех регионов.
     *
     * Значения в справочнике могут поменяться в любой момент
     */
    get: operations["get-areas"];
  };
  "/areas/{area_id}": {
    /**
     * Справочник регионов, начиная с указанного
     * @description Возвращает древовидный список регионов, начиная с указанного.
     *
     * Значения в справочнике могут поменяться в любой момент
     */
    get: operations["get-areas-from-specified"];
  };
  "/salary_statistics/dictionaries/employee_levels": {
    /**
     * Уровни компетенций
     * @description Возвращает список уровней компетенций
     */
    get: operations["get-salary-employee-levels"];
  };
  "/salary_statistics/dictionaries/salary_areas": {
    /**
     * Регионы и города
     * @description Возвращает список регионов, областей и городов
     */
    get: operations["get-salary-salary-areas"];
  };
  "/salary_statistics/dictionaries/professional_areas": {
    /**
     * Профобласти и специализации
     * @description Возвращает список профобластей и специализаций
     */
    get: operations["get-salary-professional-areas"];
  };
  "/salary_statistics/dictionaries/salary_industries": {
    /**
     * Отрасли и сферы деятельности
     * @description Возвращает двухуровневый список отраслей и сфер деятельности
     */
    get: operations["get-salary-industries"];
  };
  "/negotiations/{collection_name}/{nid}": {
    /**
     * Действия по отклику/приглашению коллекции
     * @description Запрос изменяет состояние работодательского (`employer_state`) или соискательского (`state`) состояния отклика/приглашения.
     *
     * #### Смена работодательского состояния отклика/приглашения
     *
     * > Доступные действия для каждого отклика/приглашения перечислены в массиве `employer_states` [списка откликов/приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations).
     *
     * Чтобы изменить состояние отклика, выполните запрос из параметра `actions[].url` [списка откликов/приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-collection-negotiations-list) для выбранного действия над откликом.
     * В запросе необходимо передать аргументы массива `actions[].arguments` в формате `application/x-www-form-urlencoded`.
     *
     * Примеры действий:
     *
     * * отложить отклик;
     * * пригласить соискателя на интервью в ответ на отклик;
     * * отказать соискателю.
     *
     * #### Смена соискательского состояния отклика/приглашения
     *
     * Изменение соискательского состояния отклика/приглашения влияет на [статистику по работе с откликами](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations-statistics-employer).
     *
     * Условие смены соискательского состояния отклика/приглашения — отправка сообщения соискателю любым из способов:
     *
     * - Совершить действие с откликом/приглашением, используя метод `/negotiations/{collection_name}/{nid}`, с сопроводительным сообщением.
     * - [Отправить сообщение](#tag/Otklikipriglasheniya-rabotodatelya/operation/send-negotiation-message) в отклике. Статус изменится, если перед отправкой использовался метод изменения работодательского статуса без сопроводительного сообщения.
     *
     * Соискательский статус в обоих случаях изменится или на приглашение (`invitation`), или на отказ (`discard`)
     */
    put: operations["change-negotiation-action"];
  };
  "/negotiations": {
    /**
     * Список откликов/приглашений
     * @description Возвращает список откликов соискателя или список коллекций откликов/приглашений по [вакансии](#tag/Upravlenie-vakansiyami/operation/get-active-vacancy-list) работодателя.
     *
     * По умолчанию отклики сортируются по дате последнего обновления — от новых к старым.
     *
     * Чтобы получить список активных откликов, передайте в запросе параметр `?status=active`
     */
    get: operations["get-negotiations"];
    /**
     * Отклик на вакансию
     * @description Запрос позволяет пользователю откликнуться на вакансию.
     *
     * Чтобы узнать, какими резюме возможно откликнуться на конкретную вакансию, воспользуйтесь [списком подходящих резюме](#tag/Rezyume.-Prosmotr-informacii/operation/get-suitable-resumes)
     */
    post: operations["apply-to-vacancy"];
  };
  "/employers/{employer_id}/managers/{manager_id}/negotiations_statistics": {
    /**
     * Статистика откликов для менеджера
     * @description Запрос выводит статистику по работе с откликами для вакансий менеджера за период (30 дней). Статистика менеджера доступна самому менеджеру, а также менеджерам с [типом](#tag/Menedzhery-rabotodatelya/operation/get-employer-manager-types) `main_contact_person`.
     *
     * Дополнительно рассчитывается [индекс вежливости](https://hh.ru/article/23734) менеджера по всем вакансиям
     */
    get: operations["get-negotiations-statistics-manager"];
  };
  "/negotiations/active": {
    /**
     * Список активных откликов
     * @deprecated
     * @description Возвращает список активных откликов соискателя.
     *
     * Запрос является устаревшим и поддерживается для обратной совместимости. Вместо него используйте [запрос списка откликов](#tag/Perepiska-(otklikipriglasheniya)-dlya-soiskatelya/operation/get-negotiations) с параметром `?status=active`
     */
    get: operations["get-active-negotiations"];
  };
  "/message_templates/{template}": {
    /**
     * Список шаблонов ответов для отклика/приглашения
     * @description Метод требует наличия [платного доступа для работодателя](#operation/get-payable-api-method-access).
     *
     * Возвращает список шаблонов ответов для отклика/приглашения или резюме. Может использоваться в отправляемых соискателю приглашениях на вакансию или [действиях по откликам/приглашениям](#tag/Otklikipriglasheniya-rabotodatelya/operation/put-negotiations-collection-to-next-state).
     *
     * > Количество доступных шаблонов будет зависеть от конкретного отклика/приглашения или вакансии и их статусов.
     *
     * Рекомендуется использовать URL из поля `templates.url` в [списке откликов/приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations). Примеры:
     *
     * ```
     * GET /message_templates/{template}?topic_id={topic_id}
     * GET /message_templates/{template}?vacancy_id={vacancy_id}&resume_id={resume_id}
     * ```
     */
    get: operations["get-negotiation-message-templates"];
  };
  "/negotiations/response": {
    /**
     * Список откликов/приглашений коллекции
     * @description Возвращает список откликов/приглашений для заданной коллекции. URL для запроса необходимо брать из поля `collections[].url` [списка коллекций](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations).
     *
     * > Вместо `response` необходимо указывать параметр `{collection_name}` — название коллекции. Возможные значения указаны в поле `generated_collections.name` [списка коллекций](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations).
     *
     * В ответе будет только основная информация о резюме. Чтобы получить дополнительную информацию, например, контактный телефон, необходимо [запросить полное резюме](#tag/Upravlenie-vakansiyami/operation/get-vacancy).
     *
     * Некоторые параметры запроса могут принимать множественные значения: `key=value&key=value`. Если параметр может принимать несколько значений, об этом явно указано в его описании. Неизвестные параметры и параметры с ошибкой в названии игнорируются.
     *
     * > Коллекция `phone_calls` принимает только параметры `vacancy_id`, `order_by`, `page` и `per_page`
     */
    get: operations["get-collection-negotiations-list"];
  };
  "/negotiations/phone_interview": {
    /**
     * Пригласить соискателя на вакансию
     * @description Запрос формирует приглашение на вакансию для соискателя по инициативе работодателя.
     *
     * > Вместо `phone_interview` необходимо сформировать запрос из параметра `negotiations_actions[].url` [списка подходящих вакансий к резюме](#tag/Upravlenie-vakansiyami/operation/get-active-vacancy-list), передав аргументы из массива `negotiations_actions[].arguments`.
     *
     * Пример запроса:
     *
     * ```
     * POST /negotiations/phone_interview?resume_id=123456&vacancy_id=654321&message=new_msg
     * ```
     */
    post: operations["invite-applicant-to-vacancy"];
  };
  "/negotiations/{nid}/test/solution": {
    /**
     * Получить результаты тестов, прикрепленных к вакансии
     * @description Запрос возвращает информацию о пройденных тестах откликнувшегося соискателя
     */
    get: operations["get-negotiation-test-results"];
  };
  "/negotiations/{nid}/messages/{mid}": {
    /**
     * Редактирование сообщения в отклике
     * @description На данный момент доступно редактирование только сообщения при отклике.
     *
     * Текст сообщения можно редактировать после отправки при соблюдении следующих условий:
     * - сообщение еще не прочитано другой стороной;
     * - вакансия, на которую отправлялся отклик, должна быть активна (не в архиве);
     * - резюме из отклика не должно быть скрыто или удалено.
     *
     * Условия могут измениться.
     *
     * У каждого сообщения в [списке сообщений в отклике](https://github.com/hhru/api/blob/master/docs/negotiations.md#%D0%BF%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D1%81%D0%BF%D0%B8%D1%81%D0%BA%D0%B0-%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B9-%D0%B2-%D0%BE%D1%82%D0%BA%D0%BB%D0%B8%D0%BA%D0%B5) в поле `editable` указана возможность редактирования
     */
    put: operations["edit-negotiation-message"];
  };
  "/negotiations/read": {
    /** Отметить отклики прочитанными */
    post: operations["post-negotiations-topics-read"];
  };
  "/negotiations/active/{nid}": {
    /** Скрыть отклик */
    delete: operations["hide-active-response"];
  };
  "/negotiations/{id}": {
    /**
     * Просмотр отклика/приглашения
     * @description Запрос возвращает информацию об отклике/приглашении по его ID.
     *
     * Работодатель может получить URL для запроса из [списка откликов/приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-collection-negotiations-list) (поле `items[].url`).
     *
     * > !! Обратите внимание, что методы для работы с сообщениями в рамках отклика/приглашения от имени [соискателя](#tag/Perepiska-(otklikipriglasheniya)-dlya-soiskatelya/operation/get-negotiation-messages) и [менеджера работодателя](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-messages) устарели, и новые возможности [чатов](https://feedback.hh.ru/knowledge-base/article/1290) в них не будут поддерживаться
     */
    get: operations["get-negotiation-item"];
    /**
     * Действия по откликам/приглашениям
     * @description Работодатель может изменять состояние (state) отклика для соискателя, чтобы повысить качество обратной связи и упростить работу со статистикой откликов.
     *
     * Если работодатель, используя данный метод, отправляет соискателю сообщение об изменении состояния отклика/приглашения (поле `message` в теле запроса), это приведет также к изменению соискательского состояния отклика/приглашения.
     *
     * Обязательность аргументов в теле запроса отличается для разных откликов/приглашений. Проверить, является ли аргумент обязательным можно в поле `actions.arguments`, которое возвращается для каждого отклика в [списке откликов/приглашений](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md#действия-по-откликуприглашению-actions)
     */
    put: operations["put-negotiations-collection-to-next-state"];
  };
  "/employers/{employer_id}/negotiations_statistics": {
    /**
     * Статистика откликов для компании
     * @description Запрос выводит статистику по работе с откликами для вакансий компании за период (30 дней).
     *
     * Дополнительно рассчитывается [индекс вежливости](https://hh.ru/article/23734) компании по всем вакансиям
     */
    get: operations["get-negotiations-statistics-employer"];
  };
  "/negotiations/{nid}/messages": {
    /**
     * Просмотр списка сообщений в отклике/приглашении
     * @description Запрос возвращает список всех сообщений выбранного отклика/приглашения. Работодатель может посмотреть список по URL, указанному в поле `messages` [списка откликов/приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations) или в [отдельном отклике](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-item).
     *
     * Типы сообщений:
     *
     * * сопроводительное письмо соискателя;
     * * сопроводительное письмо работодателя при смене статуса отклика;
     * * свободная переписка между соискателем и работодателем.
     *
     * ‼️ Обратите внимание, что методы для работы с сообщениями в рамках отклика/приглашения от имени [соискателя](#tag/Perepiska-(otklikipriglasheniya)-dlya-soiskatelya/operation/get-negotiation-messages) и
     *   [менеджера работодателя](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-messages) устарели, и новые возможности [чатов](https://feedback.hh.ru/knowledge-base/article/1290) в них не будут поддерживаться.
     *   В связи с этим переписка может некорректно отображаться
     */
    get: operations["get-negotiation-messages"];
    /**
     * Отправка нового сообщения
     * @description Запрос отправляет новое сообщение в рамках переписки.
     *
     * Отправить новое сообщение можно, если:
     *
     * * Работодатель пригласил соискателя на вакансию.
     * * Соискатель оставил отклик на вакансию.
     *
     * Если вакансия была отправлена в архив или соискатель удалил резюме, переписка будет недоступна. Работодатель также может вручную отключить переписку для вакансии.
     *
     * ‼️ Обратите внимание, что методы для работы с сообщениями в рамках отклика/приглашения от имени [соискателя](#tag/Perepiska-(otklikipriglasheniya)-dlya-soiskatelya/operation/get-negotiation-messages) и
     *   [менеджера работодателя](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-messages) устарели, и новые возможности [чатов](https://feedback.hh.ru/knowledge-base/article/1290) в них не будут поддерживаться.
     *   В связи с этим переписка может некорректно отображаться
     */
    post: operations["send-negotiation-message"];
  };
  "/vacancies/drafts/{draft_id}": {
    /** Получение черновика вакансии */
    get: operations["get-vacancy-draft"];
    /** Изменение черновика вакансии */
    put: operations["change-vacancy-draft"];
    /** Удаление черновика вакансии */
    delete: operations["delete-vacancy-draft"];
  };
  "/vacancies/drafts/{draft_id}/publish": {
    /** Публикация вакансии на основе черновика */
    post: operations["publish-vacancy-from-draft"];
  };
  "/vacancies/drafts/{draft_id}/duplicates": {
    /** Проверка наличия дубликатов вакансии */
    get: operations["search-for-vacancy-draft-duplicates"];
  };
  "/vacancies/drafts": {
    /** Получение списка черновиков вакансий */
    get: operations["get-vacancy-draft-list"];
    /** Создание черновика вакансии */
    post: operations["create-vacancy-draft"];
  };
  "/vacancies/auto_publication": {
    /** Отмена автопубликации вакансии */
    delete: operations["disable-automatic-vacancy-publication"];
  };
  "/webhook/subscriptions/{subscription_id}": {
    /**
     * Изменить подписку на уведомления
     * @description Обновить можно как каждое поле по отдельности (в таком случае нужно отправить только обновляемое поле), так и несколько полей одновременно. Для обновления `actions` нужно передать полный список типов событий, по которым будут формироваться уведомления. Переданные типы событий не добавляются к типам событий, на которые пользователь уже подписан.
     * Пустой список `actions` передать нельзя
     */
    put: operations["change-webhook-subscription"];
    /** Удалить подписку на уведомление */
    delete: operations["cancel-webhook-subscription"];
  };
  "/webhook/subscriptions": {
    /** Получить список уведомлений, на которые подписан пользователь */
    get: operations["get-webhook-subscriptions"];
    /**
     * Подписаться на уведомления
     * @description В рамках одного приложения пользователь может получать уведомления только на 1 url:
     * нельзя подписаться разными действиями на разные урлы.
     * После наступления события будет отправлен POST-запрос на указанный URL c json телом (**см. раздел "Callbacks"**).
     *
     * В ответ на POST-запрос ожидается ответ с кодом `2хх Success`, если сообщение принято, или `409 Conflict`, если пришел дубликат.
     * Для определения дубликатов нужно использовать id из запроса - уникальный идентификатор для пары "пользователь + приложение" в рамках одного типа события в подписке.
     * Дубликаты возможны, если мы не получили ответ из-за проблем с сетью, или не получили ожидаемый ответ.
     *
     * Если в рамках одной подписки ожидаемые ответы не поступают долгое время,
     * на почту разработчика приложения будет отправлено уведомительное письмо, подписка автоматически деактивируется, а отправки прекращаются.
     *
     * При удалении приложения владельцем или отзыве пользователем доступа у приложения все подписки на уведомления удаляются.
     * После восстановления доступа необходимо оформить новую подписку.
     *
     * Вебхуки не являются средствами гарантированной доставки. Мы отправляем все сообщения, но не гарантируем, что адресат их получит
     *
     * Структура и содержимое колбэков описаны в разделе [callbacks](#callbacks)
     */
    post: operations["post-webhook-subscription"];
  };
  "/employers/{employer_id}/tests": {
    /**
     * Справочник тестов работодателя
     * @description Возвращает список сохраненных тестов работодателя
     */
    get: operations["get-tests-dictionary"];
  };
  "/employers/{employer_id}/vacancy_areas/active": {
    /**
     * Список регионов, в которых есть активные вакансии
     * @description Возвращает список регионов, в которых на данный момент есть активные вакансии от указанного работодателя.
     *
     * Значения в справочнике могут поменяться в любой момент
     */
    get: operations["get-employer-vacancy-areas"];
  };
  "/employers/{employer_id}": {
    /**
     * Информация о работодателе
     * @description Возвращает данные о работодателе со ссылкой на выдачу вакансий этого работодателя
     */
    get: operations["get-employer-info"];
  };
  "/employers/blacklisted/{employer_id}": {
    /**
     * Добавление работодателя в список скрытых
     * @description Добавляет указанного работодателя в [список скрытых работодателей](#tag/Skrytye-vakansii/operation/get-blacklisted-vacancies)
     */
    put: operations["add-employer-to-blacklisted"];
    /**
     * Удаление работодателя из списка скрытых
     * @description Удаляет указанного работодателя из [списка скрытых работодателей](#tag/Skrytye-vakansii/operation/get-blacklisted-vacancies)
     */
    delete: operations["delete-employer-from-blacklisted"];
  };
  "/employers": {
    /**
     * Поиск работодателя
     * @description При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше `5000`. Например, возможен запрос `per_page=10&page=499` (выдача с `4991` по `5000` работодателя), но запрос с `per_page=10&page=500` вернёт ошибку (выдача с `5001` до `5010` работодателя)
     */
    get: operations["search-employer"];
  };
  "/employers/{employer_id}/departments": {
    /**
     * Справочник департаментов работодателя
     * @description Возвращает список департаментов работодателя.
     *
     * Значения в справочнике могут поменяться в любой момент
     */
    get: operations["get-employer-departments"];
  };
  "/employers/{employer_id}/vacancy_branded_templates": {
    /**
     * Список доступных бренд шаблонов вакансий работодателя
     * @description Внимание! Значения в справочниках могут поменяться в любой момент. Не нужно завязываться на них.
     *
     * Использование брендированных шаблонов вакансии доступно работодателям, оплатившим и активировавшим соответствующую
     * услугу. Подробнее на сайте [hh.ru](https://hh.ru/article/brand)
     */
    get: operations["get-vacancy-branded-templates-list"];
  };
  "/employers/blacklisted": {
    /**
     * Список скрытых работодателей
     * @description Возвращает [подмножество работодателей](#tag/Rabotodatel/operation/search-employer), скрытых пользователем, а также один дополнительный параметр
     */
    get: operations["get-blacklisted-employers"];
  };
  "/districts": {
    /** Список районов во всех городах */
    get: operations["get-all-districts"];
  };
  "/salary_statistics/paid/salary_evaluation/{area_id}": {
    /**
     * Оценка заработной платы без прогноза
     * @description Возвращает статистику зарплат в соответствии с указанными параметрами запроса. Пользователь должен иметь доступ к платным отчетам [банка зарплат](https://salary.hh.ru/).
     *
     * Как это работает:
     *
     * * Основным источником данных для статистики служит информация о зарплатах, предоставляемая участниками проекта [Банк данных заработных плат](https://salary.hh.ru/promo).
     * * Все анкеты участников проходят проверку модераторами. Если заявленная участником зарплата сильно отличается от средней по рынку, она не будет включена в банк данных.
     * * Если в банке недостаточно данных для построения статистики по запросу, сервис использует следующие приемы:
     *
     *     * Объединяет сведения из нескольких отраслей, если недостаточно данных по запрошенной отрасли.
     *     * Объединяет сведения из нескольких близких специализаций, если недостаточно данных по запрошенной специализации.
     *     * Объединяет сведения из нескольких городов, если недостаточно данных по запрошенному городу.
     *     * Использует сведения по запрошенным специализациям из другого региона, если недостаточно данных по запрошенному региону. При этом вычисляется поправочный коэффициент, который отражает разницу в зарплатах между регионами.
     *
     *     Если эти приемы не позволяют получить достаточную выборку, сервис может использовать информацию о зарплатах из вакансий и резюме. Такая информация не проходит предварительную модерацию и считается менее надежной, поэтому используется только в крайнем случае. Чтобы использовать эту функцию, передайте в запросе параметр `extend_sources=true`
     */
    get: operations["get-salary-evaluation"];
  };
  "/metro": {
    /** Список станций метро во всех городах */
    get: operations["get-metro-stations"];
  };
  "/metro/{city_id}": {
    /** Список станций метро в указанном городе */
    get: operations["get-metro-stations-in-city"];
  };
  "/saved_searches/resumes/{saved_search_id}/managers/{manager_id}": {
    /** Передача сохраненного поиска резюме другому менеджеру */
    put: operations["move-saved-resume-search"];
  };
  "/vacancies/{vacancy_id}/resumes_by_status": {
    /**
     * Резюме, сгруппированные по возможности отклика на данную вакансию
     * @description Возвращает резюме пользователя, сгруппированные в четыре списка в зависимости от возможности отклика на указанную вакансию
     */
    get: operations["get-resumes-by-status"];
  };
  "/resumes/{resume_id}/status": {
    /**
     * Статус резюме и готовность к публикации
     * @description Возвращает информацию о статусе резюме, готовности резюме к публикации, а также замечания модератора по выбранному резюме
     */
    get: operations["get-resume-status"];
  };
  "/resumes/{resume_id}/negotiations_history": {
    /**
     * История откликов/приглашений по резюме
     * @description Возвращает последние действия с указанным резюме, ограниченные 30-ю вакансиями данного работодателя, и 10-ю изменениями состояний откликов/приглашений по каждой из этих вакансий.
     *
     * Метод требует наличия [платного доступа для работодателя](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access)
     */
    get: operations["get-resume-negotiations-history"];
  };
  "/saved_searches/resumes/{id}": {
    /**
     * Получение единичного сохраненного поиска резюме
     * @description Внимание: счетчик `new_items.count` обновляется раз в час. Из-за этого реальное количество новых найденных резюме
     * может расходиться со значением этого счетчика
     */
    get: operations["get-saved-resume-search"];
    /**
     * Обновление сохраненного поиска резюме
     * @description У сохраненного поиска можно изменить имя (`name`) и статус подписки (`subscription`). В одном запросе можно передать только один из параметров
     */
    put: operations["update-saved-resume-search"];
    /** Удаление сохраненного поиска резюме */
    delete: operations["delete-saved-resume-search"];
  };
  "/resumes": {
    /**
     * Поиск резюме
     * @description Возвращает результаты поиска резюме.
     *
     * Требуется наличие [платного доступа](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access).
     *
     * Некоторые параметры запроса могут принимать множественные значения: `key=value&key=value`. Если параметр может принимать несколько значений, об этом явно указано в его описании. Неизвестные параметры и параметры с ошибкой в названии игнорируются.
     *
     * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше 2000. Например, возможен запрос `per_page=10&page=199` (выдача с 1991 по 2000 резюме), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с 2001 до 2010 резюме)
     */
    get: operations["search-for-resumes"];
    /**
     * Создание резюме
     * @description Создает резюме с полями, переданными в теле запроса.
     *
     * Если передан параметр `source_resume_id`, новое резюме будет склонировано из указанного. Склонировать можно только собственное резюме
     */
    post: operations["create-resume"];
  };
  "/resumes/mine": {
    /** Список резюме авторизованного пользователя */
    get: operations["get-mine-resumes"];
  };
  "/resumes/{resume_id}/publish": {
    /**
     * Публикация резюме
     * @description При первой публикации резюме оно становится доступно для использования. При повторной публикации происходит обновление даты резюме.
     *
     * Повторная публикация означает обновление даты резюме. Ключ `next_publish_at` у [резюме](#tag/Rezyume.-Prosmotr-informacii/operation/get-mine-resumes) указывает время, когда можно обновить резюме
     */
    post: operations["publish-resume"];
  };
  "/resume_conditions": {
    /**
     * Условия заполнения полей нового резюме
     * @description Возвращает список требований для полей при заполнении нового резюме
     */
    get: operations["get-new-resume-conditions"];
  };
  "/vacancies/{vacancy_id}/suitable_resumes": {
    /**
     * Список подходящих для отклика резюме
     * @description Возвращает список сокращенных представлений резюме соискателя, которыми он может откликнуться на указанную вакансию.
     *
     * В качестве альтернативы данному методу можно использовать метод [resumes_by_status](#tag/Rezyume.-Prosmotr-informacii/operation/get-resumes-by-status)
     */
    get: operations["get-suitable-resumes"];
  };
  "/resumes/{resume_id}/conditions": {
    /**
     * Условия заполнения полей существующего резюме
     * @description Возвращает список требований для полей при заполнении указанного резюме
     */
    get: operations["get-resume-conditions"];
  };
  "/resumes/{resume_id}/views": {
    /**
     * История просмотра резюме
     * @description Возвращает историю просмотров резюме.
     *
     * Этот запрос обнуляет счетчик новых просмотров (поле `new_views`), который возвращается в запросах на просмотр [конкретного резюме](#tag/Prosmotr-rezyume/operation/get-resume) и [списка резюме](#tag/Rezyume.-Prosmotr-informacii/operation/get-mine-resumes)
     */
    get: operations["get-resume-view-history"];
  };
  "/resumes/{resume_id}": {
    /**
     * Просмотр резюме
     * @description Возвращает информацию об указанном резюме.
     *
     * Особенности работы метода при запросе от работодателя:
     *
     * * Требуется наличие [платного доступа](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access).
     * * При просмотре резюме с контактами действуют [специальные правила](https://github.com/hhru/api/blob/master/docs/payable/resume.md#просмотр-резюме-с-контактами).
     * * Если просмотр полных данных по резюме недоступен при текущей авторизации, в некоторых полях вернется `null`, а поле `can_view_full_info` будет иметь значение `false`.
     * * Если у работодателя есть отклик/приглашение на это резюме, отклик будет считаться просмотренным
     */
    get: operations["get-resume"];
    /**
     * Обновление резюме
     * @description Обновляет переданные в теле запроса поля указанного резюме.
     *
     * Любой упомянутый в теле запроса массив полностью переопределит существующий. Чтобы добавить к существующему массиву новый элемент, перечислите также в запросе все элементы существующего массива. Так, в приведенном примере запроса к ранее указанному русскому языку добавляется английский.
     *
     * Дополнительные правила заполнения резюме:
     *
     * * У соискателя не может быть несколько резюме с одинаковым `title`.
     * * Специализации должны быть из одной профессиональной области.
     * * Город проживания должен быть одним из элементов справочника `/areas`, и у этого элемента не должно быть потомков. Например, нельзя указать город проживания «Россия».
     * * Ближайшая станция метро должна находиться в городе проживания.
     * * Для специализаций из профессиональной области «Начало карьеры, студенты» (`id=15`) можно не указывать опыт работы и навыки. Для остальных профессиональных областей данные поля должны содержать хотя бы по одной записи
     */
    put: operations["edit-resume"];
    /**
     * Удаление резюме
     * @description Резюме удаляется без возможности восстановления. Все связанные с ним отклики исчезают
     */
    delete: operations["delete-resume"];
  };
  "/resumes/creation_availability": {
    /** Проверка возможности создания резюме */
    get: operations["get-resume-creation-availability"];
  };
  "/saved_searches/resumes": {
    /** Список сохраненных поисков резюме */
    get: operations["get-saved-resume-searches"];
    /**
     * Создание нового сохраненного поиска резюме
     * @description Некоторые параметры принимают множественные значения: `key=value&key=value`.
     *
     * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше 2000. Например, возможен запрос `per_page=10&page=199` (выдача с 1991 по 2000 вакансию), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с 2001 до 2010 вакансию)
     */
    post: operations["create-saved-resume-search"];
  };
  "/resumes/{resume_id}/access_types": {
    /**
     * Получение списка типов видимости резюме
     * @description Некоторые типы видимости, например `whitelist` и `blacklist`, подразумевают наличие списка работодателей, для которых резюме должно быть видимо или скрыто. См. [управление списками видимости резюме](#tag/Rezyume.-Spiski-vidimosti)
     */
    get: operations["get-resume-access-types"];
  };
  "/resumes/{resume_id}/{list_type}/search": {
    /**
     * Поиск работодателей для добавления в список видимости
     * @description Возвращает результаты поиска работодателей
     */
    get: operations["get-resume-visibility-employers-list"];
  };
  "/resumes/{resume_id}/{list_type}": {
    /**
     * Получение списка видимости резюме
     * @description Возвращает список работодателей, для которых резюме должно быть видимо или скрыто
     */
    get: operations["get-resume-visibility-list"];
    /**
     * Добавление работодателей в список видимости
     * @description Добавляет указанных работодателей в список видимости указанного типа.
     *
     * За один запрос можно добавить не больше 100 компаний.
     *
     * Добавление в список идемпотентно, то есть добавление работодателей, уже присутствующих в списке, игнорируется и не приводит к дублированию записей.
     *
     * Можно добавить в список заблокированного работодателя
     */
    post: operations["add-resume-visibility-list"];
    /** Очистка списка видимости */
    delete: operations["delete-resume-visibility-list"];
  };
  "/resumes/{resume_id}/{list_type}/employer": {
    /**
     * Удаление работодателя из списка видимости
     * @description Удаление из списка идемпотентно, то есть удаление отсутствующих в списке или несуществующих работодателей игнорируется и не приводит к ошибкам.
     *
     * Можно удалить из списка заблокированного работодателя.
     *
     * За один запрос можно удалить не более 100 компаний
     */
    delete: operations["delete-employer-from-resume-visibility-list"];
  };
  "/applicant_comments/{applicant_id}/{comment_id}": {
    /**
     * Обновление комментария
     * @description Метод требует наличия [платного доступа для работодателя](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access).
     *
     * Автор комментария может изменить его текст и тип доступа. Если параметр не передан, то его значение останется прежним
     */
    put: operations["update-applicant-comment"];
    /**
     * Удаление комментария
     * @description Метод требует наличия [платного доступа для работодателя](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access).
     *
     * Удалить комментарий может только его автор
     */
    delete: operations["delete-applicant-comment"];
  };
  "/applicant_comments/{applicant_id}": {
    /**
     * Получение списка комментариев
     * @description Метод требует наличия [платного доступа для работодателя](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access).
     *
     * Список будет содержать комментарии текущего пользователя, а также комментарии других менеджеров компании, если они открыли доступ к ним при публикации
     */
    get: operations["get-applicant-comments-list"];
    /**
     * Добавление комментария
     * @description Метод требует наличия [платного доступа для работодателя](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access)
     */
    post: operations["add-applicant-comment"];
  };
  "/employers/{employer_id}/mail_templates/{template_id}": {
    /**
     * Изменение шаблона ответа соискателю
     * @description Изменение шаблона ответа для [переписки](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md)
     */
    put: operations["put-mail-templates-item"];
  };
  "/employers/{employer_id}/mail_templates": {
    /**
     * Список доступных шаблонов ответов соискателю
     * @description Возвращает список возможных значений шаблонов ответов для [переписки](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md)
     */
    get: operations["get-mail-templates"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Ошибки */
    ErrorsResumeVisibilityErrorsBadRequest: components["schemas"]["ErrorsCommonBadRequestErrors"] | components["schemas"]["ErrorsResumeVisibilityErrors"];
    /**
     * Ошибки в параметрах запроса
     * @description Информация о возникших ошибках
     */
    ErrorsResumeVisibilityErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsResumeVisibilityError"][];
    };
    /**
     * Поле ошибки с request_id
     * @description В теле выдается request_id для упрощения решения проблем при обращении в поддержку hh.ru (api@hh.ru)
     */
    ErrorsCommonErrorRequestId: {
      /**
       * @description Идентификатор запроса
       * @example q1ww2e2r4ty
       */
      request_id: string;
    };
    /** Ошибка в параметре запроса */
    ErrorsResumeVisibilityError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example bad_argument
       * @enum {string}
       */
      type: "bad_argument" | "resume_visibility_list";
      /**
       * @description Название поля с ошибкой:
       *
       * - `per_page` — передано невалидное количество элементов на странице (максимум 100).
       * - `unknown_employer` — передан неизвестный идентификатор работодателя.
       * - `limit_exceeded` — превышен лимит списка видимости.
       * - `too_many_employers` — передано слишком много работодателей.
       * - `id` — передан невалидный идентификатор работодателя
       *
       * @example per_page
       * @enum {string}
       */
      value: "per_page" | "unknown_employer" | "limit_exceeded" | "too_many_employers";
    };
    /**
     * Ошибка в теле запроса
     * @description Информация о возникших ошибках
     */
    ErrorsCommonBadRequestErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsCommonBadRequestError"][];
    };
    /** Общая ошибка */
    ErrorsCommonBadRequestError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example bad_request
       * @enum {string}
       */
      type: "bad_request";
    };
    /** Ответ на публикацию черновика */
    VacancyDraftDraftResponseSchema: components["schemas"]["Id"] & {
      /** @description Поля, которые не были сохранены при создании черновика, вследствие не верного заполнения */
      ignored_fields?: string[];
      /** @description Заголовок черновика */
      name: string;
      /** @description Готовность черновика к публикации */
      publication_ready: boolean;
      /** @description Поля, которые были сохранены при создании черновика, с соответствующими ошибками, которые необходимо поправить для успешной публикации вакансии на основе черновика */
      validation_errors?: components["schemas"]["VacancyDraftDraftVacancyError"][];
    };
    /**
     * Id созданного объекта
     * @description Информация о созданном объекте
     */
    Id: {
      /**
       * @description Идентификатор созданного объекта
       * @example 22
       */
      id: string;
    };
    /** Ошибка */
    VacancyDraftDraftVacancyError: {
      /** @description Причина ошибки */
      reason?: string;
      /** @description Название поля, в котором допущена ошибка */
      value: string;
    };
    /**
     * Невалидный json
     * @description Информация о возникших ошибках
     */
    ErrorsCommonBadJsonDataErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsCommonBadJsonDataError"][];
    };
    /** Общая ошибка */
    ErrorsCommonBadJsonDataError: {
      /**
       * @description Описание ошибки
       * @example Значение неправильное
       */
      description?: string | null;
      /**
       * @description Путь до параметра, в котором возникла ошибка.
       *
       * Для указания параметра используется формат JsonPointer [RFC 6901](https://tools.ietf.org/html/rfc6901)
       *
       * @example /contacts/phones/1/number
       */
      pointer?: string;
      /**
       * @description Причина ошибки. Возможные значения:
       *   * `required` - отсутствует обязательное поле
       *   * `invalid` - значение введено не корректно
       *   * `size_less_than_min` - пустой массив
       *   * `unexpected` - поле не ожидается
       *   * `greater_than_max` - значение больше максимума
       *
       * @example required
       * @enum {string}
       */
      reason?: "required" | "invalid" | "size_less_than_min" | "greater_than_max" | "unexpected";
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example bad_json_data
       */
      type: string;
      /**
       * @description Название поля с ошибкой
       * @example employer_id
       */
      value?: string;
    };
    /** Информация о пройденных тестах */
    NegotiationsNegotiationTestResultsResponse: {
      /** @description Пройденные тесты кандидата */
      test_result: {
        /** @description Время, затраченное на выполнение теста, в секундах */
        duration: number;
        /**
         * @description Дифференцированная оценка за тест:
         * * `UNFAIR` — от 0 до 14 баллов;
         * * `FAIR` — от 15 до 44 баллов;
         * * `GOOD` — от 45 до 79 баллов;
         * * `EXCELLENT` — от 80 до 100 баллов
         *
         * @enum {string}
         */
        mark: "UNFAIR" | "FAIR" | "GOOD" | "EXCELLENT";
        /** @description Наименование теста */
        name: string;
        /** @description Результат прохождения теста в баллах (от 0 до 100) */
        score: number;
        tasks: components["schemas"]["SkillVerificationsTestResultTasks"][];
      };
    };
    /** Вопросы теста */
    SkillVerificationsTestResultTasks: {
      /** @description Варианты ответов на закрытые вопросы */
      closed_answers: {
        /** @description Является ли вариант ответа правильным */
        correct?: boolean;
        /** @description Выбран ли вариант ответа */
        selected?: boolean;
        /** @description Вариант ответа на вопрос */
        value?: string;
      }[];
      /** @description Вариант ответа на открытый вопрос */
      opened_answer?: components["schemas"]["SkillVerificationsOpenedAnswer"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Текст вопроса */
      question: string;
    };
    /** Ответ на открытый вопрос */
    SkillVerificationsOpenedAnswer: {
      /**
       * @description Дифференцированная оценка за ответ от работодателя:
       * * `UNFAIR` — 0 баллов;
       * * `FAIR` — 30 баллов;
       * * `GOOD` — 60 баллов;
       * * `EXCELLENT` — 100 баллов
       *
       * @enum {string}
       */
      mark: "UNFAIR" | "FAIR" | "GOOD" | "EXCELLENT";
      /** @description Ответ на вопрос */
      value: string;
    };
    /**
     * Null-объект
     * @description Объект, значение которого null
     * @enum {string|null}
     */
    _IncludesNullableObject: null;
    /** Регион */
    DictionariesAreaItem: {
      /** @description Дочерние регионы */
      areas: components["schemas"]["DictionariesAreaItem"][];
      /** @description Идентификатор региона */
      id: string;
      /** @description Название региона */
      name: string;
      /**
       * @description Применимо только для русской локализации.
       *
       * Название региона в предложном падеже с предлогом "в", например: "в Москве". Возвращается, если в запросе передан параметр `additional_case=prepositional`
       */
      name_prepositional?: string | null;
      /** @description Идентификатор родительского региона */
      parent_id?: string | null;
    };
    /**
     * Подсказки по должностям вакансий
     * @description Подсказки по должностям вакансий
     */
    SuggestsVacancyPositions: {
      /**
       * Массив найденных должностей вакансий
       * @description Информация о найденных должностях вакансий
       */
      items: components["schemas"]["SuggestsVacancyPositionItem"][];
    };
    /** Информация о найденных должностях */
    SuggestsVacancyPositionItem: {
      /**
       * @description Идентификатор должности
       * @example 2063
       */
      id: string;
      /**
       * Массив профессиональных ролей, соответствующих должности
       * @description Информация о профессиональных ролях, соответствующих должности
       */
      professional_roles: components["schemas"]["SuggestsProfessionalRoleItemWithName"][];
      /**
       * @description Название должности
       * @example Личный водитель
       */
      text: string;
    };
    /** Информация о найденных проф. ролях с именем */
    SuggestsProfessionalRoleItemWithName: {
      /**
       * @description Профессиональная роль, для которой можно принимать отклики неполным резюме
       * @example true
       */
      accept_incomplete_resumes: boolean;
      /**
       * @description Идентификатор профессиональной роли
       * @example 21
       */
      id: string;
      /**
       * @description Название профессиональной роли
       * @example Водитель
       */
      name: string;
    };
    /** Успешный ответ */
    EmployersEmployersList: {
      /** @description Найдено результатов */
      found: number;
      /** @description Найденные работодатели */
      items: components["schemas"]["EmployersEmployerItem"][];
      /** @description Номер страницы */
      page: number;
      /** @description Всего страниц */
      pages: number;
      /** @description Результатов на странице */
      per_page: number;
    };
    /** Работодатель */
    EmployersEmployerItem: components["schemas"]["EmployersEmployerItemShort"] & {
      /** @description Количество открытых вакансий у работодателя */
      open_vacancies: number;
    };
    /** Работодатель */
    EmployersEmployerItemShort: {
      /** @description Ссылка на описание работодателя на сайте */
      alternate_url: string;
      /** @description Идентификатор работодателя */
      id: string;
      /** @description Ссылки на изображения логотипов работодателя разных размеров. `original` — это необработанный логотип, который может быть большого размера. Если изначально загруженный компанией логотип меньше, чем 240px и/или 90px по меньшей стороне, то в соответствующих ключах будут ссылки на изображения оригинального размера. Объект может быть `null`, если компания не загрузила логотип. Клиент должен предусмотреть возможность отсутствия логотипа по указанной ссылке (ответ с кодом `404 Not Found`). Логотипы 90 и 240 присутствуют не во всех компаниях */
      logo_urls?: components["schemas"]["_IncludesLogoUrls"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Название работодателя */
      name: string;
      /** @description URL для получения полного описания работодателя */
      url: string;
      /** @description URL для получения поисковой выдачи с вакансиями данного работодателя */
      vacancies_url: string;
    };
    /** Ссылка на логотип */
    _IncludesLogoUrls: {
      /** @description URL логотипа с размером менее 90px по меньшей стороне */
      90?: string;
      /** @description URL логотипа с размером менее 240px по меньшей стороне */
      240?: string;
      /** @description URL необработанного логотипа */
      original: string;
    };
    /**
     * Ошибки при публикации резюме
     * @description Информация о возникших ошибках
     */
    ErrorsBadRequestPublishResumeErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /**
       * @description Описание причины ошибки. Возможные причины:
       *
       * * Не заполнены обязательные поля.
       *
       *   Чтобы понять, какие именно поля не заполнены, воспользуйтесь методом [просмотр резюме](#tag/Rezyume.-Prosmotr-informacii/operation/get-resume). Обязательные поля перечислены в поле `progress.mandatory`).
       *
       * * Не отредактированы поля после блокировки модератором.
       * * Резюме находится на проверке у модератора
       */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsBadRequestPublishResumeError"][];
    };
    /** Ошибка при публикации резюме */
    ErrorsBadRequestPublishResumeError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example bad_request
       * @enum {string}
       */
      type: "bad_request";
    };
    /** Перечень услуг */
    EmployerServicesEmployerServices: {
      /** Перечень услуг */
      items: components["schemas"]["EmployerServicesEmployerServiceItem"][];
    };
    /** Услуга */
    EmployerServicesEmployerServiceItem: {
      /** @description Время активации услуги (в формате [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) с точностью до секунды: `YYYY-MM-DDThh:mm:ss±hhmm` */
      activated_at: string;
      /** @description Значения баланса. Только для пакетных услуг */
      balance?: components["schemas"]["EmployerServicesBalance"];
      /** @description Время истечения услуги (в формате [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) с точностью до секунды: `YYYY-MM-DDThh:mm:ss±hhmm` */
      expires_at: string;
      /** @description Идентификатор услуги */
      id: string;
      /** @description Тип услуги */
      service_type: components["schemas"]["EmployerServicesServiceType"];
    };
    /** Баланс услуг */
    EmployerServicesBalance: {
      /** @description Текущее значение баланса */
      actual: number;
      /** @description Значение баланса на момент активации услуги */
      initial: number;
    };
    /** Тип услуги */
    EmployerServicesServiceType: {
      /** @description Идентификатор типа услуги */
      id: string;
      /** @description Локализованное название типа услуги */
      name: string;
    };
    /** Список доступных локалей */
    LocalesResumeLocales: components["schemas"]["LocalesResumeLocaleItem"][];
    /** Локализация */
    LocalesResumeLocaleItem: {
      /** @description Идентификатор локали */
      id: string;
      /** @description Имя локали */
      name: string;
    };
    /** Успешный ответ */
    EmployerManagersResponse: {
      /** Найдено результатов */
      found: number;
      /** Список менеджеров работодателя */
      items: components["schemas"]["EmployerManagersEmployerManagerItem"][];
      /** Номер страницы */
      page: number;
      /** Всего страниц */
      pages: number;
      /** Результатов на странице */
      per_page: number;
    };
    /** Менеджер */
    EmployerManagersEmployerManagerItem: {
      /** @description Дополнительный телефон менеджера */
      additional_phone?: components["schemas"]["EmployerManagersPhone"] | null;
      area: components["schemas"]["EmployerManagersArea"];
      /** @description Адрес электронной почты менеджера */
      email: string;
      /** @description Имя менеджера */
      first_name?: string;
      /** @description Полное имя менеджера */
      full_name?: string;
      /** @description Идентификатор менеджера */
      id: string;
      /** @description Является ли менеджер основным контактным лицом */
      is_main_contact_person?: boolean;
      /** @description Фамилия менеджера */
      last_name?: string;
      /** @description Отчество менеджера */
      middle_name?: string | null;
      /**
       * @deprecated
       * @description Полное имя менеджера
       */
      name?: string;
      /** @description Основной телефон менеджера */
      phone?: components["schemas"]["EmployerManagersPhone"] & Record<string, never>;
      /** @description Должность менеджера */
      position: string;
      /** @description Количество опубликованных (активных) вакансий у данного менеджера. `null` — если у пользователя нет прав на просмотр вакансий этого менеджера */
      vacancies_count?: number | null;
    };
    /** Телефон */
    EmployerManagersPhone: {
      /** @description Код города */
      city: string;
      /** @description Комментарий */
      comment?: string | null;
      /** @description Код страны */
      country: string;
      /** @description Номер телефона отформатированный */
      formatted?: string;
      /** @description Номер */
      number: string;
    };
    /** Регион */
    EmployerManagersArea: {
      /** @description Идентификатор региона из [справочника](#tag/Obshie-spravochniki/operation/get-areas) */
      id: string;
      /** @description Название региона */
      name: string;
      /** @description Ссылка на информацию о регионе */
      url: string;
    };
    /** Статистика откликов для работодателя */
    NegotiationsNegotiationsStatisticsEmployerResponse: {
      employer_statistics: components["schemas"]["NegotiationsNegotiationsStatistics"];
    };
    /** Статистика по откликам */
    NegotiationsNegotiationsStatistics: {
      /** @description Среднее время (в днях) между получением отклика и отправкой сообщения */
      average_reply_time?: number | null;
      /** @description Индекс вежливости */
      politeness?: components["schemas"]["NegotiationsObjectsPoliteness"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Количество откликов на вакансии, полученных за период (последние 30 дней) */
      received: number;
      /** @description Процент откликов на вакансии, перемещенных в любую другую [коллекцию](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md#term-collection) с отправкой сообщения, за период */
      replied_percent?: number | null;
      /** @description Процент прочитанных откликов за период */
      viewed_percent?: number | null;
    };
    /** Информация по индексу вежливости */
    NegotiationsObjectsPoliteness: {
      /** @description URL на статью HH про индекс вежливости */
      article_url: string;
      /** @description Описание понятия индекса вежливости */
      description: string;
      /** @description Описание текущего значения индекса вежливости */
      hint: string;
      /** @description Значение индекса вежливости */
      index: number;
      /**
       * @deprecated
       * @description Изменение индекса вежливости за последние 24 часа
       */
      index_change: number;
    };
    /**
     * Oшибки
     * @description Информация о возникших ошибках
     */
    ErrorsVacancyErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsVacancyError"][];
    };
    /** Ошибка */
    ErrorsVacancyError: {
      /** @description Количество найденных дублей вакансии */
      found?: number;
      /** @description Массив идентификаторов вакансий-дублей */
      items?: {
        /**
         * @description Идентификатор вакансии
         * @example 78789890
         */
        id: number;
      }[];
      /**
       * @description Причина ошибки
       * @example is_empty
       */
      reason?: string;
      /**
       * @description Тип ошибки
       * @example bad_json_data
       */
      type: string;
      /**
       * @description Наименование поля с ошибкой
       * @example specializations
       */
      value: string;
    };
    /** Ошибки */
    ErrorsVacancyProlongateForbidden: components["schemas"]["ErrorsCommonBadAuthorizationErrors"] | components["schemas"]["ErrorsVacancyProlongateErrors"];
    /**
     * Общие ошибки авторизации
     * @description Информация о возникших ошибках
     */
    ErrorsCommonBadAuthorizationErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & ({
      /**
       * @description Описание ошибки
       * @example Forbidden
       */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsCommonBadAuthorizationCommonAndEmployerError"][];
      /**
       * @description Ошибки авторизации:
       *   * `token-revoked` — Токен отозван пользователем, приложению необходимо [запросить новую авторизацию](#tag/Avtorizaciya-rabotodatelya/operation/authorize)
       *   * `token-expired` — Время жизни `access_token` завершилось, необходимо [получить `refresh_token`](#tag/Avtorizaciya-rabotodatelya/operation/authorize)
       *
       * @example token-revoked
       * @enum {string}
       */
      oauth_error?: "token-revoked" | "token-expired";
    });
    /** Обычная ошибка и ошибка авторизации работодателя */
    ErrorsCommonBadAuthorizationCommonAndEmployerError: components["schemas"]["ErrorsCommonBadAuthorizationError"] | components["schemas"]["ErrorsCommonBadAuthorizationEmployerError"] | components["schemas"]["ErrorsCommonCaptchaError"];
    /** Общая ошибка авторизации */
    ErrorsCommonBadAuthorizationError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example oauth
       * @enum {string}
       */
      type: "forbidden" | "oauth";
      /**
       * @description Общие ошибки:
       *   * `bad_authorization` — Токен авторизации не существует или не валидный
       *   * `token_expired` — Время жизни access_token завершилось, необходимо [выполнить обновление access_token](#section/Avtorizaciya/Obnovlenie-pary-access-i-refresh-tokenov)
       *   * `token_revoked` — Токен отозван пользователем, приложению необходимо [запросить новую авторизацию](#section/Tipy-avtorizacij)
       *   * `application_not_found` — Ваше приложение было удалено
       *   * `user_auth_expected` — Передана авторизация приложения, метод требует [авторизации пользователя](#get-auth)
       *   * `application_auth_expected` — Передана авторизация пользователя, метод требует [авторизации приложения](#get-client-auth)
       *   * `used_manager_account_forbidden` — [Рабочий аккаунт заблокирован](https://github.com/hhru/api/blob/master/docs/errors.md#manager-accounts-blocked)
       *   * `manager_extra_account_not_found` — В заголовке передан некорректный id аккаунта
       *   * `user_auth_expected` — Передана авторизация приложения, метод требует [авторизации пользователя](#section/Avtorizaciya/Avtorizaciya-polzovatelya)
       *   * `application_auth_expected` — Передана авторизация пользователя, метод требует [авторизации приложения](##section/Avtorizaciya/Avtorizaciya-prilozheniya)
       *
       * @example bad_authorization
       * @enum {string}
       */
      value?: "bad_authorization" | "token_expired" | "token_revoked" | "application_not_found" | "user_auth_expected" | "application_auth_expected";
    };
    /** Необходимо пройти CAPTCHA */
    ErrorsCommonCaptchaError: {
      /**
       * @description Адрес веб-страницы, на которой можно пройти капчу.
       * После прохождения капчи аналогичный запрос в API должен выполниться успешно.
       * Приложение должно добавить в captcha_url обязательный параметр backurl,на который произойдет редирект
       *  после прохождения капчи.
       * Backurl должен обязательно содержать схему, например, https:// или схему приложения
       *
       * @example https://hh.ru/account/captcha?state=...
       */
      captcha_url?: string;
      /**
       * @description Адрес веб-страницы, на котором можно капчу. Аналогично параметру captcha_url
       * @example https://hh.ru/auth/employer?captcha=true&backurl=...
       */
      fallback_url?: string;
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example captcha_required
       * @enum {string}
       */
      type: "captcha_required" | "employer_registration_change_email" | "employer_resume_view";
      /**
       * @description Необходимо пройти капчу - `captcha_required`
       *
       * @example captcha_required
       * @enum {string}
       */
      value: "captcha_required";
    };
    /** Ошибка авторизации работодателя */
    ErrorsCommonBadAuthorizationEmployerError: {
      /**
       * @description Список доступных для токена аккаунтов менеджера в случае, если используемый рабочий аккаунт заблокирован.
       * Актуально только в случае авторизации работодателя
       */
      allowed_accounts?: components["schemas"]["ManagerAccount"][];
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example oauth
       * @enum {string}
       */
      type: "forbidden" | "oauth" | "manager_extra_accounts" | "manager_accounts";
      /**
       * @description Общие ошибки:
       *   * `bad_authorization` — Токен авторизации не существует или не валидный
       *   * `token_expired` — Время жизни access_token завершилось, необходимо [выполнить обновление access_token](#refresh_token)
       *   * `token_revoked` — Токен отозван пользователем, приложению необходимо [запросить новую авторизацию](#section/Tipy-avtorizacij)
       *   * `application_not_found` — Ваше приложение было удалено
       *   * `used_manager_account_forbidden` — [Рабочий аккаунт заблокирован](https://github.com/hhru/api/blob/master/docs/errors.md#manager-accounts-blocked)
       *   * `manager_extra_account_not_found` — В заголовке передан некорректный id аккаунта
       *   * `user_auth_expected` — Передана авторизация приложения, метод требует [авторизации пользователя](#get-auth)
       *   * `application_auth_expected` — Передана авторизация пользователя, метод требует [авторизации приложения](#get-client-auth)
       *
       * @example bad_authorization
       * @enum {string}
       */
      value?: "bad_authorization" | "token_expired" | "token_revoked" | "application_not_found" | "manager_extra_account_not_found" | "used_manager_account_forbidden" | "user_auth_expected" | "application_auth_expected";
    };
    /**
     * Рабочий аккаунт менеджера
     * @description Информация о рабочем аккаунте менеджера
     */
    ManagerAccount: {
      employer: components["schemas"]["ManagerAccountCompany"];
      /**
       * @description Идентификатор рабочего аккаунта менеджера
       * @example 12345678
       */
      id: string;
    };
    /**
     * Компания
     * @description Информация о компании, к которой прикреплен рабочий аккаунт менеджера
     */
    ManagerAccountCompany: {
      /**
       * @description Идентификатор компании
       * @example 1455
       */
      id: string;
      /**
       * @description Название компании
       * @example HeadHunter
       */
      name: string;
    };
    /**
     * Oшибки при продлении вакансии
     * @description Информация о возникших ошибках
     */
    ErrorsVacancyProlongateErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsVacancyProlongateError"][];
    };
    /** Ошибка */
    ErrorsVacancyProlongateError: {
      /**
       * @description Тип ошибки
       * @example vacancies
       * @enum {string}
       */
      type: "vacancies";
      /**
       * @description Причина ошибки:
       *
       * * `not_enough_purchased_services` — купленных услуг недостаточно для продления данного типа вакансии.
       * * `quota_exceeded` — квота менеджера на публикацию данного типа вакансии закончилась.
       * * `prolongation_forbidden` — продление вакансий недоступно текущему менеджеру.
       * * `unavailable_for_archived` — продление недоступно для архивной вакансии.
       * * `too_early` — продление раньше времени
       *
       * @example quota_exceeded
       * @enum {string}
       */
      value: "not_enough_purchased_services" | "quota_exceeded" | "prolongation_forbidden" | "unavailable_for_archived" | "too_early";
    };
    /**
     * Ошибки действий с резюме
     * @description Информация о возникших ошибках
     */
    ErrorsResumeTooManyRequestsErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsResumeTooManyRequestsError"][];
    };
    /** Ошибка */
    ErrorsResumeTooManyRequestsError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example resumes
       * @enum {string}
       */
      type: "resumes";
      /**
       * @description Значение ошибки
       * @example touch_limit_exceeded
       * @enum {string}
       */
      value: "touch_limit_exceeded";
    };
    /** Информация о телефоне */
    ResumeShouldSendSmsContainer: {
      /** @description Информация о телефоне */
      phone: components["schemas"]["ResumeShouldSendSmsPhone"];
    };
    /**
     * Информация о телефоне соискателя
     * @description Информация о телефоне соискателя
     */
    ResumeShouldSendSmsPhone: {
      /**
       * @description Префикс города номера телефона
       * @example 929
       */
      city: string;
      /**
       * @description Префикс страны номера телефона
       * @example 7
       */
      country: string;
      /**
       * @description Номер телефона отформатированный
       * @example +7 (929) 667-21-67
       */
      formatted: string;
      /**
       * @description Нужно ли верифицировать номер телефона
       * @example false
       */
      need_verification: boolean;
      /**
       * @description Номер телефона без префиксов
       * @example 6672167
       */
      number: string;
      /**
       * @description Находится ли номер телефона в черном списке по отправке смс
       * @example false
       */
      restricted_country: boolean;
      /**
       * @description Верифицирован ли номер телефона пользователем
       * @example true
       */
      verified: boolean;
    };
    /** Список шаблонов откликов/приглашений */
    NegotiationsNegotiationMessageTemplates: {
      /** @description Список шаблонов сообщений */
      mail: components["schemas"]["NegotiationsNegotiationMessageTemplate"];
      /** @description Список шаблонов сообщений */
      sms?: components["schemas"]["NegotiationsNegotiationMessageTemplate"];
    };
    /** Шаблон ответа соискателю */
    NegotiationsNegotiationMessageTemplate: {
      /** @description Работодательский статус, соответствующий данному шаблону; может отсутствовать если шаблон не связан с каким-либо статусом */
      employer_state?: string;
      /** @description Был ли изменен шаблон работодателем или же используется стандартный шаблон с текстом от Хэдхантер */
      template_modified: boolean;
      /** @description Текст шаблона */
      text: string;
    };
    /**
     * Плохая авторизация
     * @description Информация о возникших ошибках
     */
    ErrorsEmployerManagerBadAuthorizationErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /**
       * @description Описание ошибки
       * @example Forbidden
       */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsEmployerManagerBadAuthorizationError"][];
    };
    /** Ошибка */
    ErrorsEmployerManagerBadAuthorizationError: {
      /**
       * @description Список доступных для токена аккаунтов менеджера в случае, если используемый рабочий аккаунт заблокирован.
       * Актуально только в случае авторизации работодателя
       */
      allowed_accounts?: components["schemas"]["ManagerAccount"][];
      /**
       * @description Ошибки при создании или редактировании менеджера работодателя:
       *   * `already_exist` — Менеджер с такой почтой уже существует
       *   * `creation_limit_exceeded` — Достигнут лимит на создание менеджеров
       *   * `not_editable` — Поле *field_name* недоступно для редактирования
       *
       * @example already_exist
       * @enum {string}
       */
      reason?: "already_exist" | "creation_limit_exceeded" | "not_editable";
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example oauth
       * @enum {string}
       */
      type: "forbidden" | "oauth" | "manager_extra_accounts" | "manager_accounts" | "managers";
      /**
       * @description Общие ошибки:
       *   * `bad_authorization` — Токен авторизации не существует или не валидный
       *   * `token_expired` — Время жизни access_token завершилось, необходимо [выполнить обновление access_token](#section/Avtorizaciya/Obnovlenie-pary-access-i-refresh-tokenov)
       *   * `token_revoked` — Токен отозван пользователем, приложению необходимо [запросить новую авторизацию](#section/Tipy-avtorizacij)
       *   * `application_not_found` — Ваше приложение было удалено
       *   * `used_manager_account_forbidden` — [Рабочий аккаунт заблокирован](https://github.com/hhru/api/blob/master/docs/errors.md#manager-accounts-blocked)
       *   * `manager_extra_account_not_found` — В заголовке передан некорректный id аккаунта
       *   * `email` — Менеджер с такой почтой уже существует
       *   * `user_auth_expected` — Ожидается авторизация пользователя, передана авторизация приложения
       *
       * @example bad_authorization
       * @enum {string}
       */
      value?: "bad_authorization" | "token_expired" | "token_revoked" | "application_not_found" | "manager_extra_account_not_found" | "used_manager_account_forbidden" | "email" | "user_auth_expected";
    };
    /** Список факультетов */
    DictionariesFacultiesResponse: components["schemas"]["_IncludesIdName"][];
    /** Объект с идентификатором и названием */
    _IncludesIdName: components["schemas"]["_IncludesId"] & {
      /** @description Название */
      name: string;
    };
    /** Объект с идентификатором */
    _IncludesId: {
      /** @description Идентификатор */
      id: string;
    };
    /** Сообщение о событии на уровне менеджера */
    WebhookSendObjectBaseUser: {
      /** @description Тип экшена */
      action_type: string;
      /** @description Идентификатор сообщения */
      id: string;
      payload: components["schemas"]["WebhookPayloadNewNegotiationVacancy"] | components["schemas"]["WebhookPayloadNewResponseOrInvitationVacancy"] | components["schemas"]["WebhookPayloadVacancyArchivation"] | components["schemas"]["WebhookPayloadVacancyPublicationForVacancyManager"] | components["schemas"]["WebhookPayloadVacancyProlongation"] | components["schemas"]["WebhookPayloadVacancyChange"] | components["schemas"]["WebhookPayloadNegotiationEmployerStateChange"];
      /** @description Идентификатор подписки */
      subscription_id: string;
      /** @description Идентификатор пользователя */
      user_id: string;
    };
    /**
     * NEW_RESPONSE_OR_INVITATION_VACANCY
     * @description Новый отклик или приглашение на вакансии (в отличие от NEW_NEGOTIATION_VACANCY, данное событие будет вызываться как на отклик со стороны соискателя, так и на приглашение со стороны работодателя)
     */
    WebhookPayloadNewResponseOrInvitationVacancy: {
      /** @description Идентификатор работодателя */
      employer_id: string;
      /** @description Дата отклика или приглашения в формате [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) с точностью до секунды: `YYYY-MM-DDThh:mm:ss±hhmm` */
      response_date: string;
      /** @description Идентификатор резюме */
      resume_id: string | null;
      /** @description Идентификатор топика */
      topic_id: string;
      /** @description Идентификатор вакансии */
      vacancy_id: string | null;
    };
    /**
     * NEW_NEGOTIATION_VACANCY
     * @description Новый отклик на вакансию
     */
    WebhookPayloadNewNegotiationVacancy: {
      /** @description Идентификатор работодателя */
      employer_id: string;
      /** @description Дата отклика в формате [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) с точностью до секунды: `YYYY-MM-DDThh:mm:ss±hhmm` */
      negotiation_date: unknown;
      /** @description Идентификатор резюме */
      resume_id: string | null;
      /** @description Идентификатор топика */
      topic_id: string;
      /** @description Идентификатор вакансии */
      vacancy_id: string | null;
    };
    /**
     * NEGOTIATION_EMPLOYER_STATE_CHANGE
     * @description Изменение этапа, на котором находится кандидат на вакансии. Содержит информацию о том кто, какое резюме с какого на какой
     * статус перевел
     */
    WebhookPayloadNegotiationEmployerStateChange: {
      /** @description Идентификатор менеджера, совершившего перевод */
      employer_manager_id: string;
      /** @description С какого статуса перевели */
      from_state: string;
      /** @description Идентификатор резюме */
      resume_id: string;
      /** @description На какой статус перевели */
      to_state: string;
      /** @description Идентификатор топика */
      topic_id: string;
      /** @description Время перевода на новый этап */
      transferred_at: string;
      /** @description Идентификатор вакансии */
      vacancy_id: string;
    };
    /** VACANCY_PUBLICATION_FOR_VACANCY_MANAGER */
    WebhookPayloadVacancyPublicationForVacancyManager: {
      /** @description Дата создания вакансии в формате [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) с точностью до секунды: `YYYY-MM-DDThh:mm:ss±hhmm */
      creation_date: string;
      /** @description Идентификатор модератора вакансии */
      employer_manager_id: string;
      /** @description Идентификатор вакансии */
      vacancy_id: string;
    };
    /**
     * VACANCY_ARCHIVATION
     * @description Архивация вакансии
     */
    WebhookPayloadVacancyArchivation: {
      /** @description Дата архивации вакансии в формате [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) с точностью до секунды: `YYYY-MM-DDThh:mm:ss±hhmm` */
      archivation_date: string;
      /** @description Идентификатор вакансии */
      vacancy_id: string | null;
    };
    /**
     * VACANCY_PROLONGATION
     * @description Продление вакансии
     */
    WebhookPayloadVacancyProlongation: {
      /** @description Дата продления вакансии в формате [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) с точностью до секунды: `YYYY-MM-DDThh:mm:ss±hhmm` */
      prolongation_date: string;
      /** @description Идентификатор вакансии */
      vacancy_id: string;
    };
    /**
     * VACANCY_CHANGE
     * @description Изменение вакансии
     */
    WebhookPayloadVacancyChange: {
      /** @description Дата изменения вакансии в формате [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) с точностью до секунды: `YYYY-MM-DDThh:mm:ss±hhmm` */
      change_date: string;
      /** @description Идентификатор вакансии */
      vacancy_id: string;
    };
    /** Ошибка параметров запроса */
    ErrorsCommonBadAuthorizationBadParameters: components["schemas"]["ErrorsCommonBadAuthorizationInvalidRequestError"] | components["schemas"]["ErrorsCommonBadAuthorizationInvalidClientError"] | components["schemas"]["ErrorsCommonBadAuthorizationInvalidGrantError"] | components["schemas"]["ErrorsCommonBadAuthorizationUnsupportedGrantTypeError"];
    /** Invalid_client */
    ErrorsCommonBadAuthorizationInvalidClientError: {
      /**
       * @description Идентификатор типа ошибки, используются значения, описанные в [документе RFC 6749](http://tools.ietf.org/html/rfc6749#section-5.2)
       *
       * @example invalid_client
       * @enum {string}
       */
      error: "invalid_client";
      /**
       * @description Дополнительное описание ошибки
       * * `client_id or client_secret not found` Ошибка может возникнуть в случае, если данный `client_id` не найден или был удален, передан неправильный `client_secret`
       *
       * @example client_id or client_secret not found
       * @enum {string}
       */
      error_description: "client_id or client_secret not found";
    };
    /** Invalid_grant */
    ErrorsCommonBadAuthorizationInvalidGrantError: {
      /**
       * @description Идентификатор типа ошибки, используются значения, описанные в [документе RFC 6749](http://tools.ietf.org/html/rfc6749#section-5.2)
       *
       * @example invalid_grant
       * @enum {string}
       */
      error: "invalid_grant";
      /**
       * @description Дополнительное описание ошибки
       * * `token has already been refreshed` Ошибка возникает при попытке воспользоваться refresh-токеном второй раз
       * * `token not expired` Ошибка возникает при попытке обновить действующий access-токен. access-токен можно обновлять только после того, как он истек
       * * `token was revoked` Токен был отозван. Например, токен отзывается, если время действия пароля истекло
       * * `bad token ` Передано неправильное значение токена
       * * `code has already been used` `authorization_code` уже был использован (его можно использовать только один раз)
       * * `code expired` `authorization_code` истек
       * * `code was revoke` `authorization_code` был отозван (это происходит, если время действия пароля истекло)
       * * `token deactivated ` Токен был деактивирован. Токен деактивируется после того, как пользователь сменил пароль
       *
       * @example token not expired
       * @enum {string}
       */
      error_description: "token has already been refreshed" | "token not expired" | "token was revoked" | "bad token" | "code has already been used" | "code expired" | "code was revoke" | "token deactivated";
    };
    /** Unsupported_grant_type */
    ErrorsCommonBadAuthorizationUnsupportedGrantTypeError: {
      /**
       * @description Идентификатор типа ошибки, используются значения, описанные в [документе RFC 6749](http://tools.ietf.org/html/rfc6749#section-5.2)
       *
       * @example unsupported_grant_type
       * @enum {string}
       */
      error: "unsupported_grant_type";
      /**
       * @description Дополнительное описание ошибки
       * * `unsupported grant_type` Возникает, если передать неправильное значение в поле `grant_type`
       *
       * @example unsupported grant_type
       * @enum {string}
       */
      error_description: "unsupported grant_type";
    };
    /** Invalid_request */
    ErrorsCommonBadAuthorizationInvalidRequestError: {
      /**
       * @description Идентификатор типа ошибки, используются значения, описанные в [документе RFC 6749](http://tools.ietf.org/html/rfc6749#section-5.2)
       *
       * @example invalid_request
       * @enum {string}
       */
      error: "invalid_request";
      /**
       * @description Дополнительное описание ошибки
       * * `account not found` Ошибка может возникнуть, если передана неправильная пара `client_id` и `client_secret`
       * * `account is locked` Пользовательский аккаунт заблокирован. Пользователь должен обратиться в службу поддержки сайта
       * * `password invalidated` Пароль от пользовательского аккаунта устарел. Пользователь должен восстановить пароль на сайте `https://hh.ru`
       * * `login not verified` Пользовательский аккаунт не подтвержден. Пользователь должен обратиться в службу поддержки сайта
       * * `bad redirect url` передан неправильный `redirect_url`
       * * `token is empty` Не передан `refresh_token`
       * * `token not found` передан не правильный `refresh_token`
       * * `code not found ` переданный `authorization_code` не найден
       *
       * @example account not found
       * @enum {string}
       */
      error_description: "account not found" | "account is locked" | "password invalidated" | "login not verified" | "bad redirect url" | "token is empty" | "token not found" | "code not found";
    };
    /** Параметры для получения нового токена приложения */
    AuthClientCredentials: {
      /**
       * @description Идентификатор, полученный при [создании приложения](https://dev.hh.ru/admin)
       * @example ETVQdMs2n9VKw7SMXkh9nX5H
       */
      client_id: string;
      /**
       * @description Защищенный ключ, полученный при [создании приложения](https://dev.hh.ru/admin)
       * @example 95dNjB8FmtxQsmygm6dtEy53
       */
      client_secret: string;
      /**
       * @description Cпособ запроса токена
       * @example client_credentials
       * @enum {string}
       */
      grant_type: "client_credentials";
    };
    /** Условия загрузки артефакта */
    ArtifactsArtifactConditions: {
      /** @description Счетчик артефактов данного типа */
      counters: components["schemas"]["ArtifactsCounters"] & Record<string, never>;
      /** @description Условия для полей артефакта */
      fields: components["schemas"]["ArtifactsFields"] & Record<string, never>;
    };
    /** Условия для полей артефакта */
    ArtifactsFields: {
      /** @description Условия для поля `description` */
      description: components["schemas"]["ArtifactsDescription"] & Record<string, never>;
      /** @description Условия для поля `file` */
      file: components["schemas"]["ArtifactsFile"] & Record<string, never>;
      /** @description Условия для поля `type` */
      type: components["schemas"]["ArtifactsType"] & Record<string, never>;
    };
    /** Условия для поля `description` */
    ArtifactsDescription: {
      /** @description Максимальный размер текстового поля `description` */
      max_length: number;
      /** @description Минимальный размер текстового поля `description` */
      min_length: number;
      /** @description Является ли поле `description` обязательным */
      required: boolean;
    };
    /** Условия для поля `type` */
    ArtifactsType: {
      /** @description Является ли поле `type` обязательным */
      required: boolean;
    };
    /** Условия для поля `file` */
    ArtifactsFile: {
      /** @description Максимальный размер файла */
      max_size: number;
      /** @description Список допустимых [MIME-типов](https://www.iana.org/assignments/media-types/media-types.xhtml) файлов */
      mime_type: string[];
      /** @description Является ли поле `file` обязательным */
      required: boolean;
    };
    /** Счетчик артефактов данного типа */
    ArtifactsCounters: {
      /** @description Максимально возможное количество артефактов данного типа, которое можно загрузить */
      max: number;
      /** @description Количество уже загруженных артефактов данного типа */
      uploaded: number;
    };
    /** Успешный ответ */
    EmployerDictionariesTestsResponse: {
      /** Список тестов */
      items: components["schemas"]["EmployerDictionariesTestItem"][];
    };
    /** Тест */
    EmployerDictionariesTestItem: {
      /** @description Идентификатор теста */
      id: string;
      /** @description Название теста */
      name: string;
    };
    /** Работодатель */
    EmployersEmployerInfo: {
      /** @description Флаг, показывающий, прошел ли работодатель [IT аккредитацию](https://feedback.hh.ru/knowledge-base/article/что-означает-значок-«аккредитована-как-ит-компания») */
      accredited_it_employer?: boolean;
      /** @description Ссылка на описание работодателя на сайте */
      alternate_url: string;
      applicant_services?: components["schemas"]["_IncludesEmployerApplicantServices"];
      /** @description Информация о регионе работодателя */
      area: components["schemas"]["_IncludesArea"] & Record<string, never>;
      /**
       * @deprecated
       * @description Строка с кодом HTML (возможно наличие `<script/>` и `<style/>`), которая является альтернативой стандартному описанию работодателя. HTML адаптирован для мобильных устройств и корректно отображается без поддержки Javascript.
       *
       * При этом:
       *
       * - Контент тянется по ширине на 100% ширины контейнера и умещается без прокрутки в 300px.
       * - Контент рассчитан на то, что он будет вставлен в обвязку, в которую входит название, логотип, сайт и ссылка на вакансии работодателя.
       * - Изображения, которые могут встретиться в таком описании, адаптированы под retina-дисплеи.
       * - Размер шрифта не меньше 12px, размер межстрочного интервала не меньше 16px.
       *
       * Значение может быть `null`, если у работодателя отсутствует индивидуальное описание
       */
      branded_description?: string | null;
      /** @description Значение может быть `null`, если у работодателя отсутствует брендирование страницы */
      branding?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["EmployersBrandingEmployerBranding"] | null;
      /** @description Описание работодателя в виде строки с кодом HTML (без `<script/>` и `<style/>`) */
      description?: string | null;
      /** @description Идентификатор работодателя */
      id: string;
      /** @description Список отраслей работодателя. Элементы [справочника индустрий](https://api.hh.ru/openapi/redoc#tag/Obshie-spravochniki/operation/get-industries) */
      industries: components["schemas"]["_IncludesIdName"][];
      /** @description Список интервью */
      insider_interviews: components["schemas"]["EmployersInsiderInterviews"][];
      /** @description Ссылки на изображения логотипов работодателя разных размеров. `original` — это необработанный логотип, который может быть большого размера. Если изначально загруженный компанией логотип меньше, чем 240px и/или 90px по меньшей стороне, то в соответствующих ключах будут ссылки на изображения оригинального размера. Объект может быть `null`, если компания не загрузила логотип. Клиент должен предусмотреть возможность отсутствия логотипа по указанной ссылке (ответ с кодом `404 Not Found`). Если информация о работодателе используется для описания вакансии, у которой есть брендированный логотип, все ссылки ведут на него. Логотипы 90 и 240 присутствуют не во всех компаниях */
      logo_urls?: components["schemas"]["_IncludesLogoUrls"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Название работодателя */
      name: string;
      /** @description Количество открытых вакансий у работодателя */
      open_vacancies?: number | null;
      /** @description Если работодатель добавлен в черный список, то вернется `['blacklisted']`, иначе `[]` */
      relations: ("blacklisted" | null)[];
      /** @description Адрес сайта работодателя */
      site_url: string;
      /** @description Флаг, показывающий, прошел ли работодатель [проверку на сайте](https://feedback.hh.ru/article/details/id/5951) */
      trusted: boolean;
      /** @description Тип работодателя (прямой работодатель, кадровое агентство и т.п.). Возможные значения описаны в [справочнике](#tag/Obshie-spravochniki/operation/get-dictionaries) в поле `employer_type`. Возвращает `null`, если тип работодателя скрыт */
      type?: string | null;
      /** @description URL для получения поисковой выдачи с вакансиями данного работодателя */
      vacancies_url: string;
    };
    /**
     * Услуги соискателя
     * @description Информация о подключенных услугах соискателя, относящихся к данному работодателю
     */
    _IncludesEmployerApplicantServices: {
      /** @description Услуга \"Хочу тут работать\" */
      target_employer?: {
        /** @description Количество резюме текущего соискателя, к которым подключена услуга \"Хочу тут работать\" */
        count?: number;
      };
    };
    /** Регион */
    _IncludesArea: {
      /** @description Идентификатор региона из [справочника](#tag/Obshie-spravochniki/operation/get-areas) */
      id: string;
      /** @description Название региона */
      name: string;
      /** @description Ссылка на информацию о регионе */
      url: string;
    };
    /** Интервью */
    EmployersInsiderInterviews: {
      /** @description Идентификатор интервью */
      id: string;
      /** @description Заголовок интервью */
      title: string;
      /** @description Адрес страницы, содержащей интервью */
      url: string;
    };
    /**
     * Параметры брендирования
     * @description Дополнительные параметры брендирования
     */
    EmployersBrandingEmployerBranding: ({
      /**
       * @description Тип брендирования
       *   * constructor - Брендирование типом конструктор
       *   * makeup      - Брендирование типом makeup (хамелеон)
       *
       * @enum {string}
       */
      type?: "makeup" | "constructor";
    }) & (components["schemas"]["_IncludesNullableObject"] | components["schemas"]["EmployersBrandingConstructor"] | components["schemas"]["EmployersBrandingMakeup"]);
    /** Полностью кастомный вид бренд страниц */
    EmployersBrandingMakeup: {
      makeup: {
        /** @description Ссылка на webview версию бренд страницы */
        url: string;
      };
      /**
       * @description Уникальный код активного бренд шаблона страницы в формате "makeup:\d+"
       * @example makeup:123
       */
      template_code: string;
      /** @description Идентификатор активной версии бренд шаблона страницы */
      template_version_id: string;
    };
    /** Бренд страница сделанная с помощью конструктора бренд страниц */
    EmployersBrandingConstructor: {
      constructor: {
        header_picture: components["schemas"]["EmployersBrandingConstructorHeaderPicture"] | components["schemas"]["_IncludesNullableObject"] | null;
        /** @description Ссылка на webview версию бренд страницы */
        url: string;
        /** @description Список виджетов на странице */
        widgets: components["schemas"]["EmployersBrandingConstructorGalleryWidget"][];
      };
    };
    /**
     * Изображение из шапки бренд страницы
     * @description Изображение из шапки бренд страницы
     */
    EmployersBrandingConstructorHeaderPicture: {
      /** @description Путь к изображению на cdn хранилище */
      resized_path: string;
    };
    /**
     * Виджет галереи
     * @description Виджет галереи
     */
    EmployersBrandingConstructorGalleryWidget: {
      /** @description Список изображений в галерее */
      items: {
        /** @description Идентификатор изображения */
        picture_id: number;
        /** @description Путь к изображению на cdn хранилище */
        resized_path: string;
      }[];
      /**
       * @description Для галереи это значение равно 'gallery'
       * @enum {string}
       */
      type: "gallery";
    };
    /**
     * Список ключевых навыков
     * @description Список ключевых навыков
     */
    DictionariesSkillsResponse: {
      /** @description Массив ключевых навыков */
      items: components["schemas"]["_IncludesSkillSetItem"][];
    };
    /** Ключевой навык */
    _IncludesSkillSetItem: {
      /** @description Идентификатор ключевого навыка */
      id: string;
      /** @description Название ключевого навыка */
      text: string;
    };
    /**
     * Не найдено
     * @description Информация о возникших ошибках
     */
    ErrorsVacancyBlacklistedNotFoundErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsVacancyBlacklistedNotFoundError"][];
    };
    /** Ошибка */
    ErrorsVacancyBlacklistedNotFoundError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example vacancies_blacklist
       * @enum {string}
       */
      type: "vacancies_blacklist";
      /**
       * @description Название поля с ошибкой. Возможные значения:
       * * `not_found` — вакансия для добавления в список не найдена
       *
       * @example not_found
       * @enum {string}
       */
      value: "not_found";
    };
    /**
     * Плохая авторизация
     * @description Информация о возникших ошибках
     */
    ErrorsCommonCaptchaErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /**
       * @description Описание ошибки
       * @example Forbidden
       */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsCommonCaptchaError"][];
    };
    /** Ошибки */
    ErrorsNegotiationHideResponseForbiddenErrors: components["schemas"]["ErrorsCommonBadAuthorizationErrors"] | components["schemas"]["ErrorsNegotiationHideResponseErrors"];
    /**
     * Oшибки при скрытии отклика
     * @description Информация о возникших ошибках
     */
    ErrorsNegotiationHideResponseErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsNegotiationHideResponseError"][];
    };
    /** Ошибка */
    ErrorsNegotiationHideResponseError: {
      /**
       * @description Тип ошибки
       * @example negotiations
       * @enum {string}
       */
      type: "negotiations";
      /**
       * @description Причина ошибки:
       * * `wrong_state` — действие по отклику/приглашению в данном статусе невозможно
       * * `no_invitation` — переписка недоступна, так как в отклике ещё не было приглашения
       * * `disabled_by_employer` — возможность переписки по отклику отключена работодателем
       * * `chat_is_not_ready` — чат отклика/приглашения еще не готов
       *
       * @example wrong_state
       * @enum {string}
       */
      value: "wrong_state" | "no_invitation" | "disabled_by_employer" | "chat_is_not_ready";
    };
    /** Загрузка изображения */
    ArtifactsArtifactUploadBody: {
      /** @description Текстовое описание. Имеет смысл для `portfolio` */
      description?: string | null;
      /**
       * Format: binary
       * @description Файл изображения
       */
      file: string;
      /** @description Тип артефакта: `photo` или `portfolio` */
      type: string;
    };
    /** Статистика по опубликованной вакансии за 5 дней */
    VacanciesVacancyStatsResponse: {
      /** @description Статистика за последние пять дней существования вакансии */
      items: components["schemas"]["VacanciesVacancyStatsItem"][];
    };
    /** Статистика по вакансии */
    VacanciesVacancyStatsItem: {
      /** @description Дата в формате `YYYY-MM-DD` */
      date: string;
      /** @description Количество откликов на вакансию. `null` если дата в будущем или данных на эту дату нет */
      responses?: number | null;
      /** @description Количество просмотров вакансии. `null` если дата в будущем или данных на эту дату нет */
      views?: number | null;
    };
    /** Объект редактирования черновика вакансии */
    VacancyDraftVacancyDraftEdit: components["schemas"]["VacancyDraftVacancyDraftBodyCommon"];
    /** Объект черновика вакансии */
    VacancyDraftVacancyDraftBodyCommon: {
      accept_handicapped?: components["schemas"]["VacancyAcceptHandicapped"] | components["schemas"]["_IncludesNullableObject"];
      accept_incomplete_resumes?: components["schemas"]["VacancyAcceptIncompleteResumes"] | components["schemas"]["_IncludesNullableObject"];
      accept_kids?: components["schemas"]["VacancyAcceptKids"] | components["schemas"]["_IncludesNullableObject"];
      accept_temporary?: components["schemas"]["VacancyAcceptTemporary"] | components["schemas"]["_IncludesNullableObject"];
      address?: components["schemas"]["VacancyDraftAddress"] | components["schemas"]["_IncludesNullableObject"];
      allow_messages?: components["schemas"]["VacancyAllowMessages"] | components["schemas"]["_IncludesNullableObject"];
      /** @deprecated */
      area?: components["schemas"]["VacancyArea"] | components["schemas"]["_IncludesNullableObject"];
      /** @description Можно передать не более 50 элементов */
      areas?: components["schemas"]["VacancyDraftAreas"] | components["schemas"]["_IncludesNullableObject"];
      assigned_manager_id?: components["schemas"]["VacancyDraftAssignedManagerId"];
      billing_type?: components["schemas"]["VacancyDraftBillingType"] | components["schemas"]["_IncludesNullableObject"];
      branded_template?: components["schemas"]["VacancyDraftBrandedTemplate"] | components["schemas"]["_IncludesNullableObject"];
      code?: components["schemas"]["VacancyDraftCode"] | components["schemas"]["_IncludesNullableObject"];
      contacts?: components["schemas"]["VacancyDraftContacts"] | components["schemas"]["_IncludesNullableObject"];
      custom_employer_name?: components["schemas"]["VacancyCustomEmployerName"] | components["schemas"]["_IncludesNullableObject"];
      department?: components["schemas"]["VacancyDepartment"] | components["schemas"]["_IncludesNullableObject"];
      description?: components["schemas"]["VacancyDraftDescription"] | components["schemas"]["_IncludesNullableObject"];
      driver_license_types?: components["schemas"]["VacancyDriverLicenseTypes"] | components["schemas"]["_IncludesNullableObject"];
      employment?: components["schemas"]["VacancyDraftEmployment"] | components["schemas"]["_IncludesNullableObject"];
      experience?: components["schemas"]["VacancyExperience"] | components["schemas"]["_IncludesNullableObject"];
      key_skills?: components["schemas"]["VacancyDraftKeySkills"] | components["schemas"]["_IncludesNullableObject"];
      languages?: components["schemas"]["VacancyLanguages"] | components["schemas"]["_IncludesNullableObject"];
      name?: components["schemas"]["VacancyDraftName"] | components["schemas"]["_IncludesNullableObject"];
      professional_roles?: components["schemas"]["VacancyDraftProfessionalRoles"] | components["schemas"]["_IncludesNullableObject"];
      response_letter_required?: components["schemas"]["VacancyResponseLetterRequired"] | components["schemas"]["_IncludesNullableObject"];
      response_notifications?: components["schemas"]["VacancyResponseNotifications"] | components["schemas"]["_IncludesNullableObject"];
      response_url?: components["schemas"]["VacancyDraftResponseUrl"] | components["schemas"]["_IncludesNullableObject"];
      salary?: components["schemas"]["VacancySalary"] | components["schemas"]["_IncludesNullableObject"];
      schedule?: components["schemas"]["VacancySchedule"] | components["schemas"]["_IncludesNullableObject"];
      scheduled_at?: components["schemas"]["VacancyDraftScheduledAt"] | components["schemas"]["_IncludesNullableObject"] | null;
      test?: components["schemas"]["VacancyDraftTest"] | components["schemas"]["_IncludesNullableObject"];
      type?: components["schemas"]["VacancyDraftType"] | components["schemas"]["_IncludesNullableObject"];
      with_zp?: components["schemas"]["VacancyDraftWithZp"] | components["schemas"]["_IncludesNullableObject"];
      working_days?: components["schemas"]["VacancyWorkingDays"] | components["schemas"]["_IncludesNullableObject"];
      working_time_intervals?: components["schemas"]["VacancyWorkingTimeIntervals"] | components["schemas"]["_IncludesNullableObject"];
      working_time_modes?: components["schemas"]["VacancyWorkingTimeModes"] | components["schemas"]["_IncludesNullableObject"];
    };
    /**
     * Сопроводительное письмо
     * @description Обязательно ли заполнять сообщение при отклике на вакансию
     */
    VacancyResponseLetterRequired: boolean;
    /** Биллинговый тип */
    VacancyDraftBillingType: {
      /** @description Биллинговый тип [из справочника vacancy_billing_type](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id?: string;
    } | null;
    /**
     * Регионы публикации вакансии
     * @description Список регионов
     */
    VacancyDraftAreas: components["schemas"]["VacancyArea"][] | null;
    /** Область */
    VacancyArea: {
      /**
       * @description Город публикации из [справочника](#tag/Obshie-spravochniki/operation/get-areas)
       * @example 1625
       */
      id: string;
    };
    /**
     * Разрешение сообщений
     * @description Возможность [переписки с кандидатами](https://inboxemp.hh.ru/) по данной вакансии
     */
    VacancyAllowMessages: boolean;
    /**
     * Временное трудоустройство
     * @description Указание, что вакансия доступна с временным трудоустройством
     */
    VacancyAcceptTemporary: boolean | null;
    /**
     * Тест
     * @description Объект - [тест](#tag/Informaciya-o-rabotodatele/operation/get-tests-dictionary) для вакансии
     */
    VacancyDraftTest: ({
      /** @description Тест, который будет добавлен в вакансию */
      id?: string | null;
      /** @description Флаг обязательности прохождения теста при отклике на вакансию */
      required?: boolean | null;
    }) | null;
    /**
     * Контакты
     * @description Контактная информация
     */
    VacancyDraftContacts: ({
      /** @description Email */
      email?: string | null;
      /** @description Имя менеджера */
      name?: string | null;
      /** @description Список телефонов для связи */
      phones?: components["schemas"]["VacancyDraftPhoneItem"][] | null;
    }) | null;
    /** Объект телефона для связи */
    VacancyDraftPhoneItem: components["schemas"]["VacancyDraftPhone"] | components["schemas"]["VacancyDraftPhoneFormatted"];
    /** Отформатированный номер телефона */
    VacancyDraftPhoneFormatted: {
      /** @description Комментарий (удобное время для звонка по этому номеру) */
      comment?: string | null;
      /** @description Телефонный номер целиком */
      formatted: string;
    };
    /** Телефон для черновика */
    VacancyDraftPhone: {
      /** @description Код города */
      city: string;
      /** @description Комментарий (удобное время для звонка по этому номеру) */
      comment?: string | null;
      /** @description Код страны */
      country: string;
      /** @description Абонентская часть телефонного номера */
      number: string;
    };
    /**
     * Неполное резюме
     * @description Разрешен ли отклик на вакансию неполным резюме
     */
    VacancyAcceptIncompleteResumes: boolean;
    /**
     * Название
     * @description Название
     */
    VacancyDraftName: string | null;
    /** График работы */
    VacancySchedule: ({
      /** @description График работы из [справочника schedule](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id?: string | null;
    }) | null;
    /**
     * URL
     * @description URL отклика для прямых вакансий (`type.id=direct`)
     */
    VacancyDraftResponseUrl: string | null;
    /**
     * Время запланированной публикации вакансии
     * @description Время запланированной публикации вакансии (в формате [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) с точностью до секунды: `YYYY-MM-DDThh:mm:ss±hhmm`
     */
    VacancyDraftScheduledAt: string;
    /** Тип */
    VacancyDraftType: {
      /** @description Тип из [справочника vacancy_type](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id?: string;
    } | null;
    /**
     * Список рабочих дней
     * @description Список рабочих дней
     */
    VacancyWorkingDays: components["schemas"]["VacancyWorkingDayItem"][] | null;
    /** Рабочий день */
    VacancyWorkingDayItem: {
      /** @description Рабочие дни из [справочника working_days](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id?: string;
    };
    /**
     * Код вакансии
     * @description Внутренний код вакансии
     */
    VacancyDraftCode: string | null;
    /** Тип занятости */
    VacancyDraftEmployment: ({
      /** @description Тип занятости из [справочника employment](#tag/Obshie-spravochniki/operation/get-dictionaries). По умолчанию или ошибке в поле ставится full */
      id?: string | null;
    }) | null;
    /**
     * Категория водительских прав
     * @description Список требуемых категорий водительских прав
     */
    VacancyDriverLicenseTypes: components["schemas"]["VacancyDriverLicenceTypeItem"][];
    /** Категория водительских прав */
    VacancyDriverLicenceTypeItem: {
      /** @description Категория водительских прав. элемент справочника [driver_license_types](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id?: string;
    };
    /**
     * Брендированный шаблон
     * @description Брендированный шаблон вакансий работодателя из [списка доступных](#tag/Informaciya-o-rabotodatele/operation/get-vacancy-branded-templates-list), либо `null`, если не используется у компании
     */
    VacancyDraftBrandedTemplate: {
      /** @description Идентификатор брендированного шаблона вакансий работодателя из [списка доступных](#tag/Informaciya-o-rabotodatele/operation/get-vacancy-branded-templates-list) */
      id: string;
    };
    /**
     * Интервалы работы
     * @description Список с временными интервалами работы
     */
    VacancyWorkingTimeIntervals: components["schemas"]["VacancyWorkingTimeIntervalItem"][] | null;
    /** Временной интервал работы */
    VacancyWorkingTimeIntervalItem: {
      /** @description Временной интервал работы из [справочника working_time_intervals](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id?: string;
    };
    /**
     * Соискатель старше 14 лет
     * @description Указание, что вакансия доступна для соискателей старше 14 лет [подробнее](https://github.com/hhru/api/blob/master/docs/employer_vacancies_accept_kids.md#accept-kids)
     */
    VacancyAcceptKids: boolean;
    /**
     * Соискатель с инвалидностью
     * @description Указание, что вакансия доступна для соискателей с инвалидностью
     */
    VacancyAcceptHandicapped: boolean;
    /**
     * Менеджер, к которому перейдет вакансия после публикации
     * @description Идентификатор рабочего аккаунта менеджера, которому перейдет вакансия после публикации
     */
    VacancyDraftAssignedManagerId: string | null;
    /**
     * Название
     * @description Название компании для анонимных вакансий (`type.id=anonymous`), например "крупный российский банк". Поле становится обязательным при публикации вакансии **анонимного** типа
     */
    VacancyCustomEmployerName: string | null;
    /**
     * Режимы работы
     * @description Список режимов времени работы
     */
    VacancyWorkingTimeModes: components["schemas"]["VacancyWorkingTimeModeItem"][] | null;
    /** Режимы времени работы */
    VacancyWorkingTimeModeItem: {
      /** @description Режимы времени работы из [справочника working_time_modes](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id?: string;
    };
    /**
     * Описание
     * @description Описание в html, минимум 1 символ, для успешной публикации вакансии не менее 200 символов
     */
    VacancyDraftDescription: string | null;
    /**
     * Адрес
     * @description Адрес
     */
    VacancyDraftAddress: ({
      /** @description Адрес из [списка доступных адресов работодателя](#tag/Adresa-rabotodatelya/operation/get-employer-addresses) */
      id?: string | null;
      /** @description Показывать только метро для указанного адреса */
      show_metro_only?: boolean | null;
    }) | null;
    /** Департамент */
    VacancyDepartment: {
      /** @description Департамент [из справочника](https://api.hh.ru/openapi/redoc#tag/Informaciya-o-rabotodatele/operation/get-employer-departments), от имени которого размещается вакансия (если данная возможность доступна для компании) */
      id?: string;
    } | null;
    /**
     * Новые отклики
     * @description Уведомлять ли менеджера о новых откликах
     */
    VacancyResponseNotifications: boolean;
    /**
     * Зарплата
     * @description Зарплата
     */
    VacancySalary: ({
      /** @description Код валюты из [справочника currency](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      currency?: string | null;
      /** @description Нижняя граница зарплаты */
      from?: number | null;
      /** @description Признак что границы зарплаты указаны до вычета налогов */
      gross?: boolean | null;
      /** @description Верхняя граница зарплаты */
      to?: number | null;
    }) | null;
    /**
     * Разместить на Зарплата.ру
     * @description Вашу вакансию увидят больше людей. Мы разместим ее дополнительно на сервисе Зарплата.ру
     */
    VacancyDraftWithZp: boolean;
    /** Опыт работы */
    VacancyExperience: {
      /** @description Требуемый опыт работы из [справочника experience](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id?: string;
    } | null;
    /**
     * Ключевые навыки
     * @description Список ключевых навыков, не более 30
     */
    VacancyDraftKeySkills: components["schemas"]["VacancyDraftKeySkillItem"][] | null;
    /** Объект ключевых навыков */
    VacancyDraftKeySkillItem: {
      /** @description Название ключевого навыка (максимальная длина - 100 символов) */
      name?: string;
    } | null;
    /**
     * Языки вакансии
     * @description Список языков вакансии
     */
    VacancyLanguages: components["schemas"]["VacancyLanguage"][];
    /** Объект языка */
    VacancyLanguage: {
      /** @description Идентификатор языка. Значения из справочника [/languages](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id: string;
      level: {
        /** @description Идентификатор уровня владения языком. Значения из справочника [/dictionaries поле `language_level`](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        id: string;
      };
    } | null;
    /**
     * Профессиональные роли
     * @description Список профессиональных ролей
     */
    VacancyDraftProfessionalRoles: components["schemas"]["VacancyDraftProfessionalRoleItem"][] | null;
    /** Объект профессиональной роли */
    VacancyDraftProfessionalRoleItem: {
      /** @description Идентификатор профессиональной роли. Элемент справочника [professional_roles](#tag/Obshie-spravochniki/operation/get-professional-roles-dictionary) */
      id?: string;
    };
    /** Оценка зарплат */
    SalaryStatisticsEvaluationResponse: {
      market_salary: components["schemas"]["SalaryStatisticsMarketSalary"];
      resulting_parameters: components["schemas"]["SalaryStatisticsResultingParameters"];
    };
    /**
     * Параметры
     * @description Набор параметров, по которым происходил расчет
     */
    SalaryStatisticsResultingParameters: {
      /** @description Коды регионов */
      areas: components["schemas"]["_IncludesIdName"][];
      /** @description Уровни специалистов */
      employee_levels?: components["schemas"]["_IncludesIdName"][] | null;
      /** @description Количество работодателей, позиции которых участвуют в выборке */
      employers_count: number;
      /** @description Исключенные коды регионов */
      excluded_areas?: components["schemas"]["_IncludesIdName"][] | null;
      /** @description Параметры косвенной оценки зарплат */
      indirect_calculation?: components["schemas"]["SalaryStatisticsIndirectCalculation"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Отрасли */
      industries?: components["schemas"]["_IncludesIdName"][] | null;
      /** @description Количество позиций, по которым построена выборка */
      positions_count: number;
      /**
       * @description Источники данных. Возможные значения:
       *
       * * `SALARIES` — данные из банка зарплат;
       * * `RESUMES` — данные из резюме;
       * * `VACANCIES` — данные из вакансий
       */
      sources: ("SALARIES" | "RESUMES" | "VACANCIES")[];
      /** @description Профессиональные области и специализаций */
      specialities?: components["schemas"]["_IncludesIdName"][] | null;
    };
    /** Косвенная оценка */
    SalaryStatisticsIndirectCalculation: {
      /** @description Регионы, использованные при получении косвенной оценки */
      indirect_areas?: components["schemas"]["_IncludesIdName"][] | null;
      /** @description Уровни специалистов, включенные в выборку в регионе, использованном при получении косвенной оценки */
      indirect_employee_levels?: components["schemas"]["_IncludesIdName"][] | null;
      /** @description Региональный коэффициент, который был использован для получения косвенной оценки зарплат */
      indirect_regional_ratio: number;
    };
    /** Статистика рыночных зарплат */
    SalaryStatisticsMarketSalary: {
      /** @description Среднее расчетное значение */
      average: number;
      /** @description Нижняя граница рыночного диапазона (25-й процентиль) */
      bottom: number;
      /** @description Максимальные значения (90-й процентиль) */
      maximum: number;
      /** @description Медианное рыночное значение */
      median: number;
      /** @description Минимальные значения (10-й процентиль) */
      minimum: number;
      /** @description Верхняя граница рыночного диапазона (75-й процентиль) */
      upper: number;
    };
    /** Успешный ответ */
    ArtifactsArtifactPortfolioResponse: components["schemas"]["ArtifactsArtifactPortfolioItems"] & components["schemas"]["_IncludesPagination"];
    /** Коллекция изображений */
    ArtifactsArtifactPortfolioItems: {
      /** @description Список изображений */
      items: components["schemas"]["ArtifactsArtifactPortfolioItem"][];
    };
    /** Изображение */
    ArtifactsArtifactPortfolioItem: components["schemas"]["ArtifactsArtifactItem"] & components["schemas"]["ArtifactsPortfolioDescription"];
    /** Изображение */
    ArtifactsArtifactItem: {
      /** @description Идентификатор изображения */
      id: string;
      /** @description URL для получения среднего по размеру изображения или `null`, если изображение ещё не готово */
      medium?: string | null;
      /** @description URL для получения уменьшенного изображения или `null`, если изображение ещё не готово */
      small?: string | null;
      /** @description Текущий статус изображения */
      state: components["schemas"]["ArtifactsState"];
    };
    /** Статус изображения */
    ArtifactsState: {
      /**
       * @description Идентификатор текущего статуса изображения:
       *
       * - `processing` — в процессе обработки;
       * - `failed` — ошибка, скорее всего неподдерживаемый формат;
       * - `ok` — обработан, доступен для использования в резюме
       *
       * @enum {string}
       */
      id: "processing" | "failed" | "ok";
      /** @description Название текущего статуса изображения */
      name: string;
    };
    /** Описание изображения */
    ArtifactsPortfolioDescription: {
      /** @description Описание изображения */
      description: string;
    };
    /** Пагинация */
    _IncludesPagination: {
      /**
       * @description Найдено результатов
       * @example 6
       */
      found: number;
      /**
       * @description Номер страницы
       * @example 1
       */
      page: number;
      /**
       * @description Всего страниц
       * @example 2
       */
      pages: number;
      /**
       * @description Результатов на странице
       * @example 5
       */
      per_page: number;
    };
    /** Предпочитаемый способ сортировки откликов */
    VacanciesPreferredNegotiationsOrder: {
      /** @description Тип сортировки */
      order_type: components["schemas"]["_IncludesIdName"];
    };
    /**
     * Подсказки по организациям
     * @description Подсказки по организациям
     */
    SuggestsCompanies: {
      /**
       * Массив найденных организаций
       * @description Информация о найденных организациях
       */
      items: components["schemas"]["SuggestsCompanyItem"][];
    };
    /** Информация о найденных компаниях */
    SuggestsCompanyItem: components["schemas"]["SuggestsEmployerItem"] & {
      area: components["schemas"]["SuggestsArea"];
      /** @description Сферы деятельности */
      industries?: components["schemas"]["_IncludesIdName"][];
    };
    /** Информация о найденных работодателях */
    SuggestsEmployerItem: {
      /** @description Идентификатор организации */
      id: string;
      /** @description Ссылка на логотип организации */
      logo_urls?: components["schemas"]["SuggestsLogoUrl"];
      /** @description Название организации */
      text: string;
      /** @description Сайт организации */
      url?: string;
    };
    /** Ссылка на логотип */
    SuggestsLogoUrl: {
      /** @description URL логотипа */
      90: string;
    };
    /** Регион */
    SuggestsArea: {
      /** @description Идентификатор региона */
      id: string;
      /** @description Название региона */
      name: string;
    };
    /** Скрытые вакансии */
    VacanciesVacanciesBlacklistedResponse: components["schemas"]["_IncludesPagination"] & components["schemas"]["VacanciesVacanciesBlacklisted"];
    /** Скрытые вакансии */
    VacanciesVacanciesBlacklisted: {
      /** @description Массив скрытых вакансий */
      items?: components["schemas"]["VacanciesVacanciesBlacklistedItem"][];
      /** @description Превышено ли максимальное количество элементов в списке */
      limit_reached?: boolean;
    };
    /** Скрытая вакансия */
    VacanciesVacanciesBlacklistedItem: {
      address?: components["schemas"]["VacancyAddress"];
      /** @description URL для регистрации нажатия кнопки отклика */
      adv_response_url?: string;
      /** @description Ссылка на представление вакансии на сайте */
      alternate_url: string;
      /** @description Ссылка на отклик на вакансию на сайте */
      apply_alternate_url: string;
      /** @description Находится ли данная вакансия в архиве */
      archived: boolean;
      area: components["schemas"]["_IncludesArea"];
      /** @description Дата и время публикации вакансии */
      created_at?: string;
      department: components["schemas"]["VacancyDepartment"];
      employer: components["schemas"]["VacanciesEmployerPublic"];
      /** @description Информация о наличии прикрепленного тестового задании к вакансии */
      has_test: boolean;
      /** @description Идентификатор вакансии */
      id: string;
      insider_interview?: components["schemas"]["VacanciesObjectsInsiderInterview"];
      name: components["schemas"]["VacancyName"];
      /** @description Является ли данная вакансия премиум-вакансией */
      premium: boolean;
      /** @description Дата и время публикации вакансии */
      published_at: string;
      relations: components["schemas"]["VacancyRelations"];
      response_letter_required: components["schemas"]["VacancyResponseLetterRequired"];
      response_url?: components["schemas"]["VacancyResponseUrl"];
      salary: components["schemas"]["VacancySalary"];
      sort_point_distance?: components["schemas"]["VacancySortPointDistance"];
      type: components["schemas"]["VacancyTypeOutput"];
      /** @description URL вакансии */
      url: string;
    };
    /**
     * URL
     * @description URL отклика для прямых вакансий (`type.id=direct`)
     */
    VacancyResponseUrl: string | null;
    /**
     * Адрес
     * @description Адрес
     */
    VacancyAddress: ({
      /** @description Адрес из [списка доступных адресов работодателя](#tag/Adresa-rabotodatelya/operation/get-employer-addresses) */
      id?: string | null;
      /** @description Показывать только метро для указанного адреса */
      show_metro_only?: boolean | null;
    }) | null;
    /**
     * Связи соискателя с вакансией
     * @description Возвращает связи соискателя с вакансией. Значения из поля `vacancy_relation` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
     */
    VacancyRelations: components["schemas"]["VacancyRelationItem"][];
    /**
     * Текстовый идентификатор связи
     * @enum {string|null}
     */
    VacancyRelationItem: "favorited" | "got_response" | "got_invitation" | "got_rejection" | "blacklisted" | null;
    /**
     * Название
     * @description Название
     */
    VacancyName: string;
    /** Тип вакансии */
    VacancyTypeOutput: components["schemas"]["VacancyType"] & {
      /** @description Название типа вакансии */
      name?: string;
    };
    /**
     * Тип вакансии
     * @description Тип вакансии
     */
    VacancyType: {
      /** @description Тип из [справочника vacancy_type](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id: string;
    };
    /**
     * Расстояние между центром сортировки и указанным в вакансии адресом
     * @description Расстояние в метрах между центром сортировки (заданной параметрами `sort_point_lat`, `sort_point_lng`) и указанным в вакансии адресом. В случае, если в адресе указаны только станции метро, выдается расстояние между центром сортировки и средней геометрической точкой указанных станций.
     *
     * Значение `sort_point_distance` выдается только в случае, если заданы параметры `sort_point_lat`, `sort_point_lng`, `order_by=distance`
     */
    VacancySortPointDistance: number | null;
    /**
     * Объект
     * @description Объект с информацией об интервью о жизни в компании
     */
    VacanciesObjectsInsiderInterview: components["schemas"]["VacancyInsiderInterview"] | components["schemas"]["_IncludesNullableObject"] | null;
    /** Объект с информацией об интервью о жизни в компании */
    VacancyInsiderInterview: {
      /** @description Идентификатор интервью */
      id: string;
      /** @description Адрес страницы, содержащей интервью */
      url: string;
    };
    /** Информация о компании работодателя */
    VacanciesEmployerPublic: {
      /** @description Флаг, показывающий, прошла ли компания IT аккредитацию */
      accredited_it_employer?: boolean;
      /**
       * @description Ссылка на представление компании на сайте
       * @example https://hh.ru/employer/1455
       */
      alternate_url?: string | null;
      /**
       * @description Идентификатор компании
       * @example 1455
       */
      id?: string | null;
      /** @description Ссылки на логотипы работодателя разных размеров */
      logo_urls?: components["schemas"]["_IncludesLogoUrls"] | components["schemas"]["_IncludesNullableObject"] | null;
      /**
       * @description Название компании
       * @example HeadHunter
       */
      name: string;
      /** @description Флаг, показывающий, прошла ли компания проверку на сайте */
      trusted: boolean;
      /**
       * @description URL, на который нужно сделать GET-запрос, чтобы получить информацию о компании
       * @example https://api.hh.ru/employers/1455
       */
      url?: string | null;
      /**
       * @description Ссылка на поисковую выдачу вакансий данной компании
       * @example https://api.hh.ru/vacancies?employer_id=1455
       */
      vacancies_url?: string | null;
    };
    /**
     * Статус и готовность резюме
     * @description Информация о статусе резюме и готовности резюме к публикации
     */
    ResumeStatusReadiness: components["schemas"]["ResumeStatus"] & components["schemas"]["ResumeReadiness"];
    /** Проверка резюме */
    ResumeReadiness: {
      /**
       * @description Замечания модератора.
       * В некоторых случаях замечания могут сопровождаться [блокировкой резюме](#tag/Rezyume.-Prosmotr-informacii/Status-rezyume).
       * Полный список возможных замечаний доступен в поле `resume_moderation_note` [в справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
       */
      moderation_note: components["schemas"]["ResumeObjectsModerationNote"][];
      progress: components["schemas"]["ResumeObjectsProgress"];
      /** @description URL для публикации или обновления резюме */
      publish_url: string;
    };
    /**
     * Заполненность резюме
     * @description Информация о заполненности резюме
     */
    ResumeObjectsProgress: {
      /** @description Список полей, которые обязательны, но еще не заполнены */
      mandatory: components["schemas"]["_IncludesIdName"][];
      /** @description Процент заполненности резюме */
      percentage: number;
      /** @description Список полей, которые рекомендованы к заполнению, но ещё не заполнены */
      recommended: components["schemas"]["_IncludesIdName"][];
    };
    /**
     * Замечания модератора
     * @description Замечания модератора.
     *
     * В некоторых случаях замечания могут сопровождаться [блокировкой резюме](#tag/Rezyume.-Prosmotr-informacii/Status-rezyume).
     *
     * Полный список возможных замечаний доступен в поле `resume_moderation_note` [в справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
     */
    ResumeObjectsModerationNote: {
      /** @description Поле резюме с которым связано замечание */
      field?: string;
      /** @description Идентификатор замечания */
      id: string;
      /** @description Описание замечания */
      name: string;
      /** @description Путь до параметра, с которым связано замечание */
      pointer?: string;
    };
    /** Статус резюме */
    ResumeStatus: {
      /** @description Заблокировано ли резюме ([подробнее](#tag/Rezyume.-Prosmotr-informacii/Status-rezyume)) */
      blocked: boolean;
      /** @description Можно ли опубликовать или обновить данное резюме */
      can_publish_or_update?: boolean | null;
      /** @description Заполнено ли резюме */
      finished: boolean;
      /** @description [Статус резюме](#tag/Rezyume.-Prosmotr-informacii/Status-rezyume) */
      status: components["schemas"]["_IncludesIdName"];
    };
    /** Флаг «ищу работу» */
    MeSetInSearch: {
      /**
       * @description Флаг «ищу работу». Возможные значения: `true`/`false`
       * @example true
       */
      is_in_search: string;
    };
    /**
     * Успешный ответ
     * @example {
     *   "$ref": "components[\"examples\"][\"EmployerAddressItem\"][\"value\"]"
     * }
     */
    EmployerAddressesEmployerAddressItemResponse: components["schemas"]["EmployerAddressesEmployerAddressItem"];
    /** Адрес */
    EmployerAddressesEmployerAddressItem: {
      /** @description Номер дома */
      building?: string | null;
      /** @description Имеет ли текущий пользователь право редактировать этот адрес */
      can_edit?: boolean;
      /** @description Город */
      city: string | null;
      /** @description Удалён ли адрес */
      deleted?: boolean;
      /** @description Дополнительная информация об адресе */
      description?: string | null;
      /** @description Идентификатор адреса */
      id?: string;
      /** @description Географическая широта */
      lat: number | null;
      /** @description Географическая долгота */
      lng: number | null;
      /** @description Информация о менеджере создавшем адрес */
      manager?: {
        /** @description Полное имя менеджера */
        full_name?: string;
        /** @description Идентификатор менеджера */
        id?: string;
      } | null;
      metro_stations?: components["schemas"]["_IncludesMetroStation"][];
      /** @description Полный адрес */
      raw?: string | null;
      /** @description Улица */
      street?: string | null;
    };
    /** Станция метро */
    _IncludesMetroStation: {
      /** @description Широта */
      lat: number | null;
      /** @description Идентификатор линии метро */
      line_id: string;
      /** @description Названии линии метро */
      line_name: string;
      /** @description Долгота */
      lng: number | null;
      /** @description Идентификатор станции метро */
      station_id: string;
      /** @description Название станции метро */
      station_name: string;
    };
    /**
     * Поля, передаваемые в запросе на создание вакансии
     * @description Поля, передаваемые в запросе на создание вакансии
     */
    VacancyCreate: components["schemas"]["VacancyCommonFields"] & components["schemas"]["VacancyCreateFields"];
    /**
     * Поля, передаваемые в запросе на создание вакансии
     * @description Поля, передаваемые в запросе на создание вакансии
     */
    VacancyCreateFields: {
      area: components["schemas"]["VacancyArea"];
      billing_type: components["schemas"]["VacancyBillingType"];
      description: components["schemas"]["VacancyDescription"];
      driver_license_types?: components["schemas"]["VacancyDriverLicenseTypes"] | components["schemas"]["_IncludesNullableObject"] | null;
      manager?: components["schemas"]["VacancyManager"] | components["schemas"]["_IncludesNullableObject"] | null;
      name: components["schemas"]["VacancyName"];
      /**
       * Идентификатор предыдущей вакансии
       * @description Если этот параметр передан, то у новой вакансии дополнительно будет создана связь с предыдущей вакансией (поле previous_id). Этот параметр не влияет на другие и не связан с ними, их всё равно необходимо передавать.
       * Должен быть равен только ID архивной вакансии. ID архивной вакансии можно получить, запросив [список архивных вакансий](#tag/Upravlenie-vakansiyami/operation/get-archived-vacancies) <a name='previous_id'></a>
       */
      previous_id?: string | null;
      type: components["schemas"]["VacancyType"];
    };
    /**
     * Описание
     * @description Описание в html, не менее 200 символов
     */
    VacancyDescription: string;
    /** Менеджер */
    VacancyManager: {
      /** @description Контактное лицо (менеджер) по размещаемой вакансии, по умолчанию текущий пользователь. Значение из [списка менеджеров компании](#tag/Menedzhery-rabotodatelya/operation/get-employer-managers) */
      id?: string | null;
    };
    /** Биллинговый тип */
    VacancyBillingType: {
      /** @description Биллинговый тип [из справочника vacancy_billing_type](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id: string;
    };
    /**
     * Поля, передаваемые в запросах на создание и редактирование вакансии
     * @description Поля, передаваемые в запросах на создание и редактирование вакансии
     */
    VacancyCommonFields: {
      accept_handicapped?: components["schemas"]["VacancyAcceptHandicapped"] | components["schemas"]["_IncludesNullableObject"] | null;
      accept_incomplete_resumes?: components["schemas"]["VacancyAcceptIncompleteResumes"] | components["schemas"]["_IncludesNullableObject"] | null;
      accept_kids?: components["schemas"]["VacancyAcceptKids"] | components["schemas"]["_IncludesNullableObject"] | null;
      accept_temporary?: components["schemas"]["VacancyAcceptTemporary"];
      address?: components["schemas"]["VacancyAddress"];
      allow_messages?: components["schemas"]["VacancyAllowMessages"] | components["schemas"]["_IncludesNullableObject"] | null;
      branded_template?: components["schemas"]["VacancyBrandedTemplate"];
      code?: components["schemas"]["VacancyCode"];
      contacts?: components["schemas"]["VacancyContacts"];
      custom_employer_name?: components["schemas"]["VacancyCustomEmployerName"];
      department?: components["schemas"]["VacancyDepartment"];
      driver_license_types?: components["schemas"]["VacancyDriverLicenseTypes"] | components["schemas"]["_IncludesNullableObject"] | null;
      employment?: components["schemas"]["VacancyEmployment"];
      experience?: components["schemas"]["VacancyExperience"];
      key_skills?: components["schemas"]["VacancyKeySkills"] | components["schemas"]["_IncludesNullableObject"] | null;
      languages?: components["schemas"]["VacancyLanguages"] | components["schemas"]["_IncludesNullableObject"] | null;
      professional_roles?: components["schemas"]["VacancyProfessionalRoles"];
      response_letter_required?: components["schemas"]["VacancyResponseLetterRequired"] | components["schemas"]["_IncludesNullableObject"] | null;
      response_notifications?: components["schemas"]["VacancyResponseNotifications"] | components["schemas"]["_IncludesNullableObject"] | null;
      response_url?: components["schemas"]["VacancyResponseUrl"];
      salary?: components["schemas"]["VacancySalary"];
      schedule?: components["schemas"]["VacancySchedule"];
      test?: components["schemas"]["VacancyDraftTest"];
      working_days?: components["schemas"]["VacancyWorkingDays"];
      working_time_intervals?: components["schemas"]["VacancyWorkingTimeIntervals"];
      working_time_modes?: components["schemas"]["VacancyWorkingTimeModes"];
    };
    /**
     * Брендированный шаблон
     * @description Брендированный шаблон вакансий работодателя из [списка доступных](#tag/Informaciya-o-rabotodatele/operation/get-vacancy-branded-templates-list), либо `null`, если не используется у компании
     */
    VacancyBrandedTemplate: ({
      /**
       * @description Идентификатор брендированного шаблона вакансий
       * @example default
       */
      id?: string | null;
      /**
       * @description Название брендированного шаблона вакансий
       * @example Стандартный шаблон
       */
      name?: string | null;
    }) | null;
    /** Тип занятости */
    VacancyEmployment: ({
      /** @description Тип занятости из [справочника employment](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id?: string | null;
    }) | null;
    /**
     * Список профессиональных ролей
     * @description Список профессиональных ролей
     */
    VacancyProfessionalRoles: components["schemas"]["VacancyProfessionalRoleItem"][];
    /** Объект профессиональной роли */
    VacancyProfessionalRoleItem: {
      /** @description Идентификатор профессиональной роли. Элемент справочника [professional_roles](#tag/Obshie-spravochniki/operation/get-professional-roles-dictionary) */
      id?: string;
    };
    /**
     * Ключевые навыки
     * @description Список ключевых навыков, не более 30
     */
    VacancyKeySkills: components["schemas"]["VacancyKeySkillItem"][];
    /** Объект ключевых навыков */
    VacancyKeySkillItem: {
      /** @description Название ключевого навыка (максимальная длина - 100 символов) */
      name?: string;
    };
    /**
     * Контактная информация
     * @description Контактная информация. В случае, если параметр используется, необходимо наличие атрибута phones или email
     */
    VacancyContacts: ({
      /** @description Электронная почта. Значение поля должно соответствовать формату email */
      email?: string | null;
      /** @description Имя контакта */
      name: string;
      /** @description Список телефонов для связи */
      phones?: components["schemas"]["VacancyPhoneItem"][] | null;
    }) | null;
    /** Объект телефона для связи */
    VacancyPhoneItem: {
      /** @description Код города */
      city?: string;
      /** @description Комментарий (удобное время для звонка по этому номеру) */
      comment?: string | null;
      /** @description Код страны */
      country?: string;
      /** @description Телефонный номер */
      formatted?: string;
      /** @description Телефон */
      number?: string;
    };
    /**
     * Код вакансии
     * @description Внутренний код вакансии
     */
    VacancyCode: string | null;
    /** Ошибки */
    ErrorsArtifactUploadBadJsonData: components["schemas"]["ErrorsArtifactUploadErrors"] | components["schemas"]["ErrorsCommonBadJsonDataErrors"];
    /**
     * Ошибка при загрузке артефакта
     * @description Информация о возникших ошибках
     */
    ErrorsArtifactUploadErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsArtifactUploadError"][];
    };
    /** Ошибка при загрузке артефакта */
    ErrorsArtifactUploadError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example artifacts
       * @enum {string}
       */
      type: "artifacts";
      /**
       * @description Название поля с ошибкой. Возможные значения:
       * * `file` — не указан файл, либо указано несколько.
       * * `type` — некорректное значение параметра `type`.
       * * `description` — слишком длинное описание.
       * * `limit_exceeded` — превышено количество артефактов.
       * * `unknown_format` — неизвестный формат файла
       *
       * @example limit_exceeded
       * @enum {string}
       */
      value: "file" | "type" | "description" | "limit_exceeded" | "unknown_format";
    };
    /** Ответ на создание черновика */
    VacancyDraftVacanciesDraftResponse: {
      /**
       * @example [
       *   30251619,
       *   30251620
       * ]
       */
      vacancy_ids?: number[];
    };
    /**
     * Не найдено
     * @description Информация о возникших ошибках
     */
    ErrorsNegotiationNegotiationsNotFoundErrors: components["schemas"]["ErrorsCommonNotFoundErrors"] | components["schemas"]["ErrorsNegotiationNotFoundErrors"];
    /**
     * Не найдено
     * @description Информация о возникших ошибках
     */
    ErrorsNegotiationNotFoundErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Описание типа ошибки */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsNegotiationNotFoundError"][];
    };
    /** Ошибка */
    ErrorsNegotiationNotFoundError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example negotiations
       * @enum {string}
       */
      type: "negotiations";
      /**
       * @description Уточнения по ошибке
       * @example topic_not_found
       * @enum {string}
       */
      value: "topic_not_found";
    };
    /**
     * Не найдено
     * @description Информация о возникших ошибках
     */
    ErrorsCommonNotFoundErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsCommonNotFoundError"][];
    };
    /** Ошибка */
    ErrorsCommonNotFoundError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example not_found
       * @enum {string}
       */
      type: "not_found";
    };
    /**
     * Информация о текущем авторизованном пользователе
     * @description Информация о текущем авторизованном пользователе
     */
    MeProfile: components["schemas"]["MeAnyProfile"] | components["schemas"]["MeApplicantProfile"] | components["schemas"]["MeManagerProfile"] | components["schemas"]["MeEmployerProfile"];
    /**
     * Флаги профиля
     * @description Содержит флаги, актуальные для любого типа авторизации: соискатель, работодатель, приложение
     */
    MeAnyProfile: {
      auth_type: "application";
    } & Omit<components["schemas"]["MeCommonProfile"], "auth_type"> & Record<string, never>;
    /**
     * Флаги профиля
     * @description Содержит флаги, актуальные для любого типа авторизации: соискатель, работодатель, приложение
     */
    MeCommonProfile: {
      /**
       * @description Тип авторизации
       * @example applicant
       */
      auth_type: string | null;
      /**
       * @description Является ли текущий пользователь администратором сайта
       * @example false
       */
      is_admin: boolean;
      /**
       * @description Является ли текущий пользователь соискателем
       * @example false
       */
      is_applicant: boolean;
      /**
       * @description Является ли авторизованный клиент приложением
       * @example false
       */
      is_application: boolean;
      /**
       * @description Является ли текущий пользователь менеджером
       * @example false
       */
      is_employer: boolean;
      /**
       * @description Является ли текущий пользователь работодателем
       * @example false
       */
      is_employer_integration: boolean;
    };
    /**
     * Профиль работодателя
     * @description Профиль текущего пользователя, авторизованного как работодатель
     */
    MeEmployerProfile: {
      auth_type: "employer_integration";
    } & Omit<components["schemas"]["MeCommonProfile"], "auth_type"> & {
      employer?: components["schemas"]["MeEmployerProfileCompany"];
      personal_manager?: components["schemas"]["MeEmployerProfilePersonalManager"];
      [key: string]: unknown;
    };
    /**
     * Компания работодателя
     * @description Информация о компании работодателя
     */
    MeEmployerProfileCompany: {
      /**
       * @description Идентификатор компании
       * @example 1455
       */
      id: string;
      /**
       * @description Название компании
       * @example HeadHunter
       */
      name: string;
    };
    /**
     * Персональный менеджер для работодателя
     * @description Информация о персональном менеджере для работодателя
     */
    MeEmployerProfilePersonalManager: {
      /**
       * Format: email
       * @description Email персонального менеджера
       * @example smirnov@example.com
       */
      email: string;
      /**
       * @description Имя персонального менеджера
       * @example Николай
       */
      first_name: string;
      /**
       * @description Идентификатор персонального менеджера
       * @example 1234567
       */
      id: string;
      /**
       * @description Доступен ли менеджер в данный момент
       * @example false
       */
      is_available: boolean;
      /**
       * @description Фамилия персонального менеджера
       * @example Смирнов
       */
      last_name: string;
      /** @description Объект с фотографиями менеджера */
      photo_urls?: ({
        /**
         * Format: uri
         * @description URL большой фотографии менеджера
         * @example https://hhcdn.ru/file/big.jpg
         */
        big?: string | null;
        /**
         * Format: uri
         * @description URL маленькой фотографии менеджера
         * @example https://hhcdn.ru/file/small.jpg
         */
        small?: string | null;
      }) | null;
      /** @description Информация об отсутствии менеджера, либо `null`, если менеджер доступен */
      unavailable?: {
        /**
         * Format: dateTime
         * @description Время, до которого менеджер недоступен для контакта
         * @example 2016-07-01T08:00:00+0400
         */
        until?: string;
      } | null;
    };
    /**
     * Профиль работодателя
     * @description Профиль текущего пользователя, авторизованного как менеджер
     */
    MeManagerProfile: components["schemas"]["MeAnyUserProfile"] & ({
      employer?: components["schemas"]["MeEmployerProfileCompanyDeprecated"];
      /** @deprecated */
      is_in_search?: Record<string, unknown> | null;
      manager?: components["schemas"]["MeEmployerProfileManager"];
      /** @deprecated */
      negotiations_url?: Record<string, unknown> | null;
      personal_manager?: components["schemas"]["MeEmployerProfilePersonalManager"];
      /** @deprecated */
      resumes_url?: Record<string, unknown> | null;
      [key: string]: unknown;
    });
    /**
     * Базовый профиль
     * @description Базовый профиль текущего пользователя, авторизованного как соискатель или работодатель
     */
    MeAnyUserProfile: components["schemas"]["MeAnyProfile"] & ({
      /**
       * Format: email
       * @description Email текущего пользователя
       * @example ivanov@example.com
       */
      email?: string | null;
      /**
       * @description Имя текущего пользователя
       * @example Александр
       */
      first_name: string;
      /**
       * @description Идентификатор текущего пользователя
       * @example 12345678
       */
      id: string;
      /** @deprecated */
      is_anonymous?: boolean;
      /**
       * @description Фамилия текущего пользователя
       * @example Иванов
       */
      last_name: string;
      /**
       * @deprecated
       * @example Николаевич
       */
      mid_name?: string | null;
      /**
       * @description Отчество текущего пользователя
       * @example Петрович
       */
      middle_name?: string | null;
      /**
       * Format: phone
       * @description Телефон текущего пользователя
       * @example 79164555555
       */
      phone?: string | null;
      [key: string]: unknown;
    });
    /**
     * Компания работодателя
     * @description Информация о компании работодателя
     */
    MeEmployerProfileCompanyDeprecated: components["schemas"]["MeEmployerProfileCompany"] & {
      /**
       * @deprecated
       * @description Идентификатор менеджера
       * @example 4062820
       */
      manager_id: string;
      [key: string]: unknown;
    };
    /**
     * Информация о менеджере компании
     * @description Информация о пользователе, как о менеджере компании
     */
    MeEmployerProfileManager: {
      /**
       * @description Обладает ли текущий менеджер правами администратора
       * @example true
       */
      has_admin_rights: boolean;
      /**
       * @description Существует ли у пользователя несколько [рабочих аккаунтов](#tag/Menedzhery-rabotodatelya/operation/get-manager-accounts)
       * @example true
       */
      has_multiple_manager_accounts: boolean;
      /**
       * @description Идентификатор менеджера
       * @example 87654321
       */
      id: string;
      /**
       * @description Является ли текущий менеджер главным контактным лицом компании
       * @example true
       */
      is_main_contact_person: boolean;
      /**
       * Format: uri
       * @description URL, на который нужно сделать GET запрос, чтобы получить [предпочтения менеджера](#tag/Menedzhery-rabotodatelya/operation/get-manager-settings)
       * @example https://api.hh.ru/employers/1455/managers/87654321/settings
       */
      manager_settings_url: string;
    };
    /**
     * Профиль соискателя
     * @description Профиль текущего пользователя, авторизованного как соискатель
     */
    MeApplicantProfile: components["schemas"]["MeAnyUserProfile"] & ({
      counters: components["schemas"]["MeApplicantProfileCounters"];
      /** @deprecated */
      employer?: Record<string, unknown> | null;
      /**
       * @description Имеет ли текущий пользователь статус "ищу работу"
       * @example false
       */
      is_in_search: boolean;
      /** @deprecated */
      manager?: Record<string, unknown> | null;
      /**
       * Format: uri
       * @description URL, на который нужно сделать GET-запрос, чтобы получить список откликов/приглашений текущего пользователя
       */
      negotiations_url: string;
      /** @deprecated */
      personal_manager?: Record<string, unknown> | null;
      profile_videos?: components["schemas"]["ProfileVideosList"];
      /**
       * Format: uri
       * @description URL, на который нужно сделать GET-запрос, чтобы получить список резюме текущего пользователя
       *
       * @example https://api.hh.ru/resumes/mine
       */
      resumes_url: string;
      user_statuses?: components["schemas"]["UserStatusesApplicant"];
      [key: string]: unknown;
    });
    /**
     * Счетчики соискателя
     * @description Информация о счетчиках соискателя
     */
    MeApplicantProfileCounters: {
      /**
       * @description Общее количество новых просмотров всех резюме текущего пользователя
       * @example 2
       */
      new_resume_views: number;
      /**
       * @description Общее количество созданных резюме текущего пользователя
       * @example 5
       */
      resumes_count: number;
      /**
       * @description Количество новых непрочитанных откликов (у которых `has_updates: true`)
       * @example 1
       */
      unread_negotiations: number;
    };
    /** Статус поиска работы соискателя */
    UserStatusesApplicant: {
      job_search_status?: components["schemas"]["UserStatusesJobSearchStatus"];
    };
    /** Статус поиска работы соискателем */
    UserStatusesJobSearchStatus: {
      /**
       * @description Идентификатор статуса
       * @example active_search
       */
      id: string;
      /**
       * @description Время, когда статус в последний раз менялся
       * @example "2024-02-08T10:48:44.267Z"
       */
      last_change_time: string;
      /**
       * @description Название статуса
       * @example В активном поиске работы
       */
      name: string;
    };
    /**
     * Список видео профиля
     * @description Список видео профиля для текущего или запрашиваемого соискателя
     * @example {
     *   "$ref": "components[\"examples\"][\"ProfileVideosProfileVideosList\"][\"value\"]"
     * }
     */
    ProfileVideosList: {
      items: {
        download_url: {
          /** @description Дата и время, до которых действительна ссылка */
          expires_at: string;
          /** @description Ссылка на скачивание видео */
          url: string;
        };
        /** @description Идентификатор видео */
        id: string;
      }[];
    };
    /** Успешный ответ */
    SavedSearchesSavedSearchResponse: components["schemas"]["SavedSearchesSavedSearchItems"] & components["schemas"]["_IncludesPagination"];
    /** Список сохраненных поисков вакансий/резюме */
    SavedSearchesSavedSearchItems: {
      /** @description Список сохраненных поисков вакансий/резюме */
      items: components["schemas"]["SavedSearchesSavedSearchItem"][];
    };
    /** Сохраненный поиск вакансий/резюме */
    SavedSearchesSavedSearchItem: {
      /** @description Дата и время создания */
      created_at: string;
      /** @description Идентификатор поиска */
      id: string;
      items: components["schemas"]["_IncludesCountUrl"] & Record<string, never>;
      /** @description Название поиска */
      name: string;
      new_items: components["schemas"]["_IncludesCountUrl"] & Record<string, never>;
      /** @description Статус подписки */
      subscription: boolean;
    };
    /** Элементы */
    _IncludesCountUrl: {
      /** @description Количество элементов */
      count: number;
      /** @description Ссылка на получение элементов */
      url: string;
    };
    /** Список языков */
    DictionariesLangResponse: components["schemas"]["DictionariesLangItem"][];
    /** Язык */
    DictionariesLangItem: {
      /**
       * @description Идентификатор языка
       * @example ita
       */
      id: string;
      /**
       * @description Название языка
       * @example Итальянский
       */
      name: string;
      /**
       * @description Универсальный идентификатор языка
       * @example 17
       */
      uid: string;
    };
    /**
     * Резюме
     * @description Тело запроса при создании резюме
     */
    ResumeAddResumeRequest: components["schemas"]["ResumeNullableFields"] & {
      /** @description Город проживания. Элемент справочника [areas](#tag/Obshie-spravochniki/operation/get-areas) */
      area?: components["schemas"]["Id"];
      /** @description Список гражданств соискателя. Элементы [справочника регионов](#tag/Obshie-spravochniki/operation/get-areas) */
      citizenship?: components["schemas"]["_IncludesId"][];
      /**
       * @description Список контактов соискателя.
       *
       * При заполнении контактов в резюме необходимо учитывать следующие условия:
       *
       * * В резюме обязательно должен быть указан e-mail. Он может быть только один.
       * * В резюме должен быть указан хотя бы один телефон, причём можно указывать только один телефон каждого типа.
       * * Комментарий можно указывать только для телефонов, для e-mail комментарий не сохранится.
       * * Обязательно указать либо телефон полностью в поле `formatted`, либо все три части телефона по отдельности в трёх полях: `country`, `city` и `number`. Если указано и то, и то, используются данные из трёх полей. В поле `formatted` допустимо использовать пробелы, скобки и дефисы. В остальных полях допустимы только цифры
       */
      contact?: components["schemas"]["ResumeObjectsContact"][];
      /**
       * @description Образование соискателя.
       *
       * Особенности сохранения образования:
       *
       * * Если передать и высшее и среднее образование и уровень образования "средний", то сохранится только среднее образование.
       * * Если передать и высшее и среднее образование и уровень образования "высшее", то сохранится только высшее образование
       */
      education?: components["schemas"]["ResumeObjectsEducation"];
      /** @description Опыт работы */
      experience?: components["schemas"]["ResumeObjectsExperienceCreateEditResume"][];
      /** @description Пол. Элемент справочника [gender](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      gender?: components["schemas"]["Id"];
      /** @description Список языков, которыми владеет соискатель. Элементы справочника [languages](#tag/Obshie-spravochniki/operation/get-languages) */
      language?: components["schemas"]["ResumeObjectsLanguage"][];
    };
    /** Контакт */
    ResumeObjectsContact: WithRequired<components["schemas"]["_IncludesContactProperties"], "type" | "value">;
    /** Контакт */
    _IncludesContactProperties: {
      /** @description Комментарий к контакту */
      comment?: string | null;
      /** @description Требуется ли подтверждение телефона */
      need_verification?: boolean | null;
      /** @description Является ли предпочтительным способом связи */
      preferred?: boolean;
      /** @description Тип контакта. Элемент справочника [preferred_contact_type](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      type?: components["schemas"]["_IncludesIdName"];
      /** @description Значение контакта. Для телефона - объект, для email - строка */
      value?: components["schemas"]["_IncludesContactEmailValue"] | components["schemas"]["_IncludesContactPhoneValue"];
      /** @description Является ли телефон подтвержденным */
      verified?: boolean | null;
    };
    /**
     * Электронная почта
     * Format: email
     * @description Электронная почта
     */
    _IncludesContactEmailValue: string | null;
    /** Телефон */
    _IncludesContactPhoneValue: {
      /** @description Код города */
      city: string;
      /** @description Код страны */
      country: string;
      /** @description Отформатированный номер телефона */
      formatted: string;
      /** @description Номер телефона */
      number: string;
    } | null;
    /**
     * Необязательные поля
     * @description Необязательные поля при создании резюме
     */
    ResumeNullableFields: {
      access?: components["schemas"]["ResumeObjectsAccess"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description День рождения (в формате `ГГГГ-ММ-ДД`) */
      birth_date?: string | null;
      /** @description Готовность к командировкам. Элемент справочника [business_trip_readiness](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      business_trip_readiness?: components["schemas"]["_IncludesId"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Список сертификатов соискателя */
      certificate?: components["schemas"]["ResumeObjectsCertificate"][] | null;
      /** @description Список категорий водительских прав соискателя */
      driver_license_types?: components["schemas"]["ResumeObjectsDriverLicenseTypes"][] | null;
      /** @description Список подходящих соискателю типов занятостей. Элементы справочника [employment](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      employments?: components["schemas"]["_IncludesIdName"][] | null;
      /** @description Имя */
      first_name?: string | null;
      /** @description Наличие личного автомобиля у соискателя */
      has_vehicle?: boolean | null;
      /** @description Документация [Список скрытых полей](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#hidden-fields). Возможные значения элементов приведены в поле `resume_hidden_fields` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      hidden_fields?: components["schemas"]["_IncludesIdName"][] | null;
      /** @description Фамилия */
      last_name?: string | null;
      /**
       * @description Ближайшая станция метро. Элемент справочника [metro](#tag/Obshie-spravochniki/operation/get-metro-stations).
       * Если передать метро, не принадлежащее переданной area, поле проигнорируется. Имеет смысл указывать только для `area` с метро
       */
      metro?: components["schemas"]["_IncludesId"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Отчество */
      middle_name?: string | null;
      /** @description Фотография пользователя (см. [Артефакты](#tag/Rabota-s-artefaktami)) */
      photo?: components["schemas"]["ResumeObjectsPhoto"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Список изображений в портфолио пользователя */
      portfolio?: components["schemas"]["ResumeObjectsPortfolio"][] | null;
      /** @description Массив объектов профролей. Элемент справочника [professional_roles](#tag/Obshie-spravochniki/operation/get-professional-roles-dictionary) */
      professional_roles?: components["schemas"]["_IncludesId"][];
      /** @description Список рекомендаций */
      recommendation?: components["schemas"]["ResumeObjectsRecommendation"][] | null;
      /** @description Информация о возможности переезда в другой город */
      relocation?: components["schemas"]["ResumeObjectsRelocationPublic"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Язык, на котором составлено резюме (локаль). Элемент справочника [локали резюме](#tag/Obshie-spravochniki/operation/get-locales) */
      resume_locale?: components["schemas"]["_IncludesIdName"] | components["schemas"]["_IncludesNullableObject"] | null;
      salary?: components["schemas"]["ResumeObjectsSalaryAddEdit"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Список подходящих соискателю графиков работы. Элементы справочника [schedule](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      schedules?: components["schemas"]["_IncludesIdName"][] | null;
      /** @description Профили в соц. сетях и других сервисах */
      site?: components["schemas"]["ResumeObjectsSite"][] | null;
      /** @description Ключевые навыки (список уникальных строк) */
      skill_set?: string[] | null;
      /** @description Дополнительная информация, описание навыков в свободной форме */
      skills?: string | null;
      /** @description Желаемая должность */
      title?: string | null;
      total_experience?: components["schemas"]["ResumeObjectsTotalExperience"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Желательное время в пути до работы. Элемент справочника [travel_time](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      travel_time?: components["schemas"]["_IncludesId"] | components["schemas"]["_IncludesNullableObject"];
      /** @description Список регионов, в который соискатель имеет разрешение на работу. Элементы [справочника регионов](#tag/Obshie-spravochniki/operation/get-areas) */
      work_ticket?: components["schemas"]["_IncludesId"][] | null;
    };
    /** Зарплата */
    ResumeObjectsSalaryAddEdit: WithRequired<components["schemas"]["ResumeObjectsSalaryProperties"], "currency" | "amount">;
    /** Зарплата */
    ResumeObjectsSalaryProperties: ({
      /** @description Сумма */
      amount?: number | null;
      /** @description Идентификатор валюты. Возможные значения перечислены в массиве `currency` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      currency?: string | null;
    }) | null;
    /** Профиль на сайте */
    ResumeObjectsSite: {
      /** @description Тип профиля. Элемент справочника [resume_contacts_site_type](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      type?: components["schemas"]["_IncludesIdName"];
      /** @description Ссылка на профиль или идентификатор */
      url?: string | null;
    };
    /**
     * Тип видимости
     * @description Тип видимости резюме
     */
    ResumeObjectsAccess: {
      /**
       * @description Определяет, кому будет доступно резюме в поиске и по прямой ссылке.
       *
       * Установить значение параметра можно при [создании](#tag/Rezyume.-Sozdanie-i-obnovlenie/operation/create-resume) или [редактировании](#tag/Rezyume.-Sozdanie-i-obnovlenie/operation/edit-resume) резюме. Возможные значения приведены в поле `resume_access_type` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries).
       *
       * С 1 сентября 2021 года тип видимости `everyone` стал недоступен для сохранения из-за законодательных ограничений.
       *
       * Чтобы управлять списком работодателей, которые могут просматривать резюме, воспользуйтесь группой методов [Резюме. Списки видимости](#tag/Rezyume.-Spiski-vidimosti)
       */
      type: components["schemas"]["_IncludesIdName"];
    };
    /** Опыт работы */
    ResumeObjectsTotalExperience: ({
      /** @description Общий опыт работы в месяцах, с округлением до месяца */
      months?: number | null;
    }) | null;
    /** Сертификат */
    ResumeObjectsCertificate: {
      /** @description Дата получения (в формате `ГГГГ-ММ-ДД`) */
      achieved_at?: string;
      /** @description На кого выдан сертификат. Возвращается только для сертификатов с `type = microsoft` */
      owner?: string | null;
      /** @description Название сертификата */
      title?: string;
      /**
       * @description Тип сертификата. Доступные значения:
       *
       * * `custom`;
       * * `microsoft`
       */
      type?: string;
      /** @description Ссылка на страницу с описанием сертификата */
      url?: string | null;
    };
    /**
     * Фотография
     * @description Значение может быть `null`, если у работодателя отсутствует брендирование страницы
     */
    ResumeObjectsPhoto: (components["schemas"]["ResumeObjectsPhotoNoId"] & components["schemas"]["_IncludesId"]) | null;
    /** Фотография пользователя */
    ResumeObjectsPhotoNoId: {
      /**
       * @deprecated
       * @description URL изображения размером 40x40 пикселей. Изображение по данному URL доступно ограниченное время после получения ответа. Приложение должно быть готово к тому, что на запрос изображения вернется ошибка `404 Not Found`
       */
      40?: string | null;
      /**
       * @deprecated
       * @description URL изображения размером 100x100 пикселей. Изображение по данному URL доступно ограниченное время после получения ответа. Приложение должно быть готово к тому, что на запрос изображения вернется ошибка `404 Not Found`
       */
      100?: string | null;
      /**
       * @deprecated
       * @description URL изображения размером 500x500 пикселей. Изображение по данному URL доступно ограниченное время после получения ответа. Приложение должно быть готово к тому, что на запрос изображения вернется ошибка `404 Not Found`
       */
      500?: string | null;
      /** @description URL среднего по размеру изображения. Изображение по данному URL доступно ограниченное время после получения ответа. Приложение должно быть готово к тому, что на запрос изображения вернется ошибка `404 Not Found` */
      medium: string;
      /** @description URL уменьшенного изображения. Изображение по данному URL доступно ограниченное время после получения ответа. Приложение должно быть готово к тому, что на запрос изображения вернется ошибка `404 Not Found` */
      small: string;
    };
    /** Портфолио */
    ResumeObjectsPortfolio: {
      /** @description Описание изображения в портфолио */
      description?: string | null;
      /** @description Уникальный идентификатор изображения */
      id: string;
      /** @description URL среднего по размеру изображения. Изображение по данному url доступно ограниченное время, после получения ответа. Приложение должно быть готово к тому, что на запрос изображения вернётся `404 Not Found` */
      medium: string;
      /** @description URL уменьшенного изображения. Изображение по данному url доступно ограниченное время, после получения ответа. Приложение должно быть готово к тому, что на запрос изображения вернётся `404 Not Found` */
      small: string;
    };
    /** Рекомендация */
    ResumeObjectsRecommendation: {
      /** @description Контакт */
      contact?: string;
      /** @description Имя выдавшего рекомендацию */
      name: string;
      /** @description Организация */
      organization: string;
      /** @description Должность */
      position: string;
    };
    /** Категория водительских прав */
    ResumeObjectsDriverLicenseTypes: {
      /** @description Категория водительских прав соискателя. Элемент справочника [тип водительских прав](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      id: string;
    };
    /** Возможность переезда */
    ResumeObjectsRelocationPublic: {
      /** @description Список городов, в которые возможен переезд. Имеет смысл только с соответствующим полем `type` */
      area?: components["schemas"]["_IncludesArea"][];
      /** @description Список районов, в которые возможен переезд. Имеет смысл только с соответствующим полем `type` */
      district?: components["schemas"]["_IncludesIdName"][];
      /** @description Готовность к переезду. Элемент справочника [relocation_type](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      type: components["schemas"]["_IncludesIdName"];
    };
    /** Опыт работы в организации */
    ResumeObjectsExperienceCreateEditResume: WithRequired<components["schemas"]["ResumeObjectsExperienceProperties"], "start" | "description" | "position" | "company">;
    /** Опыт работы в организации */
    ResumeObjectsExperienceProperties: {
      /** @description Регион расположения организации. Элемент [справочника регионов](#tag/Obshie-spravochniki/operation/get-areas) */
      area?: components["schemas"]["_IncludesIdNameUrl"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Название организации */
      company?: string | null;
      /** @description Уникальный идентификатор организации */
      company_id?: string | null;
      /** @description Сайт компании */
      company_url?: string | null;
      /** @description Обязанности, функции, достижения */
      description?: string | null;
      /** @description Работодатель */
      employer?: components["schemas"]["EmployersEmployerInfoShort"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Окончание работы (дата в формате `ГГГГ-ММ-ДД`) */
      end?: string | null;
      /** @description Список отраслей компании. Возможные значения приведены в [справочнике индустрий](#tag/Obshie-spravochniki/operation/get-industries) */
      industries?: components["schemas"]["_IncludesIdName"][];
      /** @description Отрасль компании */
      industry?: components["schemas"]["ResumeObjectsIndustry"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Должность */
      position?: string;
      /** @description Начало работы (дата в формате `ГГГГ-ММ-ДД`) */
      start?: string;
    };
    /** Объект с идентификатором, названием и ссылкой */
    _IncludesIdNameUrl: components["schemas"]["_IncludesIdName"] & {
      /** @description URL получения информации о поле */
      url: string;
    };
    /** Работодатель */
    EmployersEmployerInfoShort: {
      /** @description Ссылка на описание работодателя на сайте */
      alternate_url: string;
      /** @description Идентификатор работодателя */
      id: string;
      /** @description Ссылки на изображения логотипов работодателя разных размеров. `original` — это необработанный логотип, который может быть большого размера. Если изначально загруженный компанией логотип меньше, чем 240px и/или 90px по меньшей стороне, то в соответствующих ключах будут ссылки на изображения оригинального размера. Объект может быть `null`, если компания не загрузила логотип. Клиент должен предусмотреть возможность отсутствия логотипа по указанной ссылке (ответ с кодом `404 Not Found`). Логотипы 90 и 240 присутствуют не во всех компаниях */
      logo_urls?: components["schemas"]["_IncludesLogoUrls"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Название работодателя */
      name: string;
      /** @description URL для получения полного описания работодателя */
      url: string;
    };
    /**
     * Отрасль
     * @deprecated
     */
    ResumeObjectsIndustry: {
      /** @description Идентификатор поля */
      id: string;
      /** @description Название поля */
      name: string;
    };
    /** Язык и уровень владения */
    ResumeObjectsLanguage: WithRequired<components["schemas"]["_IncludesLanguageProperties"], "level" | "id">;
    /** Язык и уровень владения */
    _IncludesLanguageProperties: components["schemas"]["_IncludesIdName"] & {
      /** @description Уровень владения. Возможные значения элементов приведены в поле `language_level` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      level?: components["schemas"]["_IncludesIdName"];
    };
    /** Образование */
    ResumeObjectsEducation: {
      /** @description Список куров повышения квалификации */
      additional?: components["schemas"]["ResumeObjectsEducationAdditional"][] | null;
      /** @description Список пройденных тестов или экзаменов */
      attestation?: components["schemas"]["ResumeObjectsEducationAdditional"][] | null;
      /** @description Среднее образование. Обычно заполняется только при отсутствии высшего образования */
      elementary?: components["schemas"]["ResumeObjectsEducationElementary"][] | null;
      /** @description Уровень образования. Возможные значения приведены в поле `education_level` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      level: components["schemas"]["_IncludesIdName"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Список образований выше среднего */
      primary?: components["schemas"]["ResumeObjectsEducationPrimary"][] | null;
    };
    /** Среднее образование */
    ResumeObjectsEducationElementary: {
      /** @description Название учебного заведения */
      name: string;
      /** @description Год окончания */
      year: number;
    };
    /** Дополнительное образование */
    ResumeObjectsEducationAdditional: {
      /** @description Название курса / теста */
      name: string;
      /** @description Организация, проводившая курс / тест */
      organization: string;
      /** @description Специальность / специализация */
      result?: string | null;
      /** @description Год окончания / сдачи */
      year: number;
    };
    /** Высшее образование */
    ResumeObjectsEducationPrimary: {
      /** @description Название учебного заведения */
      name: string;
      /** @description Идентификатор учебного заведения */
      name_id?: string | null;
      /** @description Факультет */
      organization?: string | null;
      /** @description Идентификатор факультета */
      organization_id?: string | null;
      /** @description Специальность / специализация */
      result?: string | null;
      /** @description Идентификатор специальности / специализации */
      result_id?: string | null;
      /** @description Год окончания */
      year: number;
    };
    /** Учебные заведения */
    SuggestsEducationalInstitutions: {
      /**
       * Массив найденных учебных заведений
       * @description Информация о найденных учебных заведениях
       */
      items: components["schemas"]["_IncludesEducationalInstitutionItem"][];
    };
    /** Учебное заведение */
    _IncludesEducationalInstitutionItem: {
      /** @description Сокращенное название учебного заведения */
      acronym?: string | null;
      /** @description Регион */
      area: components["schemas"]["SuggestsArea"] & Record<string, never>;
      /** @description Идентификатор учебного заведения */
      id: string;
      /** @description Альтернативное название учебного заведения */
      synonyms?: string | null;
      /** @description Полное название учебного заведения */
      text: string;
    };
    /**
     * Подсказки по ключевым навыкам
     * @description Подсказки по ключевым навыкам
     */
    SuggestsSkillSet: {
      /** @description Массив найденных ключевых навыков */
      items: components["schemas"]["_IncludesSkillSetItem"][];
    };
    /** Информация о резюме, которыми можно откликнуться на вакансию */
    ResumesSuitableResumesResponse: components["schemas"]["_IncludesPagination"] & components["schemas"]["ResumesSuitableResumeItems"] & {
      overall: components["schemas"]["ResumesSuitableResumeOverall"];
    };
    /** Список резюме, которыми можно откликнуться на вакансию */
    ResumesSuitableResumeItems: {
      /** @description Список резюме, которыми можно откликнуться на вакансию */
      items: components["schemas"]["ResumesSuitableResumeItem"][];
    };
    /** Резюме, подходящее для отклика */
    ResumesSuitableResumeItem: components["schemas"]["ResumeResumeShortForOwner"] & {
      access: components["schemas"]["ResumeObjectsAccess"];
      /** @description Заполнено ли резюме */
      finished: boolean;
      /**
       * @description Принимает значение `true`, если резюме является неполным. Применимо только для вакансий, у которых не установлен флаг «принимать неполные резюме».
       *
       * При получении `true` в данном поле, соискатель должен заполнить обязательные поля (доступны в [выдаче полного резюме](#tag/Prosmotr-rezyume/operation/get-resume)) перед откликом на данную вакансию
       */
      requires_completion: boolean;
      /** @description Статус [резюме](#tag/Rezyume.-Prosmotr-informacii/Status-rezyume) */
      status: components["schemas"]["_IncludesIdName"];
    };
    /** Сокращенное представление резюме при запросе от владельца */
    ResumeResumeShortForOwner: {
      /** @description Дополнительные действия */
      actions: components["schemas"]["ResumeObjectsActionsForOwner"];
      /** @description Возраст */
      age?: number | null;
      /** @description URL резюме на сайте */
      alternate_url: string;
      /** @description Город проживания. Элемент справочника [areas](#tag/Obshie-spravochniki/operation/get-areas) */
      area?: components["schemas"]["_IncludesIdNameUrl"] | components["schemas"]["_IncludesNullableObject"] | null;
      auto_hide_time?: components["schemas"]["ResumeObjectsAutoHideTime"];
      /** @description Доступен ли просмотр контактной информации в резюме текущему работодателю */
      can_view_full_info?: boolean | null;
      /** @description Список сертификатов соискателя */
      certificate: components["schemas"]["ResumeObjectsCertificate"][];
      /** @description Дата и время создания резюме */
      created_at: string;
      /** @description Ссылки для скачивания резюме в разных форматах */
      download: components["schemas"]["ResumeObjectsDownload"];
      /**
       * @description Образование соискателя.
       *
       * Особенности сохранения образования:
       *
       * * Если передать и высшее и среднее образование и уровень образования "средний", то сохранится только среднее образование.
       * * Если передать и высшее и среднее образование и уровень образования "высшее", то сохранится только высшее образование
       */
      education: components["schemas"]["ResumeObjectsEducation"];
      /** @description Опыт работы */
      experience: components["schemas"]["ResumeObjectsExperienceForOwner"][];
      /** @description Имя */
      first_name?: string | null;
      /** @description Пол соискателя. Возможные значения перечислены в поле `gender` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      gender?: components["schemas"]["_IncludesIdName"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Документация [Список скрытых полей](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#hidden-fields). Возможные значения элементов приведены в поле `resume_hidden_fields` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      hidden_fields: components["schemas"]["_IncludesIdName"][];
      /** @description Идентификатор резюме */
      id: string;
      /** @description Фамилия */
      last_name?: string | null;
      /** @description Выделено ли резюме в поиске */
      marked: boolean;
      /** @description Отчество */
      middle_name?: string | null;
      /** @description Фотография пользователя */
      photo?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ProfilePhoto"] | null;
      /** @description Ресурс, на котором было размещено резюме */
      platform?: components["schemas"]["_IncludesId"];
      /** @description Желаемая зарплата */
      salary?: components["schemas"]["ResumeObjectsSalaryProperties"];
      /** @description Желаемая должность */
      title?: string | null;
      /** @description Общий опыт работы */
      total_experience?: components["schemas"]["ResumeObjectsTotalExperience"];
      /** @description Дата и время обновления резюме */
      updated_at: string;
      /** @description URL резюме на сайте */
      url: string;
    };
    /** Опыт работы в организации */
    ResumeObjectsExperienceForOwner: {
      /** @description Регион расположения организации. Элемент [справочника регионов](#tag/Obshie-spravochniki/operation/get-areas) */
      area?: components["schemas"]["_IncludesIdNameUrl"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Название организации */
      company?: string | null;
      /** @description Уникальный идентификатор организации */
      company_id?: string | null;
      /** @description Сайт компании */
      company_url?: string | null;
      /** @description Работодатель */
      employer?: components["schemas"]["EmployersEmployerInfoShort"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Окончание работы (дата в формате `ГГГГ-ММ-ДД`) */
      end?: string | null;
      /** @description Список отраслей компании. Возможные значения приведены в [справочнике индустрий](#tag/Obshie-spravochniki/operation/get-industries) */
      industries: components["schemas"]["_IncludesIdName"][];
      /** @description Отрасль компании */
      industry?: components["schemas"]["ResumeObjectsIndustry"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Должность */
      position: string;
      /** @description Начало работы (дата в формате `ГГГГ-ММ-ДД`) */
      start: string;
    };
    /** Действия с резюме от имени владельца */
    ResumeObjectsActionsForOwner: {
      /** @description Ссылки для скачивания резюме в нескольких форматах ([подробнее](#tag/Prosmotr-rezyume/operation/get-resume)) (атрибут 'actions') */
      download: components["schemas"]["ResumeObjectsDownload"];
    };
    /** Загрузка резюме */
    ResumeObjectsDownload: {
      /** @description PDF-версия резюме */
      pdf: components["schemas"]["ResumeObjectsDownloadPdfRtf"];
      /** @description RTF-версия резюме */
      rtf: components["schemas"]["ResumeObjectsDownloadPdfRtf"];
    };
    /** PDF/RTF-версия резюме */
    ResumeObjectsDownloadPdfRtf: {
      /** @description Ссылка для получения PDF/RTF-версии резюме */
      url: string;
    };
    /**
     * Время автоскрытия резюме при неактивности пользователя
     * @description Время автоскрытия резюме при неактивности пользователя.
     *
     * Определяет период, по истечение которого резюме будет скрыто, если пользователь не совершал никаких действий
     * Возможные значения перечислены при запросе [типов видимости резюме](#tag/Rezyume.-Spiski-vidimosti/operation/get-resume-access-types)
     *
     * Поле доступно для просмотра и редактирования только для пользователей rabota.by
     */
    ResumeObjectsAutoHideTime: components["schemas"]["_IncludesIdName"] | components["schemas"]["_IncludesNullableObject"] | null;
    /**
     * Фотография пользователя
     * @description Фотография пользователя (см. [Артефакты](#tag/Rabota-s-artefaktami))
     */
    ProfilePhoto: {
      /** @deprecated */
      40?: string;
      /** @deprecated */
      100?: string;
      /** @deprecated */
      500?: string;
      /** @description Уникальный идентификатор изображения */
      id: string;
      /** @description URL среднего по размеру изображения. Изображение по данному url доступно ограниченное время, после получения ответа. Приложение должно быть готово к тому, что на запрос изображения вернётся `404 Not Found` */
      medium: string;
      /** @description URL уменьшенного изображения. Изображение по данному url доступно ограниченное время, после получения ответа. Приложение должно быть готово к тому, что на запрос изображения вернётся `404 Not Found` */
      small: string;
    };
    /**
     * Общее количество резюме
     * @description Содержит информацию об общем количестве резюме у соискателя
     */
    ResumesSuitableResumeOverall: {
      /** @description Количество резюме, которыми пользователь уже откликался на эту вакансию */
      already_applied: number;
      /** @description Количество неопубликованных резюме */
      not_published: number;
      /** @description Количество резюме, которыми невозможно откликнуться на данную вакансию по другим причинам (конфликтующие настройки видимости резюме и т.п.) */
      unavailable: number;
    };
    /** Ошибка параметров запроса */
    ErrorsCommonBadRequestBadArgumentBadRequestAndBadArgumentErrors: components["schemas"]["ErrorsCommonBadArgumentErrors"] | components["schemas"]["ErrorsCommonBadRequestErrors"];
    /**
     * Ошибки в параметрах запроса
     * @description Информация о возникших ошибках
     */
    ErrorsCommonBadArgumentErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsCommonBadArgumentError"][];
    };
    /** Ошибка в параметре запроса */
    ErrorsCommonBadArgumentError: {
      /**
       * @description Причина ошибки. Возможные значения:
       *   * `too_long_value` — слишком длинное значение
       *   * `too_many_arguments` — слишком много аргументов
       *   * `invalid` — значение введено некорректно
       *
       * @example too_long_value
       */
      reason?: string;
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example bad_argument
       * @enum {string}
       */
      type: "bad_argument";
      /**
       * @description Название поля с ошибкой
       *
       * @example resume_id
       */
      value?: string;
    };
    /** Ошибки */
    ErrorsResumeBadArgTooManyResumesErrors: components["schemas"]["ErrorsCommonBadArgumentErrors"] | components["schemas"]["ErrorsResumeAddEditErrors"] | components["schemas"]["ErrorsResumeTooManyResumesErrors"];
    /**
     * Ошибка при создании резюме
     * @description Информация о возникших ошибках
     */
    ErrorsResumeTooManyResumesErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsResumeTooManyResumesError"][];
    };
    /**
     * Ошибка при создании резюме
     * @description Превышено максимальное количество резюме
     */
    ErrorsResumeTooManyResumesError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example resumes
       * @enum {string}
       */
      type: "resumes";
      /**
       * @description Значение ошибки
       * @example total_limit_exceeded
       * @enum {string}
       */
      value: "total_limit_exceeded";
    };
    /**
     * Ошибки при создании или редактировании резюме
     * @description Информация о возникших ошибках
     */
    ErrorsResumeAddEditErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsResumeAddEditError"][];
    };
    /** Ошибка при создании или редактировании резюме */
    ErrorsResumeAddEditError: {
      /**
       * @description Описание ошибки для пользователя
       * @example Значение ниже допустимого
       */
      description: string;
      /**
       * @description Путь до параметра, в котором возникла ошибка.
       *
       * Для указания параметра используется формат JsonPointer [RFC 6901](https://tools.ietf.org/html/rfc6901)
       *
       * @example /education/additional/1/year
       */
      pointer: string;
      /**
       * @description Причина ошибки. Возможные значения:
       *
       *   * `required` — поле является обязательным для заполнения.
       *   * `not_found` — не найдено значение по переданному ID.
       *   * `faculty_without_university` — нельзя установить факультет без университета.
       *   * `not_in_dictionary` — не найдено значение по переданному ID в справочнике.
       *   * `not_a_leaf` — значение не должно содержать потомков.
       *   * `end_date_before_start_date` — значение `end` меньше `start`.
       *   * `not_country` — значение `area` должно быть страной (см. [справочник стран](#tag/Obshie-spravochniki/operation/get-countries)).
       *   * `more_than_one_native_language` — указано более одного родного языка.
       *   * `must_contain_unique` — переданные значения должны быть уникальны.
       *   * `from_different_profareas` — переданы значения из разных отраслей.
       *   * `duplicate` — значение уже было использовано.
       *   * `bad_image_type` — передано значение изображения неправильного типа (для `portfolio` необходимы значения из [GET /artifacts/portfolio](#tag/Rabota-s-artefaktami/operation/get-artifacts-portfolio), для photo — [GET /artifacts/photo](#tag/Rabota-s-artefaktami/operation/get-artifact-photos)) .
       *   * `processing` — объект в процессе обработки.
       *   * `preferred_must_be_unique` — предпочитаемый тип связи должен быть уникальным.
       *   * `preferred_contact_not_specified` — предпочитаемый тип связи не указан или не указано значение контакта.
       *   * `need_country_city_number_or_formatted` — телефон в контактах указан в неверном формате (см. [условия заполнения контактов в резюме](#tag/Rezyume.-Usloviya-zapolneniya-polej/operation/get-new-resume-conditions)).
       *   * `invalid` — ошибка в значении поля (поля должны соответствовать [условиям заполнения](#tag/Rezyume.-Usloviya-zapolneniya-polej/operation/get-resume-conditions)).
       *   * `greater_than_max` — значение больше максимума .
       *   * `less_than_min` — значение меньше минимума.
       *   * `earlier_than_min` — указанная дата раньше минимально возможной.
       *   * `later_than_max` — указанная дата позже максимально возможной.
       *   * `length_less_than_min` — количество символов в поле меньше минимума.
       *   * `length_greater_than_max` — количество символов в поле больше максимума.
       *   * `size_less_than_min` — количество элементов меньше минимума.
       *   * `size_greater_than_max` — количество элементов больше максимума.
       *   * `send_metro_without_area` — не передано значение поля `area` при заполненном метро.
       *   * `not_belong_this_city` — указанного метро нет в указанном городе.
       *   * `required_with_not_started_career` — необходимо отправлять опыт работы, если специализация не начало карьеры.
       *   * `not_match_regexp` — значение не соответствует регулярному выражению.
       *   * `more_than_one` — передано более одного email.
       *   * `not_available` — недопустимое значение
       *
       * @example not_available
       */
      reason: string;
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example bad_json_data
       * @enum {string}
       */
      type: "bad_json_data";
      /**
       * @description Название поля с ошибкой
       * @example year
       */
      value: string;
    };
    /** История просмотра резюме */
    ResumesResumeViewHistoryResponse: components["schemas"]["_IncludesPagination"] & components["schemas"]["ResumesResumeViewHistory"];
    /** История просмотров резюме */
    ResumesResumeViewHistory: {
      /** @description Список просмотров резюме */
      items: components["schemas"]["ResumesResumeViewHistoryItem"][];
      /** @description Короткое представление резюме */
      resume: components["schemas"]["ResumeResumeNano"] & components["schemas"]["_IncludesUrl"];
    };
    /** Сокращенное представление резюме */
    ResumeResumeNano: {
      /** @description URL резюме на сайте */
      alternate_url: string;
      /** @description Идентификатор резюме */
      id: string;
      /** @description Желаемая должность */
      title: string | null;
    };
    /** Информация о просмотре резюме */
    ResumesResumeViewHistoryItem: {
      /** @description Дата создания записи (дата просмотра резюме работодателем) */
      created_at: string;
      /**
       * @description Информация о компании.
       *
       * Если резюме просмотрено анонимным работодателем, либо из откликов к анонимной вакансии, объект будет содержать только поле `name`
       */
      employer: components["schemas"]["EmployersEmployerItemShort"] | components["schemas"]["_IncludesName"];
      /** @description Отметка о просмотре записи */
      viewed: boolean;
    };
    /** Название */
    _IncludesName: {
      /** @description Название */
      name: string;
    };
    /** URL */
    _IncludesUrl: {
      /** @description Ссылка на получение элементов */
      url: string;
    };
    /** Список регионов */
    DictionariesSalaryStatisticsAreaResponse: components["schemas"]["DictionariesSalaryStatisticsAreaItem"][];
    /** Регион */
    DictionariesSalaryStatisticsAreaItem: {
      /** @description Дочерние регионы */
      areas?: components["schemas"]["DictionariesSalaryStatisticsAreaItem"][];
      /** @description Идентификатор региона */
      id: string;
      /** @description Название региона */
      name: string;
    };
    /**
     * Список уровней компетенций
     * @description Список уровней компетенций
     */
    DictionariesSalaryStatisticsEmployeeLevelResponse: components["schemas"]["_IncludesIdNameDesc"][];
    /** Объект с идентификатором, названием и описанием */
    _IncludesIdNameDesc: components["schemas"]["_IncludesId"] & components["schemas"]["_IncludesNameDescription"];
    /** Объект */
    _IncludesNameDescription: {
      /** @description Описание */
      description: string;
      /** @description Название */
      name: string;
    };
    /** Ошибки */
    ErrorsResumeBadArgumentResumeErrors: components["schemas"]["ErrorsCommonBadArgumentErrors"] | components["schemas"]["ErrorsResumeAddEditErrors"];
    /** Объект создания черновика вакансии */
    VacancyDraftVacancyDraftCreate: components["schemas"]["VacancyDraftVacancyDraftBodyCommon"] & Record<string, never>;
    /**
     * Рабочие аккаунты менеджера
     * @description Информация о рабочих аккаунтах менеджера
     */
    ManagerAccounts: {
      /**
       * @description Идентификатор текущего рабочего аккаунта менеджера. Совпадает со значением переданного в заголовке `X-Manager-Account-Id`
       *
       * @example 87654321
       */
      current_account_id: string;
      /**
       * @description Заблокирован ли главный рабочий аккаунт менеджера
       * @example false
       */
      is_primary_account_blocked: boolean;
      /** @description Список рабочих аккаунтов менеджера */
      items: components["schemas"]["ManagerAccount"][];
      /**
       * @description Идентификатор главного рабочего аккаунта менеджера
       * @example 12345678
       */
      primary_account_id: string;
    };
    /** Список стран */
    DictionariesCountriesResponse: components["schemas"]["_IncludesArea"][];
    /** Объект подписки */
    WebhookSubscriptionCreate: components["schemas"]["WebhookSubscriptionCommonItem"] & Record<string, never>;
    /** Объект подписки */
    WebhookSubscriptionCommonItem: {
      /** @description Cписок событий */
      actions: (components["schemas"]["WebhookActionNewNegotiationVacancy"] | components["schemas"]["WebhookActionNewResponseOrInvitationVacancy"] | components["schemas"]["WebhookActionVacancyArchivation"] | components["schemas"]["WebhookActionVacancyChange"] | components["schemas"]["WebhookActionVacancyProlongation"] | components["schemas"]["WebhookActionVacancyPublicationForVacancyManager"] | components["schemas"]["WebhookActionNegotiationEmployerStateChange"])[];
      /**
       * Format: uri
       * @description URL, на который будет отправляться POST запрос при наступлении события
       * @example http://www.example.com
       */
      url: string;
    };
    /** Подписка на VACANCY_PUBLICATION_FOR_VACANCY_MANAGER */
    WebhookActionVacancyPublicationForVacancyManager: {
      /**
       * @description Публикация вакансии. Событие присылается только для менеджера-владельца вакансии при создании вакансии, отложенной публикации или публикации из черновика
       * @enum {string}
       */
      type: "VACANCY_PUBLICATION_FOR_VACANCY_MANAGER";
    };
    /** Подписка на NEGOTIATION_EMPLOYER_STATE_CHANGE */
    WebhookActionNegotiationEmployerStateChange: {
      settings?: (components["schemas"]["WebhookActionVacancyOnlyMineSettings"] | components["schemas"]["_IncludesNullableObject"]) | null;
      /**
       * @description Перемещение резюме кандидата на другой этап вакансии.
       *
       * Содержит следующую информацию:
       *
       * * кто переместил резюме;
       * * идентификатор резюме;
       * * исходный статус резюме;
       * * новый статус резюме
       *
       * @enum {string}
       */
      type: "NEGOTIATION_EMPLOYER_STATE_CHANGE";
    };
    /** Настройка на подписку только на мои вакансии */
    WebhookActionVacancyOnlyMineSettings: {
      /**
       * @description Если `true`, сервис будет присылать уведомления только о вакансиях текущего пользователя.
       *
       * По умолчанию `false` — сервис будет присылать уведомления о всех вакансиях, к которым есть доступ
       *
       * @default false
       */
      vacancies_only_mine?: boolean;
    };
    /** Подписка на VACANCY_ARCHIVATION */
    WebhookActionVacancyArchivation: {
      settings?: (components["schemas"]["WebhookActionVacancyOnlyMineSettings"] | components["schemas"]["_IncludesNullableObject"]) | null;
      /**
       * @description Архивация вакансии
       * @enum {string}
       */
      type: "VACANCY_ARCHIVATION";
    };
    /** Подписка на NEW_NEGOTIATION_VACANCY */
    WebhookActionNewNegotiationVacancy: {
      settings?: (components["schemas"]["WebhookActionVacancyOnlyMineSettings"] | components["schemas"]["_IncludesNullableObject"]) | null;
      /**
       * @description Новый отклик на вакансию. Данное событие будет вызываться только на отклик со стороны соискателя
       * @enum {string}
       */
      type: "NEW_NEGOTIATION_VACANCY";
    };
    /** Подписка на NEW_RESPONSE_OR_INVITATION_VACANCY */
    WebhookActionNewResponseOrInvitationVacancy: {
      settings?: (components["schemas"]["WebhookActionVacancyOnlyMineSettings"] | components["schemas"]["_IncludesNullableObject"]) | null;
      /**
       * @description Новый отклик или приглашение на вакансию. Данное событие будет вызываться как на отклик со стороны соискателя, так и на приглашение со стороны работодателя
       * @enum {string}
       */
      type: "NEW_RESPONSE_OR_INVITATION_VACANCY";
    };
    /** Подписка на VACANCY_CHANGE */
    WebhookActionVacancyChange: {
      settings?: (components["schemas"]["WebhookActionVacancyOnlyMineSettings"] | components["schemas"]["_IncludesNullableObject"]) | null;
      /**
       * @description Изменение вакансии. Аккумулирует изменения, внесенные за несколько последних секунд, и отправляет вебхук, содержащий время последнего изменения.
       *
       * Если вы внесете два изменения с разницей в одну секунду, сервис отправит только один вебхук, который будет содержать время последнего изменения. Если изменение одно, сервис отправит вебхук с задержкой в несколько секунд
       *
       * @enum {string}
       */
      type: "VACANCY_CHANGE";
    };
    /** Подписка на VACANCY_PROLONGATION */
    WebhookActionVacancyProlongation: {
      settings?: (components["schemas"]["WebhookActionVacancyOnlyMineSettings"] | components["schemas"]["_IncludesNullableObject"]) | null;
      /**
       * @description Продление вакансии
       * @enum {string}
       */
      type: "VACANCY_PROLONGATION";
    };
    /**
     * Каталог профессиональных ролей
     * @description Каталог профессиональных ролей и категорий
     */
    ProfessionalRolesCatalog: {
      /**
       * Категория профессиональной роли
       * @description Информация о категории профессиональной роли
       */
      categories: components["schemas"]["ProfessionalRolesCategory"][];
    };
    /** Категории профессиональных ролей */
    ProfessionalRolesCategory: {
      /**
       * @description Идентификатор категории профессиональной роли
       * @example 123
       */
      id: string;
      /**
       * @description Имя категории профессиональной роли
       * @example Строительство, недвижимость
       */
      name: string | null;
      /** @description Список профессиональных ролей, входящих в эту категорию */
      roles: components["schemas"]["ProfessionalRolesRole"][];
    };
    /** Профессиональная роль */
    ProfessionalRolesRole: {
      /**
       * @description На роль принимаются отклики неполным резюме
       * @example true
       */
      accept_incomplete_resumes: boolean;
      /**
       * @description Идентификатор профессиональной роли
       * @example 1
       */
      id: string;
      /**
       * @description Дефолтная роль
       * @example true
       */
      is_default: boolean;
      /**
       * @description Имя профессиональной роли
       * @example Архитектор
       */
      name: string;
      /**
       * @description Наличие запрета на использование в поиске при составлении поискового запроса
       * @example true
       */
      search_deprecated?: boolean;
      /**
       * Format: date-time
       * @description Время, с которого действует запрет на использование роли в поиске при составлении поискового запроса,
       * в формате [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) с точностью до секунды: `YYYY-MM-DDThh:mm:ss±hhmm`
       *
       * @example 2023-06-01T08:00:00+0300
       */
      search_deprecated_datetime?: string | null;
      /**
       * @description Наличие запрета на использование при создании новых сущностей (резюме или вакансии)
       * @example true
       */
      select_deprecated?: boolean;
      /**
       * Format: date-time
       * @description Время, с которого действует запрет на использование роли при создании новых сущностей,
       * в формате [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) с точностью до секунды: `YYYY-MM-DDThh:mm:ss±hhmm`
       *
       * @example 2023-06-01T08:00:00+0300
       */
      select_deprecated_datetime?: string | null;
    };
    /** Ошибка авторизации или ошибка доступа к платному методу */
    ErrorsCommonBadAuthorizationCommonAndPaymentMethodError: components["schemas"]["ErrorsCommonBadAuthorizationErrors"] | components["schemas"]["ErrorsCommonBadAuthorizationPaymentMethodErrors"];
    /**
     * Ошибки при использовании платного метода
     * @description Информация о возникших ошибках
     */
    ErrorsCommonBadAuthorizationPaymentMethodErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsCommonBadAuthorizationPaymentMethodError"][];
    };
    /** Ошибка при использовании платного метода */
    ErrorsCommonBadAuthorizationPaymentMethodError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example api_access_payment
       * @enum {string}
       */
      type: "api_access_payment";
      /**
       * @description Описание ошибки.
       *
       * Причина ошибки в том, что вы запрашиваете один из [платных методов](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access) без купленного доступа
       *
       * @example action_must_be_payed
       * @enum {string}
       */
      value: "action_must_be_payed";
    };
    /**
     * Ошибка авторизации
     * @description Информация о возникших ошибках
     */
    ErrorsNegotiationNegotiationsBadAuthorizationErrors: components["schemas"]["ErrorsVacancyApplyForbiddenErrors"] | components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
    /**
     * Ошибки при отклике на вакансию
     * @description Информация о возникших ошибках
     */
    ErrorsVacancyApplyForbiddenErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & ({
      /**
       * @deprecated
       * @enum {string}
       */
      bad_argument?: "vacancy_id" | "resume_id";
      /** @deprecated */
      bad_arguments?: ({
        description?: string;
        /**
         * @description Поле, в котором допущена ошибка.
         * Возможные значения:
         * * `vacancy_id` — указан невалидный идентификатор
         * * `resume_id` — указан невалидный идентификатор
         *
         * @enum {string}
         */
        name?: "vacancy_id" | "resume_id";
      })[];
      /**
       * @description Описание ошибки
       * @example Forbidden
       */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsVacancyApplyForbiddenError"][];
    });
    /** Ошибка при отклике/приглашении на вакансию */
    ErrorsVacancyApplyForbiddenError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example negotiations
       * @enum {string}
       */
      type: "negotiations";
      /**
       * @description Ошибки при отклике/приглашении на вакансию:
       *   * `invalid_vacancy` — вакансия из отклика/приглашения была архивирована или скрыта.
       *   * `resume_not_found` — резюме из отклика/приглашения скрыто, удалено или не найдено.
       *   * `already_applied` — в системе уже есть отклик/приглашение на указанную вакансию (связка `resume_id` + `vacancy_id`).
       *   * `test_required` — для отклика необходимо пройти тест.
       *   * `resume_visibility_conflict` — невозможно откликнуться на анонимную вакансию, используя резюме с [типом видимости](#tag/Rezyume.-Spiski-vidimosti/operation/get-resume-access-types) `whitelist`.
       *   * `edit_forbidden` — редактирование сообщения недоступно.
       *   * `application_denied` — общая ошибка запрета отклика в случае, когда дополнительная информация недоступна.
       *   * `limit_exceeded` — превышен лимит количества откликов/приглашений.
       *   * `wrong_state` — действие по отклику/приглашению в данном статусе невозможно.
       *   * `empty_message` — передан пустой текст сопроводительного письма.
       *   * `too_long_message` — передан слишком длинный текст сопроводительного письма.
       *   * `inappropriate_language_message` — передан текст сопроводительного письма, который содержит нецензурную лексику.
       *   * `resource_policy_violation_message` — передан текст сопроводительного письма, который нарушает правила использования сервиса.
       *   * `address_not_found` — переданный адрес не существует, либо принадлежит другому работодателю.
       *   * `not_enough_purchased_services` — не хватает оплаченных услуг. Например, [доступа к базе резюме](https://hh.ru/price#dbaccess).
       *   * `in_a_row_limit` — превышено количество последовательных сообщений в переписке. Необходимо дождаться ответа собеседника на сообщение.
       *   * `overall_limit` — превышен лимит сообщений.
       *   * `no_invitation` — переписка недоступна, так как в отклике ещё не было приглашения.
       *   * `message_cannot_be_empty` — сообщение в переписке не может быть пустым.
       *   * `disabled_by_employer` — возможность переписки по отклику отключена работодателем.
       *   * `resume_deleted` — резюме, с которым совершался отклик, удалено или скрыто.
       *   * `archived` — вакансия, на которую совершался отклик, заархивирована.
       *   * `chat_archived` — отклик/приглашение заархивировано.
       *   * `topic_archived` — отклик/приглашение заархивировано
       *
       * @example invalid_vacancy
       * @enum {string}
       */
      value: "invalid_vacancy" | "resume_not_found" | "already_applied" | "test_required" | "resume_visibility_conflict" | "edit_forbidden" | "application_denied" | "limit_exceeded" | "wrong_state" | "empty_message" | "too_long_message" | "inappropriate_language_message" | "resource_policy_violation_message" | "address_not_found" | "not_enough_purchased_services" | "in_a_row_limit" | "overall_limit" | "no_invitation" | "message_cannot_be_empty" | "disabled_by_employer" | "resume_deleted" | "archived" | "chat_archived" | "topic_archived";
    };
    /** Резюме, сгруппированные по возможности отклика */
    ResumesByStatusResponse: {
      /** @description Список резюме, уже использованных для отклика на данную вакансию */
      already_applied: components["schemas"]["ResumesSuitableResumeItem"][];
      counters?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesByStatusCounters"] | null;
      /** @description Список неопубликованных резюме (в [статусе](#tag/Rezyume.-Prosmotr-informacii/Status-rezyume) `not_published` или `blocked`) */
      not_published: components["schemas"]["ResumesSuitableResumeItem"][];
      /** @description Список резюме, которыми можно откликнуться на данную вакансию */
      suitable: components["schemas"]["ResumesSuitableResumeItem"][];
      /** @description Список резюме, которыми невозможно откликнуться на данную вакансию (например, из-за конфликтующих настроек видимости) */
      unavailable: components["schemas"]["ResumesSuitableResumeItem"][];
    };
    /**
     * Количество резюме
     * @description Количество резюме в списках
     */
    ResumesByStatusCounters: {
      /** @description Количество резюме, уже использованных для отклика на данную вакансию */
      already_applied: number;
      /** @description Количество неопубликованных резюме (в [статусе](#tag/Rezyume.-Prosmotr-informacii/Status-rezyume) `not_published` или `blocked`) */
      not_published: number;
      /** @description Количество резюме, которыми можно откликнуться на данную вакансию */
      suitable: number;
      /** @description Количество резюме, которыми невозможно откликнуться на данную вакансию (например, из-за конфликтующих настроек видимости) */
      unavailable: number;
    };
    /**
     * Не найдено
     * @description Информация о возникших ошибках
     */
    ErrorsEmployerBlacklistedNotFoundErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsEmployerBlacklistedNotFoundError"][];
    };
    /** Ошибка */
    ErrorsEmployerBlacklistedNotFoundError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example employers_blacklist
       * @enum {string}
       */
      type: "employers_blacklist";
      /**
       * @description Название поля с ошибкой. Возможные значения:
       * * `not_found` — работодатель для добавления в список не найден
       *
       * @example not_found
       * @enum {string}
       */
      value: "not_found";
    };
    /** Результаты поиска резюме */
    ResumesSearchForResumesResponse: components["schemas"]["_IncludesPagination"] & components["schemas"]["ResumesSearchForResumesItems"];
    /** Найденные резюме */
    ResumesSearchForResumesItems: {
      /** @description Массив найденных резюме */
      items: components["schemas"]["ResumesSearchForResumesItem"][];
    };
    /** Найденное резюме */
    ResumesSearchForResumesItem: components["schemas"]["ResumesSearchForEmployerAndApplicant"];
    /** Найденное резюме для соискателя и работодателя */
    ResumesSearchForEmployerAndApplicant: components["schemas"]["ResumeResumeShort"] & components["schemas"]["ResumeObjectsLastNegotiations"] & components["schemas"]["ResumesSearchForResumesPrivateFields"] & {
      /** @description Для получения данных нужно передать параметр `with_job_search_status=true` */
      job_search_status?: components["schemas"]["_IncludesIdNameLastChangeTime"];
      /** @description Ссылка на резюме */
      url?: string;
    };
    /** Сокращенное представление резюме */
    ResumeResumeShort: components["schemas"]["ResumeResumeProfile"] & components["schemas"]["ResumeResumeShortAdditionalFields"];
    /** Сокращенное представление резюме */
    ResumeResumeProfile: components["schemas"]["ResumeResumeNano"] & ({
      /** @description Возраст */
      age?: number | null;
      area?: components["schemas"]["ResumeObjectsArea"];
      /** @description Доступен ли просмотр контактной информации в резюме текущему работодателю */
      can_view_full_info?: boolean | null;
      /** @description Список сертификатов соискателя */
      certificate: components["schemas"]["ResumeObjectsCertificate"][];
      /** @description Дата и время создания резюме */
      created_at: string;
      /** @description Ссылки для скачивания резюме в разных форматах */
      download: components["schemas"]["ResumeObjectsDownload"];
      /**
       * @description Образование соискателя.
       *
       * Особенности сохранения образования:
       *
       * * Если передать и высшее и среднее образование и уровень образования "средний", то сохранится только среднее образование.
       * * Если передать и высшее и среднее образование и уровень образования "высшее", то сохранится только высшее образование
       */
      education: components["schemas"]["ResumeObjectsEducation"];
      /** @description Опыт работы */
      experience: components["schemas"]["ResumeObjectsExperience"][];
      /** @description Имя */
      first_name?: string | null;
      gender?: components["schemas"]["ResumeObjectsGender"];
      /** @description Справочник [Список скрытых полей](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#hidden-fields). Возможные значения элементов приведены в поле `resume_hidden_fields` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      hidden_fields: components["schemas"]["_IncludesIdName"][];
      /** @description Фамилия */
      last_name?: string | null;
      /**
       * @description Выделено ли резюме в поиске
       * @default false
       */
      marked?: boolean;
      /** @description Отчество */
      middle_name?: string | null;
      /** @description Ресурс, на котором было размещено резюме */
      platform?: components["schemas"]["_IncludesId"];
      salary?: components["schemas"]["ResumeObjectsSalaryProperties"];
      total_experience?: components["schemas"]["ResumeObjectsTotalExperience"];
      /** @description Дата и время обновления резюме */
      updated_at: string;
    });
    /** Опыт работы в организации */
    ResumeObjectsExperience: WithRequired<components["schemas"]["ResumeObjectsExperienceProperties"], "start" | "position" | "industries">;
    /**
     * Город
     * @description Город проживания. Элемент справочника [areas](#tag/Obshie-spravochniki/operation/get-areas)
     */
    ResumeObjectsArea: components["schemas"]["_IncludesIdNameUrl"] | components["schemas"]["_IncludesNullableObject"] | null;
    /**
     * Пол соискателя
     * @description Пол соискателя. Возможные значения перечислены в поле `gender` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
     */
    ResumeObjectsGender: components["schemas"]["_IncludesIdName"] | components["schemas"]["_IncludesNullableObject"] | null;
    /** Дополнительные поля сокращенного представления резюме */
    ResumeResumeShortAdditionalFields: {
      /** @description Дополнительные действия */
      actions: components["schemas"]["ResumeObjectsActions"];
      /** @description Добавлено ли резюме в избранные */
      favorited: boolean;
      /** @description Выделено ли резюме в поиске */
      marked?: boolean;
      /** @description Краткая история откликов/приглашений по резюме */
      negotiations_history: components["schemas"]["ResumeObjectsNegotiationsHistoryUrl"];
      /** @description Информация о владельце резюме */
      owner: components["schemas"]["ResumeObjectsOwner"];
      /** @description Фотография пользователя */
      photo?: components["schemas"]["ResumeObjectsPhoto"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Теги к резюме */
      tags?: components["schemas"]["_IncludesId"][];
      /** @description Было ли резюме уже просмотрено работодателем */
      viewed: boolean;
    };
    /** Действия с резюме */
    ResumeObjectsActions: components["schemas"]["ResumeObjectsActionsForOwner"] & {
      download_with_contact?: components["schemas"]["ResumeObjectsOneOfDownloadOrNullableObject"];
      get_with_contact?: components["schemas"]["ResumeObjectsOneOfUrlOrNullableObject"];
    };
    /**
     * Ссылка для получения резюме с контактами
     * @description Ссылка для получения резюме с контактами (происходит трата услуги). По ссылке возвращается объект аналогичный [просмотру резюме](#tag/Prosmotr-rezyume/operation/get-resume). Отображается, если у работодателя есть подходящая оплаченная услуга открытия контактов и контакты резюме еще не открыты
     */
    ResumeObjectsOneOfUrlOrNullableObject: components["schemas"]["_IncludesUrl"] | components["schemas"]["_IncludesNullableObject"] | null;
    /**
     * Ссылки для скачивания резюме с контактами
     * @description Ссылки для скачивания резюме с контактами (происходит трата услуги) в нескольких форматах ([подробнее](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#download-links)). Отображаются, если у работодателя есть подходящая оплаченная услуга открытия контактов и контакты резюме еще не открыты
     */
    ResumeObjectsOneOfDownloadOrNullableObject: components["schemas"]["ResumeObjectsDownload"] | components["schemas"]["_IncludesNullableObject"] | null;
    /** История откликов/приглашений */
    ResumeObjectsNegotiationsHistoryUrl: {
      /** @description URL, на который необходимо сделать GET-запрос, чтобы получить [подробную историю откликов/приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-resume-negotiations-history) по данному резюме */
      url: string;
    };
    /** Владелец резюме */
    ResumeObjectsOwner: {
      /** @description Раздел [Комментарии к владельцу резюме](#tag/Kommentarii-k-soiskatelyu/operation/get-applicant-comments-list) */
      comments: components["schemas"]["ResumeObjectsOwnerComments"];
      /** @description Идентификатор владельца резюме */
      id: string;
    };
    /** Комментарии о владельце резюме */
    ResumeObjectsOwnerComments: {
      /** @description Информация о количестве комментариев */
      counters: components["schemas"]["ResumeObjectsOwnerCommentsCounters"];
      /** @description URL, на который нужно сделать GET-запрос, чтобы получить список комментариев */
      url: string;
    };
    /** Количество комментариев */
    ResumeObjectsOwnerCommentsCounters: {
      /** @description Общее количество комментариев */
      total: number;
    };
    /** Приватные поля при поиске резюме */
    ResumesSearchForResumesPrivateFields: Record<string, never>;
    /** Объект с идентификатором, названием и временем последнего изменения */
    _IncludesIdNameLastChangeTime: components["schemas"]["_IncludesIdName"] & {
      /** @description Время последнего изменения */
      last_change_time?: string;
    };
    /** Последний статус в истории откликов/приглашений */
    ResumeObjectsLastNegotiations: {
      /** @description Информация о последнем статусе в истории откликов/приглашений */
      last_negotiation?: components["schemas"]["ResumesNegotiationNano"] | components["schemas"]["_IncludesNullableObject"] | null;
    };
    /** Базовая информация об отклике/приглашении */
    ResumesNegotiationNano: {
      /** @description Дата изменения состояния отклика/приглашения */
      created_at: string;
      employer_state: Record<string, never> & components["schemas"]["_IncludesIdName"];
    };
    /**
     * Резюме
     * @description Информация о резюме
     */
    ResumeResumeViewResponse: components["schemas"]["ResumeResumeForEmployer"] | components["schemas"]["ResumeResumeForApplicant"];
    /** Информация о резюме для работодателя */
    ResumeResumeForEmployer: components["schemas"]["ResumeResumeFull"] & components["schemas"]["ResumeEmployerFields"];
    /** Полное представление резюме */
    ResumeResumeFull: components["schemas"]["ResumeResumeProfile"] & ({
      /** @description День рождения (в формате `ГГГГ-ММ-ДД`) */
      birth_date?: string | null;
      /** @description Готовность к командировкам. Элемент справочника [business_trip_readiness](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      business_trip_readiness: components["schemas"]["_IncludesIdName"];
      /** @description Список гражданств соискателя. Элементы [справочника регионов](#tag/Obshie-spravochniki/operation/get-areas) */
      citizenship: components["schemas"]["_IncludesIdNameUrl"][];
      /** @description Список контактов соискателя */
      contact: components["schemas"]["_IncludesContact"][];
      creds?: components["schemas"]["CredsResumeCreds"];
      /** @description Список категорий водительских прав соискателя */
      driver_license_types: components["schemas"]["ResumeObjectsDriverLicenseTypes"][];
      /** @deprecated */
      employment?: components["schemas"]["_IncludesIdName"];
      /** @description Список подходящих соискателю типов занятостей. Элементы справочника [employment](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      employments: components["schemas"]["_IncludesIdName"][];
      /** @description Наличие личного автомобиля у соискателя */
      has_vehicle?: boolean | null;
      /** @description Список языков, которыми владеет соискатель. Элементы справочника [languages](#tag/Obshie-spravochniki/operation/get-languages) */
      language: components["schemas"]["_IncludesLanguageLevel"][];
      metro?: components["schemas"]["ResumeObjectsOneOfMetroStation"];
      /** @description Платные услуги по резюме */
      paid_services: components["schemas"]["ResumeObjectsPaidServices"][];
      /** @description Массив объектов профролей */
      professional_roles?: components["schemas"]["_IncludesIdName"][] | null;
      /** @description Список рекомендаций */
      recommendation: components["schemas"]["ResumeObjectsRecommendation"][];
      /** @description Возможность переезда */
      relocation: components["schemas"]["ResumeObjectsRelocationPublic"];
      /** @description Язык, на котором составлено резюме (локаль). Элемент справочника [локали резюме](#tag/Obshie-spravochniki/operation/get-locales) */
      resume_locale: components["schemas"]["_IncludesIdName"];
      /** @deprecated */
      schedule: components["schemas"]["_IncludesIdName"];
      /** @description Список подходящих соискателю графиков работы. Элементы справочника [schedule](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      schedules: components["schemas"]["_IncludesIdName"][];
      /** @description Профили в соц. сетях и других сервисах */
      site: components["schemas"]["ResumeObjectsSite"][];
      /** @description Ключевые навыки (список уникальных строк) */
      skill_set: string[];
      /** @description Дополнительная информация, описание навыков в свободной форме */
      skills?: string | null;
      /** @description Теги к резюме */
      tags?: components["schemas"]["_IncludesId"][];
      /** @description Желательное время в пути до работы. Элемент справочника [travel_time](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      travel_time: components["schemas"]["_IncludesIdName"];
      /** @description Список регионов, в которых соискатель имеет разрешение на работу. Элементы [справочника регионов](#tag/Obshie-spravochniki/operation/get-areas) */
      work_ticket: components["schemas"]["_IncludesIdNameUrl"][];
    });
    /** Станция метро */
    ResumeObjectsOneOfMetroStation: components["schemas"]["ResumeObjectsMetroStation"] | components["schemas"]["_IncludesNullableObject"] | null;
    /**
     * Станция метро
     * @description Ближайшая станция метро. Элемент справочника [metro](#tag/Obshie-spravochniki/operation/get-metro-stations)
     */
    ResumeObjectsMetroStation: {
      /** @description Идентификатор станции метро */
      id: string;
      /** @description Широта */
      lat: number;
      /** @description Линия метро */
      line: components["schemas"]["ResumeObjectsMetroLine"];
      /** @description Долгота */
      lng: number;
      /** @description Название станции метро */
      name?: string;
      /** @description Порядковый номер станции в линии метро */
      order: number;
    };
    /** Линия метро */
    ResumeObjectsMetroLine: {
      /** @description Цвет линии в HEX-формате `RRGGBB` (от `000000` до `FFFFFF`) */
      hex_color: string;
      /** @description Идентификатор линии */
      id: string;
      /** @description Название линии */
      name: string;
    };
    /** Креды */
    CredsResumeCreds: components["schemas"]["CredsCreds"] | components["schemas"]["_IncludesNullableObject"] | null;
    /**
     * Общее тело кредов, включает в себя список вопросов, ответов, и ответы пользователя
     * @description Документы, подтверждающие наличие у соискателя опыта или квалификации для выполнения определенного вида деятельности.
     * Зависят от профессиональных ролей резюме
     */
    CredsCreds: {
      /** Ответы на креды, передается в виде answer_id -> object */
      answers?: {
        [key: string]: components["schemas"]["CredsAnswers"];
      };
      /** Выбранные для кредов ответы пользователя */
      question_to_answer_map?: {
        [key: string]: string[];
      };
      /** Тело вопроса в виде question_id -> object */
      questions?: {
        [key: string]: components["schemas"]["CredsQuestions"];
      };
    };
    /** Ответы */
    CredsAnswers: {
      /** @description Группа данного ответа, positive, negative, neutral */
      answer_group?: string;
      /** @description Идентификатор ответа (совпадает с ключом объекта) */
      answer_id?: string;
      /** @description Вопросы которые нужно задать после использования пользователем данного ответа */
      ask_questions_after?: string[];
      /** @description Описание ответа */
      description?: string | null;
      /** @description Текст ответа который можно использовать для отображения без самого вопроса */
      positive_title?: string;
      /** @description Нужно ли пропускать данный ответ на форме с отображением кредов пользователя */
      skip_at_result?: boolean;
      /** @description Текст ответа который нужно отрисовать для сбора ответов от пользователя */
      title?: string;
    };
    /** Вопросы */
    CredsQuestions: {
      /** @description Описание вопроса */
      description?: string | null;
      /** @description Показан ли вопрос изначально, актуально для динамических вопросов */
      is_active?: boolean;
      /** @description Возможные ответы на вопрос, гарантировано придут в поле answers */
      possible_answers?: string[];
      /** @description Идентификатор вопроса (совпадает с ключом объекта) */
      question_id?: string;
      /** @description Текст вопроса отображаемый на форме */
      question_title?: string;
      /** @description Возможность мульти выбора ответов на данный вопрос "single_choice" / "multi_select" */
      question_type?: string;
      /** @description Обязателен ли вопрос для получения ответа */
      required?: boolean;
      /** @description Пропускать ли текст вопроса на просмотре, если false - ответы внутри placeholder, если true - просто перечисляем без текста вопроса */
      skip_title_at_view?: boolean;
      /** @description Текст вопроса на просмотре */
      view_title?: string | null;
    };
    /** Контакт */
    _IncludesContact: WithRequired<components["schemas"]["_IncludesContactProperties"], "type" | "value" | "preferred">;
    /** Платная услуга */
    ResumeObjectsPaidServices: {
      /** @description Активна ли в данный момент услуга */
      active: boolean;
      /** @description Время окончания действия услуги, если услуга активна */
      expires?: string;
      /** @description Идентификатор услуги */
      id: string;
      /** @description Название услуги */
      name: string;
    };
    /** Язык и уровень владения */
    _IncludesLanguageLevel: WithRequired<components["schemas"]["_IncludesLanguageProperties"], "level">;
    /** Поля, возвращаемые для работодателя */
    ResumeEmployerFields: {
      /** @description Дополнительные действия */
      actions: components["schemas"]["ResumeObjectsActions"];
      /** @description Наличие права просмотра контактной информации в резюме */
      can_view_full_info?: boolean | null;
      /** @description Добавлено ли резюме в избранные */
      favorited: boolean;
      /**
       * @description Для получения данных нужно передать параметр `with_job_search_status=true`.
       * Возможные значения перечислены в поле `job_search_statuses_employer` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
       */
      job_search_status?: components["schemas"]["_IncludesIdNameLastChangeTime"];
      /** @description Краткая история откликов/приглашений по резюме */
      negotiations_history: components["schemas"]["ResumeObjectsNegotiationsHistoryForEmployer"];
      /** @description Информация о владельце резюме */
      owner: components["schemas"]["ResumeObjectsOwner"];
      paid_services: components["schemas"]["ResumeObjectsEmployerPaidServices"];
      photo?: components["schemas"]["ResumeObjectsOneOfPhotoNoId"];
      /** @description Список изображений в портфолио пользователя */
      portfolio: components["schemas"]["ResumeObjectsPortfolioNoId"][];
    };
    /** Портфолио */
    ResumeObjectsPortfolioNoId: {
      /** @description Описание изображения в портфолио */
      description?: string;
      /** @description URL среднего по размеру изображения. Изображение по данному url доступно ограниченное время, после получения ответа. Приложение должно быть готово к тому, что на запрос изображения вернётся `404 Not Found` */
      medium: string;
      /** @description URL уменьшенного изображения. Изображение по данному url доступно ограниченное время, после получения ответа. Приложение должно быть готово к тому, что на запрос изображения вернётся `404 Not Found` */
      small: string;
    };
    /**
     * Платные услуги по резюме
     * @description Платные услуги по резюме для работодателя
     *
     * Работодателю может быть предложен список платных услуг по резюме.
     *
     * Например, если полные данные по резюме недоступны, то будет выдано предложение покупки рекомендованной услуги, чтобы такой доступ получить
     */
    ResumeObjectsEmployerPaidServices: {
      /** @description Примечание к использованию услуги */
      description?: string;
      /** @description Идентификатор услуги */
      id: string;
      /** @description Название услуги */
      name: string;
      /** @description Прайс на услугу */
      price_list: {
        /** @description Ссылка на сайт, по которой доступен полный прайс на услугу */
        alternate_url: string;
      };
      /** @description Описание быстрой покупки услуги, если доступно */
      quick_purchase?: {
        /** @description Ссылка на сайт, по которой будет предложено купить услугу */
        alternate_url: string;
        /** @description Валюта услуги */
        currency: {
          /** @description Краткое обозначение */
          abbr: string;
          /** @description Код */
          code: string;
          /** @description Название */
          name: string;
        };
        /** @description Название действия по заказу услуги */
        name: string;
        /** @description Цена услуги */
        price: number;
      };
    }[];
    /**
     * Фотография
     * @description Фотография пользователя
     */
    ResumeObjectsOneOfPhotoNoId: components["schemas"]["ResumeObjectsPhotoNoId"] | components["schemas"]["_IncludesNullableObject"] | null;
    /** История откликов/приглашений */
    ResumeObjectsNegotiationsHistoryForEmployer: components["schemas"]["ResumeObjectsNegotiationsHistoryUrl"] & ({
      /** @description Массив вакансий */
      vacancies?: components["schemas"]["ResumesResumeNegotiationsHistoryVacancy"][] | null;
    });
    /** Вакансия, связанная с резюме */
    ResumesResumeNegotiationsHistoryVacancy: {
      /** @description Признак того, что вакансия находится в архиве */
      archived: boolean;
      /** @description Признак того, что менеджер может редактировать данные вакансии, а также работать с информацией об откликах/приглашениях по этой вакансии */
      can_edit: boolean;
      /** @description Уникальный идентификатор вакансии */
      id: string;
      /** @description Список последних изменений состояний откликов/приглашений по указанному резюме и данной вакансии */
      items: components["schemas"]["ResumesResumeNegotiationsHistoryVacancyItem"][];
      /** @description URL, на который необходимо делать GET-запрос для получения [списка сообщений в отклике/приглашении](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-messages). Если `can_edit` равно `false`, значение поля должно игнорироваться */
      messages_url: string;
      /** @description Название вакансии */
      name: string;
      /** @description URL, на который необходимо делать GET-запрос для получения [данных об отклике/приглашении](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-item). Если `can_edit` равно `false`, значение поля должно игнорироваться */
      negotiations_url: string;
      /** @description URL, на который необходимо делать GET-запрос для [получения данных о вакансии](#tag/Vakansii/operation/get-vacancy) */
      url: string;
    };
    /** Изменение состояния откликов/приглашений */
    ResumesResumeNegotiationsHistoryVacancyItem: components["schemas"]["ResumesNegotiationNano"] & {
      /** @description Признак того, что при изменении состояния отклика/приглашения было отправлено сообщение соискателю */
      with_message: boolean;
    };
    /** Информация о резюме для владельца */
    ResumeResumeForApplicant: components["schemas"]["ResumeResumeFull"] & components["schemas"]["ResumeStatusReadiness"] & components["schemas"]["ResumeApplicantFields"] & components["schemas"]["ResumePhotoPortfolio"] & Record<string, never>;
    /** Поля, возвращаемые для автора резюме */
    ResumeApplicantFields: {
      access: components["schemas"]["ResumeObjectsAccess"];
      /** @description Дополнительные действия */
      actions: components["schemas"]["ResumeObjectsActionsForOwner"];
      /** @description Число новых просмотров. Данный счетчик сбрасывается при получении [детальной истории просмотров](#tag/Rezyume.-Prosmotr-informacii/operation/get-resume-view-history) */
      new_views: number;
      /** @description Дата и время следующей возможной публикации/обновления. Для неопубликованных резюме возвращается `null` */
      next_publish_at?: string | null;
      /** @description Платные услуги по резюме для автора */
      paid_services: components["schemas"]["ResumeObjectsPaidServices"][];
      /** @description Число просмотров резюме */
      total_views: number;
      /** @description URL, по которому необходимо сделать GET-запрос для получения [детальной истории просмотров](#tag/Rezyume.-Prosmotr-informacii/operation/get-resume-view-history) */
      views_url: string;
    };
    /** Портфолио и фото пользователя */
    ResumePhotoPortfolio: {
      photo?: components["schemas"]["ResumeObjectsOneOfPhoto"];
      /** @description Список изображений в портфолио пользователя */
      portfolio: components["schemas"]["ResumeObjectsPortfolio"][];
    };
    /**
     * Фотография
     * @description Фотография пользователя
     */
    ResumeObjectsOneOfPhoto: components["schemas"]["ResumeObjectsPhoto"] | components["schemas"]["_IncludesNullableObject"] | null;
    /** Сгенерированный код */
    ResumePhoneGenerateCodeGenerateCode: {
      /**
       * @description Ближайшая возможная повторная отправка кода в секундах
       * @example 15
       */
      can_request_code_again_in?: string;
      /**
       * @description Тип сгенерированного сообщения
       * @example sms
       */
      notification_type?: string;
    };
    /**
     * Условия заполнения полей
     * @description Условия заполнения полей при [публикации вакансии](#tag/Upravlenie-vakansiyami/operation/publish-vacancy)
     */
    VacanciesVacancyConditions: {
      accept_handicapped?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      accept_incomplete_resumes?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      accept_kids?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      accept_temporary?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      address?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsAddressCondition"] | null;
      allow_messages?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      area?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      billing_type?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      branded_template?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      code?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] | null;
      contacts?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsContactsCondition"] | null;
      custom_employer_name?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] | null;
      department?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] | null;
      description?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] | null;
      driver_license_types?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredCountWithTitle"] | null;
      employment?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      experience?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      key_skills?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredCountWithTitle"] | null;
      languages?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredCountWithTitle"] | null;
      manager?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      name?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] | null;
      professional_roles?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredCountWithTitle"] | null;
      response_letter_required?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      response_notifications?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      response_url?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsResponseUrlCondition"] | null;
      salary?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsSalaryCondition"] | null;
      schedule?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      test?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsTestCondition"] | null;
      type?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      working_days?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredCountWithTitle"] | null;
      working_time_intervals?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredCountWithTitle"] | null;
      working_time_modes?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredCountWithTitle"] | null;
      [key: string]: unknown;
    };
    /** Условия заполнения контактов */
    VacanciesVacancyConditionFieldsContactsCondition: components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] & {
      fields?: components["schemas"]["VacanciesVacancyConditionFieldsContactFields"];
    };
    /** Условия для поля */
    VacanciesVacancyConditionFieldsRequiredWithTitle: {
      /** @description Является ли поле необходимым? */
      required?: boolean | null;
    };
    /** Условия для полей */
    VacanciesVacancyConditionFieldsContactFields: ({
      email?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] | null;
      name?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] | null;
      phones?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsPhoneCondition"] | null;
    }) | null;
    /** Условия для поля */
    VacanciesVacancyConditionFieldsRequiredLengthWithTitle: components["schemas"]["VacanciesVacancyConditionFieldsMaxMinLength"] & components["schemas"]["VacanciesVacancyConditionFieldsRequired"];
    /** Необходимость поля */
    VacanciesVacancyConditionFieldsRequired: {
      /** @description Является ли поле необходимым? */
      required?: boolean | null;
    };
    /** Длина текстовых полей */
    VacanciesVacancyConditionFieldsMaxMinLength: {
      /** @description Максимальная длина для текстовых полей */
      max_length?: number | null;
      /** @description Минимальная длина для текстовых полей */
      min_length?: number | null;
    };
    /** Условия заполнения телефона */
    VacanciesVacancyConditionFieldsPhoneCondition: components["schemas"]["VacanciesVacancyConditionFieldsRequiredCountWithTitle"] & {
      fields?: components["schemas"]["VacanciesVacancyConditionFieldsPhoneFields"];
    };
    /** Условия для полей */
    VacanciesVacancyConditionFieldsPhoneFields: ({
      city?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsCityCondition"] | null;
      comment?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] | null;
      country?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsCountryCondition"] | null;
      formatted?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsFormattedCondition"] | null;
      number?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsNumberCondition"] | null;
    }) | null;
    /** Условия заполнения страны */
    VacanciesVacancyConditionFieldsCountryCondition: components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] & components["schemas"]["VacanciesVacancyConditionFieldsRegexp"];
    /** Регулярное выражение, которому должно отвечать значение поля */
    VacanciesVacancyConditionFieldsRegexp: {
      /** @description Регулярное выражение, которому должно отвечать значение поля */
      regexp?: string | null;
    };
    /** Условия заполнения города */
    VacanciesVacancyConditionFieldsCityCondition: components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] & components["schemas"]["VacanciesVacancyConditionFieldsRegexp"];
    /** Условия заполнения форматированного телефона */
    VacanciesVacancyConditionFieldsFormattedCondition: components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] & components["schemas"]["VacanciesVacancyConditionFieldsRegexp"];
    /** Условия заполнения номера */
    VacanciesVacancyConditionFieldsNumberCondition: components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] & components["schemas"]["VacanciesVacancyConditionFieldsRegexp"];
    /** Условия для поля */
    VacanciesVacancyConditionFieldsRequiredCountWithTitle: components["schemas"]["VacanciesVacancyConditionFieldsMaxMinCount"] & components["schemas"]["VacanciesVacancyConditionFieldsRequired"];
    /** Условия по количеству для полей */
    VacanciesVacancyConditionFieldsMaxMinCount: {
      /** @description Максимальное количество объектов для полей, в которых передается список. Если `null` — количество неограниченно */
      max_count?: number | null;
      /** @description Минимальное количество объектов для полей, в которых передается список */
      min_count?: number | null;
    };
    /** Условия заполнения зарплаты */
    VacanciesVacancyConditionFieldsSalaryCondition: components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] & {
      fields?: components["schemas"]["VacanciesVacancyConditionFieldsSalaryFields"];
    };
    /** Условия для полей */
    VacanciesVacancyConditionFieldsSalaryFields: ({
      currency?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      from?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      gross?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
      to?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] | null;
    }) | null;
    /** Условия заполнения адреса */
    VacanciesVacancyConditionFieldsAddressCondition: components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] & {
      fields?: components["schemas"]["VacanciesVacancyConditionFieldsAddressFields"];
    };
    /** Условия для полей */
    VacanciesVacancyConditionFieldsAddressFields: ({
      show_metro_only?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequired"] | null;
    }) | null;
    /** Условия заполнения теста */
    VacanciesVacancyConditionFieldsTestCondition: components["schemas"]["VacanciesVacancyConditionFieldsRequiredWithTitle"] & {
      fields?: components["schemas"]["VacanciesVacancyConditionFieldsTestFields"];
    };
    /** Условия для полей */
    VacanciesVacancyConditionFieldsTestFields: ({
      required?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesVacancyConditionFieldsRequired"] | null;
    }) | null;
    /** Условия заполнения урла */
    VacanciesVacancyConditionFieldsResponseUrlCondition: components["schemas"]["VacanciesVacancyConditionFieldsRequiredLengthWithTitle"] & components["schemas"]["VacanciesVacancyConditionFieldsRegexp"];
    /** Вакансии в архиве */
    VacanciesArchivedVacancyListResponse: components["schemas"]["_IncludesPagination"] & components["schemas"]["VacanciesArchivedVacancyList"];
    /** Вакансии в архиве */
    VacanciesArchivedVacancyList: {
      /** @description Массив вакансий в архиве */
      items: components["schemas"]["VacanciesVacancyArchived"][];
    };
    /** Представление вакансии в архиве */
    VacanciesVacancyArchived: components["schemas"]["VacanciesVacancyShort"] & components["schemas"]["VacanciesVacancyArchivedFields"];
    /** Сокращенное представление вакансии */
    VacanciesVacancyShort: {
      address?: components["schemas"]["VacancyAddressRawOutput"];
      /** @description Ссылка на представление вакансии на сайте */
      alternate_url: string;
      /** @description Ссылка на отклик на вакансию на сайте */
      apply_alternate_url: string;
      /** @description Находится ли данная вакансия в архиве */
      archived: boolean;
      area: components["schemas"]["_IncludesArea"];
      department: components["schemas"]["VacanciesObjectsDepartment"];
      employer: components["schemas"]["VacanciesObjectsEmployer"];
      /** @description Информация о наличии прикрепленного тестового задании к вакансии */
      has_test: boolean;
      /** @description Идентификатор вакансии */
      id: string;
      /** @description Название вакансии */
      name: string;
      /** @description Является ли данная вакансия премиум-вакансией */
      premium: boolean;
      /** @description Дата и время публикации вакансии */
      published_at: string;
      /** @description Возвращает связи соискателя с вакансией. Значения из поля `vacancy_relation` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      relations: components["schemas"]["VacancyRelationItem"][];
      /** @description Обязательно ли заполнять сообщение при отклике на вакансию */
      response_letter_required: boolean;
      /** @description URL отклика для прямых вакансий (`type.id=direct`) */
      response_url?: string | null;
      salary: components["schemas"]["VacancySalary"];
      /** @description Отображать ли лого для вакансии в поисковой выдаче */
      show_logo_in_search?: boolean | null;
      type: components["schemas"]["VacancyTypeOutput"];
      /** @description URL вакансии */
      url: string;
    };
    /**
     * Объект
     * @description Информация о компании работодателя
     */
    VacanciesObjectsEmployer: components["schemas"]["VacanciesEmployerPublic"] | components["schemas"]["_IncludesNullableObject"] | null;
    /**
     * Адрес
     * @description Адрес
     */
    VacancyAddressRawOutput: ({
      /** @description Дом */
      building?: string | null;
      /** @description Город */
      city?: string | null;
      /** @description Описание */
      description?: string | null;
      /** @description Адрес из [списка доступных адресов работодателя](https://api.hh.ru/openapi/redoc#tag/Adresa-rabotodatelya/operation/get-employer-addresses) */
      id?: string | null;
      /** @description Широта */
      lat?: number | null;
      /** @description Долгота */
      lng?: number | null;
      metro?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["_IncludesMetroStation"] | null;
      metro_stations?: components["schemas"]["_IncludesMetroStation"][];
      /** @description Полный адрес */
      raw?: string | null;
      /** @description Улица */
      street?: string | null;
    }) | null;
    /**
     * Объект
     * @description Департамент
     */
    VacanciesObjectsDepartment: components["schemas"]["VacancyDepartmentOutput"] | components["schemas"]["_IncludesNullableObject"] | null;
    /** Департамент */
    VacancyDepartmentOutput: (components["schemas"]["VacancyDepartment"] & {
      /** @description Название департамента работодателя */
      name?: string;
    }) | null;
    /** Поля для архивной вакансии */
    VacanciesVacancyArchivedFields: {
      /** @description Дата и время архивации вакансии */
      archived_at: string;
      counters: components["schemas"]["VacancyCountersForArchivedOrHidden"];
      /** @description Дата и время публикации вакансии */
      created_at: string;
      /**
       * @description Расстояние в метрах между центром сортировки (заданной параметрами `sort_point_lat`, `sort_point_lng`) и указанным в вакансии адресом. В случае, если в адресе указаны только станции метро, выдается расстояние между центром сортировки и средней геометрической точкой указанных станций.
       *
       * Значение `sort_point_distance` выдается только в случае, если заданы параметры `sort_point_lat`, `sort_point_lng`, `order_by=distance`
       */
      sort_point_distance?: number | null;
    };
    /** Счетчики для вакансии */
    VacancyCountersForArchivedOrHidden: components["schemas"]["VacancyCounters"] & {
      /** @description Количество откликов и приглашений на вакансию */
      invitations_and_responses?: number;
    };
    /**
     * Счетчики
     * @description Число откликов на вакансию.
     * Доступно для соискательской авторизации и авторизации приложения при использовании параметра `responses_count_enabled=true`
     */
    VacancyCounters: {
      /** @description Количество откликов на вакансию с момента публикации */
      responses?: number;
      /** @description Количество откликов на вакансию с момента создания */
      total_responses?: number;
    };
    /** Скрытые работодатели */
    EmployersEmployersBlacklistedResponse: components["schemas"]["_IncludesPagination"] & components["schemas"]["EmployersEmployersBlacklisted"];
    /** Чёрный список работодателей */
    EmployersEmployersBlacklisted: {
      /** @description Массив скрытых работодателей */
      items?: components["schemas"]["EmployersEmployersBlacklistedItem"][];
      /** @description Превышено ли максимальное количество элементов в списке */
      limit_reached?: boolean;
    };
    /** Информация о скрытом работодателе */
    EmployersEmployersBlacklistedItem: {
      /** @description Ссылка на представление компании на сайте */
      alternate_url?: string | null;
      /** @description Идентификатор компании */
      id?: string | null;
      /** @description Ссылки на логотипы работодателя разных размеров */
      logo_urls?: components["schemas"]["_IncludesLogoUrls"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Название компании */
      name: string;
      /** @description Количество открытых вакансий у работодателя */
      open_vacancies: number;
      /** @description URL, на который нужно сделать GET-запрос, чтобы получить информацию о компании */
      url?: string | null;
      /** @description Ссылка на поисковую выдачу вакансий данной компании */
      vacancies_url?: string | null;
    };
    /** Проверка наличия дубликатов вакансии */
    VacancyDuplicates: {
      /** @description Общее количество дубликатов вакансии */
      found: number;
      /** @description Существуют ли дубликаты вакансии */
      has_duplicates: boolean;
      /** @description Список идентификаторов дубликатов вакансии */
      items: number[];
    };
    /** Список работодателей, для которых резюме должно быть видимо или скрыто */
    ResumesGetResumeVisibilityListResponse: components["schemas"]["_IncludesPagination"] & components["schemas"]["ResumesGetResumeVisibilityListProperties"];
    /** Список свойств видимости резюме */
    ResumesGetResumeVisibilityListProperties: {
      /** @description Список работодателей */
      items: components["schemas"]["ResumesGetResumeVisibilityListItem"][];
      /** @description Максимальное количество элементов в списке */
      limit: number;
    };
    /** Список работодателей */
    ResumesGetResumeVisibilityListItem: {
      /** @description Ссылка на описание работодателя на сайте */
      alternate_url: string;
      /** @description Идентификатор работодателя */
      id: string;
      /** @description Ссылка на логотип работодателя. Клиент должен предусмотреть вероятность отсутствия ресурса по указанной ссылке */
      logo_urls: components["schemas"]["_IncludesLogoUrls90"];
      /** @description Название работодателя */
      name: string;
      /** @description Ссылка на детальное описание работодателя */
      url: string;
    };
    /** Ссылка на логотип */
    _IncludesLogoUrls90: {
      /** @description URL логотипа с размером менее 90px по меньшей стороне */
      90: string;
    };
    /** Успешный ответ */
    NegotiationsNegotiationGetResponse: components["schemas"]["NegotiationsApplicantNegotiation"] | components["schemas"]["NegotiationsEmployerNegotiation"];
    /** Информация об отклике/приглашении (работодатель) */
    NegotiationsEmployerNegotiation: components["schemas"]["NegotiationsObjectsTopicItemCommon"] & components["schemas"]["NegotiationsNegotiationCommonFields"] & ({
      /** @description Короткое представление резюме */
      resume?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["NegotiationsObjectsEmployerTopicResume"] | null;
      /** @description Короткое представление вакансии */
      vacancy?: components["schemas"]["VacanciesNegotiationsVacancyShort"] | components["schemas"]["_IncludesNullableObject"] | null;
    });
    /** Общие поля отклика/приглашения */
    NegotiationsNegotiationCommonFields: {
      /** @description Возможные [действия по отклику/приглашению](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md#actions-info) */
      actions?: components["schemas"]["VacancyNegotiationActions"][];
      employer_state?: components["schemas"]["EmployersEmployersState"];
      /** @description Информация об этапе воронки найма */
      funnel_stage?: components["schemas"]["EmployersFunnelStage"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Шаблоны писем */
      templates?: components["schemas"]["VacancyTemplates"][];
      /** @description Результат выполнения [теста](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-test-results), прикрепленного к вакансии */
      test_result?: (components["schemas"]["_IncludesNullableObject"] | components["schemas"]["SkillVerificationsTestResultWithUrl"]) | null;
    };
    /** Информация о состоянии */
    EmployersEmployersState: {
      /** @description Идентификатор состояния отклика */
      id: string;
      /** @description Название состояния */
      name: string;
    };
    /** Информация об этапе воронки найма */
    EmployersFunnelStage: {
      /** @description Идентификатор этапа воронки */
      id: string;
      state: components["schemas"]["EmployersEmployersState"];
      /** @description Информация о подстатусе воронки найма */
      substate?: components["schemas"]["EmployersFunnelSubstate"] | components["schemas"]["_IncludesNullableObject"] | null;
    };
    /** Информация о подстатусе воронки найма */
    EmployersFunnelSubstate: {
      /** @description Название подстатуса этапа, которое задал работодатель */
      name: string;
    };
    /** Шаблон */
    VacancyTemplates: {
      /** @description Идентификатор шаблона */
      id: string;
      /** @description Название шаблона */
      name: string;
      /** @description Ссылка на шаблон */
      url: string;
    };
    /** Действия по отклику/приглашению */
    VacancyNegotiationActions: {
      /** @description Обязательные и дополнительные аргументы для запроса */
      arguments: components["schemas"]["VacancyArguments"][];
      /** @description Возможно ли совершить действие */
      enabled: boolean;
      /** @description Идентификатор действия */
      id: string;
      /** @description HTTP метод, который необходимо выполнить */
      method: string;
      /** @description Название действия */
      name: string;
      /** @description Документация [Работодательское состояние](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md#term-employer-state) по отклику/приглашению, которое будет установлено после совершения действия. Если действие не меняет состояние — `null` */
      resulting_employer_state?: components["schemas"]["_IncludesIdName"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Шаблоны писем */
      templates: components["schemas"]["VacancyTemplates"][];
      /** @description URL, на который необходимо выполнить запрос */
      url: string;
    };
    /** Аргумент для запроса */
    VacancyArguments: {
      /**
       * @description Идентификатор аргумента. Возможные значения:
       *
       * * `resume_id` — идентификатор резюме.
       * * `vacancy_id` — идентификатор вакансии.
       * * `message` — сообщение, которое будет отправлено соискателю на электронную почту. Используйте [шаблоны](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-mail-templates) для получения текстов.
       * * `send_sms` — уведомлять ли соискателя о приглашении с помощью SMS. Значение по умолчанию — `false`. Обратите внимание: в SMS-сообщении используется стандартный текст, изменить его нельзя
       * * `address_id` — идентификатор [адреса](#tag/Adresa-rabotodatelya), который будет указан в приглашении
       *
       * @enum {string}
       */
      id: "resume_id" | "vacancy_id" | "message" | "send_sms" | "address_id";
      /** @description Обязательность аргумента */
      required: boolean;
      /** @description Идентификаторы аргументов, которые необходимо приложить, если указан данный аргумент. Например, адрес является необязательным, но при его указании необходимо указать также и сообщение */
      required_arguments: components["schemas"]["_IncludesId"][];
    };
    /** Информация о результате теста со ссылками */
    SkillVerificationsTestResultWithUrl: components["schemas"]["SkillVerificationsTestResultNano"] & {
      /** @description Ссылка на результат теста на сайте */
      alternate_url: string;
      /** @description Ссылка на результат теста */
      url: string;
    };
    /**
     * Краткая информация о результате теста
     * @description Краткая информация о результате теста
     */
    SkillVerificationsTestResultNano: {
      /**
       * @description Дифференцированная оценка за тест:
       *
       * * `UNFAIR` — от 0 до 14 баллов;
       * * `FAIR` — от 15 до 44 баллов;
       * * `GOOD` — от 45 до 79 баллов;
       * * `EXCELLENT` — от 80 до 100 баллов
       *
       * @enum {string}
       */
      mark?: "UNFAIR" | "FAIR" | "GOOD" | "EXCELLENT";
      /** @description Результат прохождения теста в баллах (от 0 до 100) */
      score: number;
    };
    /** Короткое представление резюме */
    NegotiationsObjectsEmployerTopicResume: components["schemas"]["ResumeResumeShort"] & components["schemas"]["_IncludesUrl"] & {
      /**
       * @description Для получения данных нужно передать параметр `with_job_search_status=true`.
       * Возможные значения перечислены в поле `job_search_statuses_employer` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
       */
      job_search_status?: components["schemas"]["_IncludesIdNameLastChangeTime"];
    };
    /** Сокращенное представление вакансии */
    VacanciesNegotiationsVacancyShort: {
      address?: components["schemas"]["VacancyAddressRawOutput"];
      /** @description Ссылка на представление вакансии на сайте */
      alternate_url: string;
      /** @description Ссылка на отклик на вакансию на сайте */
      apply_alternate_url: string;
      /** @description Находится ли данная вакансия в архиве */
      archived: boolean;
      area: components["schemas"]["_IncludesArea"];
      /** @description Дата и время публикации вакансии */
      created_at?: string;
      department: components["schemas"]["VacanciesObjectsDepartment"];
      employer: components["schemas"]["VacanciesObjectsEmployer"];
      /** @description Информация о наличии прикрепленного тестового задании к вакансии */
      has_test: boolean;
      /** @description Идентификатор вакансии */
      id: string;
      insider_interview?: components["schemas"]["VacanciesObjectsInsiderInterview"];
      /** @description Название вакансии */
      name: string;
      /** @description Является ли данная вакансия премиум-вакансией */
      premium: boolean;
      professional_roles?: components["schemas"]["VacancyProfessionalRolesOutput"];
      /** @description Дата и время публикации вакансии */
      published_at: string;
      /** @description Обязательно ли заполнять сообщение при отклике на вакансию */
      response_letter_required: boolean;
      /** @description URL отклика для прямых вакансий (`type.id=direct`) */
      response_url?: string | null;
      salary: components["schemas"]["VacancySalary"];
      /** @description Отображать ли лого для вакансии в поисковой выдаче */
      show_logo_in_search?: boolean | null;
      /**
       * @description Расстояние в метрах между центром сортировки (заданной параметрами `sort_point_lat`, `sort_point_lng`) и указанным в вакансии адресом. В случае, если в адресе указаны только станции метро, выдается расстояние между центром сортировки и средней геометрической точкой указанных станций.
       * Значение `sort_point_distance` выдается только в случае, если заданы параметры `sort_point_lat`, `sort_point_lng`, `order_by=distance`
       */
      sort_point_distance?: number | null;
      type: components["schemas"]["VacancyTypeOutput"];
      /** @description URL вакансии */
      url: string;
    };
    /**
     * Профессиональные роли
     * @description Список профессиональных ролей
     */
    VacancyProfessionalRolesOutput: components["schemas"]["VacancyProfessionalRoleItemOutput"][];
    /** Название профессиональной роли */
    VacancyProfessionalRoleItemOutput: components["schemas"]["VacancyProfessionalRoleItem"] & {
      /** @description Название профессиональной роли */
      name?: string;
    };
    /** Общая информация об отклике/приглашении */
    NegotiationsObjectsTopicItemCommon: {
      counters?: components["schemas"]["NegotiationsObjectsCounters"];
      /** @description Дата и время создания отклика/приглашения */
      created_at: string;
      has_updates: components["schemas"]["VacancyHasUpdates"];
      /** @description Идентификатор отклика/приглашения */
      id: string;
      /**
       * @deprecated
       * @description URL, на который необходимо делать GET-запрос для получения [списка сообщений в отклике/приглашении](#tag/Perepiska-(otklikipriglasheniya)-dlya-soiskatelya/operation/get-negotiation-messages). Если `can_edit` равно `false`, значение поля должно игнорироваться
       */
      messages_url?: string;
      /**
       * @description Текущий статус переписки.
       *
       * Возможные значения приведены в поле `messaging_status` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
       */
      messaging_status: string;
      professional_roles?: components["schemas"]["VacancyProfessionalRoles"] | components["schemas"]["_IncludesNullableObject"];
      /**
       * @description Источник отклика/приглашения
       * @enum {string}
       */
      source?: "NEGOTIATION" | "PHONE_CALL" | "CHAT" | "VR" | "AUTO_INVITE";
      /**
       * @description Текущее состояние отклика/приглашения.
       *
       * Возможные значения приведены в поле `negotiations_state` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
       */
      state: components["schemas"]["_IncludesIdName"];
      /** @description Дата и время последнего обновления отклика/приглашения */
      updated_at: string;
      /** @description Был ли отклик просмотрен работодателем */
      viewed_by_opponent: boolean;
    };
    /** Счетчики */
    NegotiationsObjectsCounters: {
      /** @description Общее количество сообщений */
      messages?: number;
      /** @description Количество непрочитанных работодателем сообщений */
      unread_messages?: number;
    };
    /**
     * Обновление по данной вакансии
     * @description Есть ли в откликах/приглашениях по данной вакансии обновления, требующие внимания
     */
    VacancyHasUpdates: boolean;
    /** Информация об отклике/приглашении (соискатель) */
    NegotiationsApplicantNegotiation: components["schemas"]["NegotiationsObjectsTopicItem"] & ({
      /** @description Короткое представление резюме */
      resume?: components["schemas"]["NegotiationsObjectsTopicResume"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Ссылка на полную версию отклика */
      url: string;
    });
    /** Сокращенное представление резюме */
    NegotiationsObjectsTopicResume: components["schemas"]["ResumeResumeNanoWithUrl"] & {
      /** @description Дата и время создания резюме */
      created_at: string;
      /** @description Дата и время обновления резюме */
      updated_at: string;
    };
    /** Сокращенное представление резюме */
    ResumeResumeNanoWithUrl: components["schemas"]["ResumeResumeNano"] & components["schemas"]["_IncludesUrl"];
    /** Отклик */
    NegotiationsObjectsTopicItem: components["schemas"]["NegotiationsObjectsTopicItemCommon"] & ({
      /** @description Можно ли [скрыть отклик](#tag/Perepiska-(otklikipriglasheniya)-dlya-soiskatelya/operation/hide-active-response) вместе с сообщением работодателю об отказе */
      decline_allowed: boolean;
      /** @description Скрыт ли текущий отклик от соискателя */
      hidden: boolean;
      /** @description Статус поиска работы кандидатом. Для получения данных передайте параметр `with_job_search_status=true` */
      job_search_status?: components["schemas"]["_IncludesIdName"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Представление истории звонков по вакансии */
      phone_calls?: components["schemas"]["NegotiationsPhoneCalls"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Короткое представление вакансии */
      vacancy?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacanciesNegotiationsVacancyShort"] | null;
    });
    /** История звонков */
    NegotiationsPhoneCalls: {
      /** @description Список звонков */
      items: components["schemas"]["NegotiationsPhoneCallItem"][];
      /** @description Ответил ли абонент соискателю хотя бы один раз */
      picked_up_phone_by_opponent: boolean;
    };
    /** Звонок */
    NegotiationsPhoneCallItem: {
      /** @description Дата и время создания звонка */
      creation_time: string;
      /** @description Длительность звонка в секундах */
      duration_seconds?: number | null;
      /** @description Идентификатор звонка */
      id: number;
      /** @description Дата и время обновления звонка */
      last_change_time?: string | null;
      /**
       * @description Статус звонка.
       *
       * Возможные значения перечислены в разделе `phone_call_status` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
       */
      status: string;
    };
    /**
     * Успешный ответ
     * @example {
     *   "$ref": "components[\"examples\"][\"EmployerAddresses\"][\"value\"]"
     * }
     */
    EmployerAddressesEmployerAddressesResponse: components["schemas"]["EmployerAddressesEmployerAddressItems"] & components["schemas"]["_IncludesPagination"];
    /** JSON c параметрами адреса */
    EmployerAddressesEmployerAddressItems: {
      /** @description Список адресов работодателя */
      items: components["schemas"]["EmployerAddressesEmployerAddressItem"][];
    };
    /** Успешный ответ */
    AuthUserTokenAndAppToken: components["schemas"]["AuthUserToken"] | components["schemas"]["AuthAppToken"];
    /** Авторизация пользователя */
    AuthUserToken: {
      access_token: string;
      /**
       * Format: int64
       * @description Время жизни токена в секундах
       */
      expires_in: number;
      /** @description Токен, который можно использовать для продления срока жизни соответствующего access токена */
      refresh_token: string;
      /**
       * @description Тип выданного токена. Всегда принимает значение `bearer`
       * @enum {string}
       */
      token_type: "bearer";
    };
    /** Авторизация приложения */
    AuthAppToken: {
      access_token: string;
      /**
       * @description Тип выданного токена. Всегда принимает значение `bearer`
       * @enum {string}
       */
      token_type: "bearer";
    };
    /**
     * Справочники полей резюме
     * @description Справочники полей и сущностей, используемых в API
     */
    DictionariesDictResponse: {
      /**
       * Прочие справочники
       * @description Тип доступа для комментария к соискателю
       */
      applicant_comment_access_type: components["schemas"]["_IncludesIdName"][];
      /**
       * Прочие справочники
       * @description Типы сортировки [списка комментариев к соискателю](#tag/Kommentarii-k-soiskatelyu/operation/get-applicant-comments-list)
       */
      applicant_comments_order: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для откликов/приглашений
       * @description Статусы откликов/приглашений
       */
      applicant_negotiation_status: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Готовность к командировкам
       */
      business_trip_readiness: components["schemas"]["_IncludesIdName"][];
      /**
       * Прочие справочники
       * @description Справочник валют
       */
      currency: components["schemas"]["DictionariesCurrencyItem"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Категории водительских прав
       */
      driver_license_types: components["schemas"]["_IncludesId"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Образование в резюме
       */
      education_level: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для сортировки вакансий работодателя
       * @description Тип сортировки списка опубликованных вакансий
       */
      employer_active_vacancies_order: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для сортировки вакансий работодателя
       * @description Тип сортировки списка архивных вакансий
       */
      employer_archived_vacancies_order: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для сортировки вакансий работодателя
       * @description Тип сортировки скрытых вакансий
       */
      employer_hidden_vacancies_order?: components["schemas"]["_IncludesIdName"][];
      /**
       * Прочие справочники
       * @description Типы связи компании с пользователем
       */
      employer_relation: components["schemas"]["_IncludesIdName"][];
      /**
       * Прочие справочники
       * @description Тип работодателя
       */
      employer_type: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей вакансии
       * @description Тип занятости
       */
      employment: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей вакансии
       * @description Опыт работы
       */
      experience: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Пол
       */
      gender: components["schemas"]["_IncludesIdName"][];
      /**
       * Прочие справочники
       * @description Статусы поиска соискателей для установки и отображения самому соискателю
       */
      job_search_statuses_applicant: components["schemas"]["_IncludesIdName"][];
      /**
       * Прочие справочники
       * @description Статусы поиска соискателей для отображения работодателям
       */
      job_search_statuses_employer: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Уровень владения языком
       */
      language_level: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для откликов/приглашений
       * @description Статус возможности отправки сообщения в переписке
       */
      messaging_status: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для откликов/приглашений
       * @description Типы порядка отображения откликов
       */
      negotiations_order: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для откликов/приглашений
       * @description Типы участников переписки
       */
      negotiations_participant_type: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для откликов/приглашений
       * @description Типы состояний откликов
       */
      negotiations_state: components["schemas"]["_IncludesIdName"][];
      /**
       * Прочие справочники
       * @description Статус звонка, зафиксированного в системе кол-трекинг
       */
      phone_call_status: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Предпочитаемый способ связи
       */
      preferred_contact_type: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Готовность к переезду
       */
      relocation_type: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Уровень доступа к резюме
       */
      resume_access_type: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Тип сайта в поле «контакты»
       */
      resume_contacts_site_type: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Поля резюме, которые могут быть [скрыты](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#hidden-fields)
       */
      resume_hidden_fields: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Комментарий модератора
       */
      resume_moderation_note: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник параметров поиска резюме
       * @description Условие поиска по опыту работы
       */
      resume_search_experience_period?: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник параметров поиска резюме
       * @description Область поиска в резюме
       */
      resume_search_fields?: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник параметров поиска резюме
       * @description Метки поиска резюме
       */
      resume_search_label?: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник параметров поиска резюме
       * @description Условие поиска резюме
       */
      resume_search_logic?: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник параметров поиска резюме
       * @description Тип сортировки резюме
       */
      resume_search_order?: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник параметров поиска резюме
       * @description Условие поиска по проживанию в регионе и готовности к переезду
       */
      resume_search_relocation?: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Статус резюме
       */
      resume_status: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей вакансии
       * @description График работы
       */
      schedule: components["schemas"]["_IncludesIdNameUid"][];
      /**
       * Справочник для полей, используемых в резюме
       * @description Время в пути
       */
      travel_time: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей вакансии
       * @description Варианты размещения вакансии с точки зрения биллинга
       */
      vacancy_billing_type: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для параметров поиска вакансий
       * @description Тип кластеров
       */
      vacancy_cluster: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей вакансии
       * @description Метки вакансии
       */
      vacancy_label: components["schemas"]["_IncludesIdName"][];
      /**
       * Прочие справочники
       * @description Причины, из-за которых невозможно [продлить вакансию](#tag/Upravlenie-vakansiyami/operation/get-prolongation-vacancy-info)
       */
      vacancy_not_prolonged_reason: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей вакансии
       * @description Типы связи вакансии с пользователем
       */
      vacancy_relation: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для параметров поиска вакансий
       * @description Область поиска в вакансии
       */
      vacancy_search_fields: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для параметров поиска вакансий
       * @description Тип сортировки вакансии
       */
      vacancy_search_order: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей вакансии
       * @description Тип вакансии
       */
      vacancy_type: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей вакансии
       * @description Рабочие дни
       */
      working_days: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей вакансии
       * @description Временные интервалы работы
       */
      working_time_intervals: components["schemas"]["_IncludesIdName"][];
      /**
       * Справочник для полей вакансии
       * @description Режимы времени работы
       */
      working_time_modes: components["schemas"]["_IncludesIdName"][];
    };
    /** Объект с идентификатором, названием и универсальным идентификатором */
    _IncludesIdNameUid: components["schemas"]["_IncludesIdName"] & {
      /** @description Универсальный идентификатор */
      uid: string;
    };
    /** Валюта */
    DictionariesCurrencyItem: {
      /** @description Краткое обозначение */
      abbr: string;
      /** @description Код */
      code: string;
      /** @description Используется ли в качестве валюты по умолчанию? */
      default: boolean;
      /** @description Можно ли использовать на данном хосте? */
      in_use: boolean;
      /** @description Название */
      name: string;
      /** @description Курс по отношению к рублю */
      rate: number;
    };
    /** Успешный ответ */
    VacanciesVacanciesResponse: components["schemas"]["VacanciesVacanciesItems"] & components["schemas"]["_IncludesPagination"] & components["schemas"]["VacanciesClusters"] & components["schemas"]["VacanciesArguments"] & ({
      /** @description Ссылка на вакансию */
      alternate_url?: string | null;
      fixes?: components["schemas"]["VacanciesFixes"];
      suggests?: components["schemas"]["VacanciesSuggests"];
    });
    /** Исправления применённые к тексту запроса */
    VacanciesFixes: {
      /** @description Текст запроса после исправления */
      fixed?: string;
      /** @description Исходный текст запроса */
      original?: string;
    } | null;
    /** Кластеры в поиске вакансий */
    VacanciesClusters: {
      /** @description Массив [кластеров поиска](#tag/Poisk-vakansij/Klastery-v-poiske-vakansij) */
      clusters?: components["schemas"]["VacanciesClusterItem"][] | null;
    };
    /** Кластер */
    VacanciesClusterItem: {
      /** @description Идентификатор кластера */
      id: string;
      /** @description Массив поисковых запросов в данном кластере с указанием дополнительных параметров */
      items: components["schemas"]["VacanciesItemsOfClusterItem"][];
      /** @description Название типа кластера */
      name: string;
    };
    /** Поисковый запрос в кластере */
    VacanciesItemsOfClusterItem: {
      /** @description Количество вакансий в данном элементе кластера */
      count: number;
      metro_line?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["_IncludesClusterMetroLine"] | null;
      metro_station?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["_IncludesClusterMetroStation"] | null;
      /** @description Название элемента кластера */
      name: string;
      /**
       * @description Тип значения, связанного с группой
       * @enum {string|null}
       */
      type?: "metro_station" | "metro_line" | null;
      /** @description Ссылка на поисковую выдачу по данному элементу кластера */
      url: string;
    };
    /** Линия метро */
    _IncludesClusterMetroLine: {
      area: Record<string, never> & components["schemas"]["_IncludesArea"];
      /** @description Цвет линии в HEX-формате `RRGGBB` (от `000000` до `FFFFFF`) */
      hex_color: string;
      /** @description Идентификатор линии */
      id: string;
    };
    /** Станция метро */
    _IncludesClusterMetroStation: {
      area: Record<string, never> & components["schemas"]["_IncludesArea"];
      /** @description Цвет линии в HEX-формате `RRGGBB` (от `000000` до `FFFFFF`) */
      hex_color: string;
      /** @description Идентификатор станции метро */
      id: string;
      /** @description Широта */
      lat: number;
      /** @description Долгота */
      lng: number;
      /** @description Порядковый номер станции в линии метро */
      order: number;
    };
    /** Использованные параметры в поиске вакансий */
    VacanciesArguments: {
      /**
       * @description Массив параметров поиска, переданных в запросе.
       *
       * Возвращается только если в запросе передан параметр `describe_arguments=true`. В массиве выдаются только те параметры, которые влияют на поиск вакансий. Неизвестные параметры игнорируются. Элемент списка с одним значением `argument` может повторяться несколько раз, если параметр имеет несколько значений
       */
      arguments?: components["schemas"]["VacanciesArgumentItem"][] | null;
    };
    /** Аргумент поиска */
    VacanciesArgumentItem: {
      /** @description Параметр поиска вакансии */
      argument: string;
      /** @description Группа кластеров, которая связана с данным параметром */
      cluster_group?: components["schemas"]["_IncludesIdName"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description URL поиска вакансий, который получится, если перестать учитывать в поиске данный параметр */
      disable_url: string;
      /** @description Цвет линии в HEX-формате `RRGGBB` (от `000000` до `FFFFFF`). Возвращается только для аргумента `metro` */
      hex_color?: string | null;
      /** @description Станция или линия метро (`station`/`line`). Возвращается только для аргумента `metro` */
      metro_type?: string | null;
      /** @description Название значения */
      name?: string | null;
      /** @description Значение параметра */
      value: string;
      /** @description Описание параметра */
      value_description?: string | null;
    };
    /** Исправления предложенные для текста запроса */
    VacanciesSuggests: {
      /** @description Найдено результатов по предложенному запросу */
      found?: number;
      /** @description Предложенный текст запроса */
      value?: string;
    } | null;
    /** Список вакансий */
    VacanciesVacanciesItems: {
      /** @description Список вакансий */
      items: components["schemas"]["VacanciesVacanciesItem"][];
    };
    /** Вакансия */
    VacanciesVacanciesItem: components["schemas"]["VacanciesStandardVacancyFields"] & components["schemas"]["VacanciesAdditionalVacancyFields"] & ({
      /** @description Отображать ли лого для вакансии в поисковой выдаче */
      show_logo_in_search?: boolean | null;
    });
    /** Вакансия */
    VacanciesAdditionalVacancyFields: {
      counters?: components["schemas"]["VacancyCounters"];
      employment?: components["schemas"]["VacancyEmploymentOutput"];
      experience?: components["schemas"]["VacancyExperienceOutput"];
      /** @description Дополнительные текстовые снипеты (отрывки) по найденной вакансии. Если в тексте снипета встретилась поисковая фраза (параметр `text`), она будет подсвечена тегом `highlighttext` */
      snippet: components["schemas"]["VacancySnippet"];
      sort_point_distance?: components["schemas"]["VacancySortPointDistance"];
    };
    /** Дополнительные текстовые отрывки */
    VacancySnippet: {
      /** @description Отрывок из требований по вакансии, если они найдены в тексте описания */
      requirement?: string | null;
      /** @description Отрывок из обязанностей по вакансии, если они найдены в тексте описания */
      responsibility?: string | null;
    };
    /** Опыт работы */
    VacancyExperienceOutput: (components["schemas"]["VacancyExperience"] & {
      /** @description Название опыта работы */
      name?: string;
    }) | null;
    /** Тип занятости */
    VacancyEmploymentOutput: (components["schemas"]["VacancyEmployment"] & {
      /** @description Название типа занятости */
      name?: string;
    }) | null;
    /** Вакансия */
    VacanciesStandardVacancyFields: {
      accept_incomplete_resumes: components["schemas"]["VacancyAcceptIncompleteResumes"];
      accept_temporary?: components["schemas"]["VacancyAcceptTemporary"];
      address?: components["schemas"]["VacancyAddressRawOutput"];
      /**
       * @deprecated
       * @description URL для регистрации нажатия кнопки отклика
       * (устаревшее, сейчас для регистрации нажатия кнопки отклика нужно заполнять хедер adv-context
       * в запросе [Резюме, сгруппированные по возможности отклика на данную вакансию](#tag/Rezyume.-Prosmotr-informacii/operation/get-resumes-by-status))
       */
      adv_response_url?: string | null;
      /** @description Ссылка на представление вакансии на сайте */
      alternate_url: string;
      /** @description Ссылка на отклик на вакансию на сайте */
      apply_alternate_url: string;
      /** @description Находится ли данная вакансия в архиве */
      archived?: boolean | null;
      area: components["schemas"]["_IncludesArea"];
      contacts?: components["schemas"]["VacancyContactsOutput"];
      /** @description Дата и время публикации вакансии */
      created_at?: string;
      department: components["schemas"]["VacanciesObjectsDepartment"];
      employer: components["schemas"]["VacanciesEmployerPublic"];
      /** @description Информация о наличии прикрепленного тестового задании к вакансии */
      has_test: boolean;
      /** @description Идентификатор вакансии */
      id: string;
      insider_interview?: components["schemas"]["VacanciesObjectsInsiderInterview"];
      metro_stations?: components["schemas"]["_IncludesMetroStation"];
      name: components["schemas"]["VacancyName"];
      /** @description Является ли данная вакансия премиум-вакансией */
      premium?: boolean | null;
      professional_roles: components["schemas"]["VacancyProfessionalRolesOutput"];
      /** @description Дата и время публикации вакансии */
      published_at: string;
      relations: components["schemas"]["VacancyRelations"];
      response_letter_required: components["schemas"]["VacancyResponseLetterRequired"];
      response_url?: components["schemas"]["VacancyResponseUrl"];
      salary: components["schemas"]["VacancySalary"];
      schedule?: components["schemas"]["VacancyScheduleOutput"] | components["schemas"]["_IncludesNullableObject"] | null;
      sort_point_distance?: components["schemas"]["VacancySortPointDistance"];
      type: components["schemas"]["VacancyTypeOutput"];
      /** @description URL вакансии */
      url: string;
      working_days?: components["schemas"]["VacancyWorkingDaysOutput"];
      working_time_intervals?: components["schemas"]["VacancyWorkingTimeIntervalsOutput"];
      working_time_modes?: components["schemas"]["VacancyWorkingTimeModesOutput"];
    };
    /**
     * Список рабочих дней
     * @description Список рабочих дней
     */
    VacancyWorkingDaysOutput: components["schemas"]["VacancyWorkingDayItemOutput"][] | null;
    /** Список рабочих дней */
    VacancyWorkingDayItemOutput: (components["schemas"]["VacancyWorkingDayItem"] & {
      /** @description Название рабочего дня */
      name?: string;
    }) | null;
    /**
     * Контактная информация
     * @description Контактная информация
     */
    VacancyContactsOutput: ({
      /** @description Флаг подключения виртуального номера */
      call_tracking_enabled?: boolean | null;
      /** @description Электронная почта. Значение поля должно соответствовать формату email */
      email?: string | null;
      /** @description Имя контакта */
      name?: string | null;
      /** @description Список телефонов для связи */
      phones?: components["schemas"]["VacancyPhoneItem"][] | null;
    }) | null;
    /**
     * Интервалы работы
     * @description Список с временными интервалами работы
     */
    VacancyWorkingTimeIntervalsOutput: components["schemas"]["VacancyWorkingTimeIntervalItemOutput"][] | null;
    /** Название интервала работы */
    VacancyWorkingTimeIntervalItemOutput: (components["schemas"]["VacancyWorkingTimeIntervalItem"] & {
      /** @description Название интервала работы */
      name?: string;
    }) | null;
    /**
     * Режимы работы
     * @description Список режимов времени работы
     */
    VacancyWorkingTimeModesOutput: components["schemas"]["VacancyWorkingTimeModeItemOutput"][] | null;
    /** Название интервала работы */
    VacancyWorkingTimeModeItemOutput: (components["schemas"]["VacancyWorkingTimeModeItem"] & {
      /** @description Название интервала работы */
      name?: string;
    }) | null;
    /** График работы */
    VacancyScheduleOutput: components["schemas"]["VacancySchedule"] & {
      /** @description Название графика работы */
      name?: string;
    };
    /** Найденные работодатели */
    ResumesResumeVisibilityListSearchResponse: components["schemas"]["_IncludesPagination"] & components["schemas"]["ResumesResumeVisibilityListSearchProperties"];
    /** Список видимости резюме */
    ResumesResumeVisibilityListSearchProperties: {
      /** @description Список работодателей */
      items: (components["schemas"]["ResumesGetResumeVisibilityListItem"] & components["schemas"]["ResumesSelectedObject"])[];
    };
    /** Присутствие работодателя в списке видимости резюме */
    ResumesSelectedObject: {
      /** @description Присутствует ли работодатель в списке видимости резюме */
      selected: boolean;
    };
    /** Дневной лимит просмотра резюме */
    EmployerManagersEmployerManagerLimits: {
      /** @description Количество оставшихся просмотров резюме. В этом параметре содержится лимит просмотров на компанию. Из-за этого он может быть меньше, чем доступно текущему пользователю */
      left: components["schemas"]["EmployerManagersResumeView"];
      /** @description Лимит на просмотр резюме */
      limits: components["schemas"]["EmployerManagersResumeView"];
      /** @description Количество просмотренных резюме */
      spend: components["schemas"]["EmployerManagersResumeView"];
    };
    /** Просмотры резюме */
    EmployerManagersResumeView: {
      /** @description Просмотры резюме через сайт */
      resume_view: number;
      /** @description Просмотры резюме из API. Возвращаются, если они предусмотрены в текущей конфигурации доступа к резюме для работодателя */
      resume_view_from_api?: number;
    };
    /** Информация о менеджере */
    EmployerManagersEmployerManagerInfo: {
      /** @description Дополнительный телефон менеджера */
      additional_phone?: components["schemas"]["EmployerManagersPhone"] & Record<string, never>;
      area?: components["schemas"]["EmployerManagersArea"];
      /** @description Адрес электронной почты менеджера */
      email: string;
      /** @description Имя менеджера */
      first_name: string;
      /** @description Полное имя менеджера */
      full_name?: string;
      /** @description Идентификатор менеджера */
      id: string;
      /** @description Является ли менеджер основным контактным лицом */
      is_main_contact_person: boolean;
      /** @description Фамилия менеджера */
      last_name: string;
      manager_type?: components["schemas"]["EmployerManagersManagerType"];
      /** @description Отчество менеджера */
      middle_name?: string;
      /**
       * @deprecated
       * @description Полное имя менеджера
       */
      name?: string;
      /** @description Список [прав менеджера](#tag/Menedzhery-rabotodatelya/operation/get-employer-manager-types) */
      permissions: components["schemas"]["EmployerManagerTypesAvailablePermissions"][];
      /** @description Основной телефон менеджера */
      phone: components["schemas"]["EmployerManagersPhone"] & Record<string, never>;
      /** @description Должность менеджера */
      position: string;
      /** @description Количество опубликованных (активных) вакансий у данного менеджера. `null` — если у пользователя нет прав на просмотр вакансий этого менеджера */
      vacancies_count?: number | null;
    };
    /** Тип менеджера */
    EmployerManagersManagerType: {
      /** @description Идентификатор типа менеджера */
      id: string;
      /** @description Название типа менеджера */
      name: string;
    };
    /** Типы прав доступа */
    EmployerManagerTypesAvailablePermissions: {
      /** @description Идентификатор права */
      id: string;
      /** @description Название права */
      name: string;
    };
    /** Успешный ответ */
    EmployersEmployerVacancyAreasResponse: components["schemas"]["EmployersEmployerVacancyAreasItems"] & components["schemas"]["_IncludesPagination"];
    /** Список регионов */
    EmployersEmployerVacancyAreasItems: {
      /** @description Список регионов */
      items: components["schemas"]["_IncludesArea"][];
    };
    /** Ошибки */
    ErrorsVacancyAddEditBadAuthForbiddenErrors: components["schemas"]["ErrorsCommonBadAuthorizationErrors"] | components["schemas"]["ErrorsVacancyAddEditForbiddenErrors"];
    /**
     * Ошибки при публикации и редактировании вакансии
     * @description Информация о возникших ошибках
     */
    ErrorsVacancyAddEditForbiddenErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /**
       * @description Описание ошибки
       * @example Forbidden
       */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsVacancyAddEditForbiddenError"][];
    };
    /** Ошибка запрещено при публикации и редактировании вакансии */
    ErrorsVacancyAddEditForbiddenError: {
      /**
       * @description Общее количество дубликатов вакансии. Возвращается только для `"value": "duplicate"`
       *
       * @example 2
       */
      found?: number | null;
      /** @description Ограниченное количество записей с информацией о дубликатах. Не гарантирует выдачу всех дубликатов. Возвращается только для `"value": "duplicate"` */
      items?: components["schemas"]["_IncludesNumericId"][] | null;
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example vacancies
       * @enum {string}
       */
      type: "vacancies";
      /**
       * @description Ошибки при публикации и редактировании вакансии:
       *   * `not_enough_purchased_services` — купленных услуг недостаточно для публикации или обновления данного типа вакансии
       *   * `quota_exceeded` — квота менеджера на публикацию данного типа вакансии закончилась
       *   * `duplicate` — аналогичная вакансия уже опубликована. В ответе передается информация по дубликатам вакансии. Данную ошибку можно форсировано отключить параметром `?ignore_duplicates=true`
       *   * `creation_forbidden` — публикация вакансий недоступна текущему менеджеру
       *   * `unavailable_for_archived` — редактирование недоступно для архивной вакансии
       *   * `conflict_changes` — [конфликтные изменения](https://github.com/hhru/api/blob/master/docs/employer_vacancies.md#%D1%81%D0%BC%D0%B5%D0%BD%D0%B0-%D0%B1%D0%B8%D0%BB%D0%BB%D0%B8%D0%BD%D0%B3-%D1%82%D0%B8%D0%BF%D0%B0-%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80%D0%B0-%D0%B2%D0%B0%D0%BA%D0%B0%D0%BD%D1%81%D0%B8%D0%B8) данных вакансии
       *
       * @example not_enough_purchased_services
       * @enum {string}
       */
      value: "not_enough_purchased_services" | "quota_exceeded" | "duplicate" | "creation_forbidden" | "unavailable_for_archived" | "conflict_changes";
    };
    /** Числовой идентификатор */
    _IncludesNumericId: {
      /** @description Идентификатор */
      id: number;
    };
    /** Успешный ответ */
    NegotiationsListResponse: components["schemas"]["NegotiationsApplicantNegotiationsResponse"] | components["schemas"]["NegotiationsNegotiationsCollections"];
    /** Успешный ответ */
    NegotiationsApplicantNegotiationsResponse: components["schemas"]["NegotiationsListItems"] & components["schemas"]["_IncludesPagination"];
    /** Список откликов */
    NegotiationsListItems: {
      /** @description Список откликов */
      items: components["schemas"]["NegotiationsListItem"][];
    };
    /** Отклик */
    NegotiationsListItem: components["schemas"]["NegotiationsObjectsTopicItem"] & ({
      /** @description Короткое представление резюме */
      resume?: components["schemas"]["ResumeResumeNanoWithUrl"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Ссылка на полную версию отклика */
      url: string;
    });
    /** Коллекции откликов/приглашений */
    NegotiationsNegotiationsCollections: {
      /** @description Коллекции откликов/приглашений для данной вакансии */
      collections: components["schemas"]["NegotiationsNegotiationsCollection"][];
      /** @description Состояния [откликов/приглашений](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md#term-employer-state) вакансии для работодателя */
      employer_states: components["schemas"]["EmployersEmployersState"][];
      /** @description Сгенерированные коллекции откликов/приглашений для данной вакансии */
      generated_collections: components["schemas"]["NegotiationsNegotiationsCollection"][];
    };
    /** Информация о коллекции */
    NegotiationsNegotiationsCollection: components["schemas"]["NegotiationsObjectsStates"] & {
      counters?: components["schemas"]["NegotiationsObjectsEmployerCounters"];
      order_types: components["schemas"]["NegotiationsNegotiationsOrderTypes"][];
    };
    /**
     * Объект со статистикой
     * @description Статистика откликов/приглашений коллекции
     */
    NegotiationsObjectsEmployerCounters: {
      /** @description Общее количество откликов/приглашений в коллекции */
      total?: number;
      /** @description Количество откликов/приглашений в коллекции, требующих внимания */
      with_updates?: number;
    };
    /** Информация о коллекции */
    NegotiationsObjectsStates: {
      /** @description Описание коллекции */
      description: string;
      /** @description Идентификатор коллекции */
      id: string;
      /** @description Название коллекции */
      name: string;
      /** @description URL, [GET-запрос на который](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations) возвращает список откликов/приглашений коллекции */
      url: string;
    };
    /** Варианты сортировки откликов/приглашений */
    NegotiationsNegotiationsOrderTypes: {
      /** @description Уникальный идентификатор варианта сортировки */
      id: string;
      /** @description Название варианта сортировки */
      name: string;
      /** @description URL на коллекцию откликов/приглашений, отсортированных текущим вариантом */
      url: string;
    };
    /** Объект подписки */
    WebhookSubscriptionUpdate: {
      /** @description Cписок событий, на которые нужно подписаться */
      actions?: (components["schemas"]["WebhookActionNewNegotiationVacancy"] | components["schemas"]["WebhookActionNewResponseOrInvitationVacancy"] | components["schemas"]["WebhookActionVacancyArchivation"] | components["schemas"]["WebhookActionVacancyChange"] | components["schemas"]["WebhookActionVacancyProlongation"] | components["schemas"]["WebhookActionVacancyPublicationForVacancyManager"] | components["schemas"]["WebhookActionNegotiationEmployerStateChange"])[];
      /**
       * Format: uri
       * @description URL, на который будет отправляться POST запрос при наступлении события
       * @example http://www.example.com
       */
      url?: string;
    };
    /** Тело запроса для добавления работодателя в список видимости */
    ResumesPostResumeVisibilityListBody: {
      /** @description Список передаваемых идентификаторов работодателей */
      items?: components["schemas"]["_IncludesId"][];
    };
    /**
     * Подсказки по профессиональным ролям
     * @description Подсказки по профессиональным ролям
     */
    SuggestsProfessionalRoles: {
      /**
       * Массив найденных профессиональных ролей
       * @description Информация о найденных профессиональных ролях
       */
      items: components["schemas"]["SuggestsProfessionalRoleItem"][];
    };
    /** Информация о найденных проф. ролях */
    SuggestsProfessionalRoleItem: {
      /**
       * @description Профессиональная роль, для которой можно принимать отклики неполным резюме
       * @example true
       */
      accept_incomplete_resumes: boolean;
      /**
       * @description Идентификатор профессиональной роли
       * @example 21
       */
      id: string;
      /**
       * @description Название профессиональной роли
       * @example Водитель
       */
      text: string;
    };
    /** Ошибки */
    ErrorsNegotiationEditMessageForbiddenErrors: components["schemas"]["ErrorsCommonBadAuthorizationErrors"] | components["schemas"]["ErrorsNegotiationEditMessageErrors"];
    /**
     * Oшибки при работе с перепиской соискателя(отклики/приглашения)
     * @description Информация о возникших ошибках
     */
    ErrorsNegotiationEditMessageErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsNegotiationEditMessageError"][];
    };
    /** Ошибка */
    ErrorsNegotiationEditMessageError: {
      /**
       * @description Тип ошибки
       * @example negotiations
       * @enum {string}
       */
      type: "negotiations";
      /**
       * @description Причина ошибки:
       *
       * * `message_cannot_be_empty` — сообщение в переписке не может быть пустым.
       * * `message_already_viewed` — редактирование сообщения запрещено. Принимающая сторона уже успела прочитать сообщение.
       * * `vacancy_not_found` — вакансия, на которую совершался отклик, не найдена
       * * `resume_not_found` — резюме из отклика/приглашения было скрыто, либо удалено, либо не найдено
       * * `vacancy_archived` — вакансия, на которую совершался отклик, заархивирована
       *
       * @example message_already_viewed
       * @enum {string}
       */
      value: "message_cannot_be_empty" | "message_already_viewed" | "vacancy_not_found" | "resume_not_found" | "vacancy_archived";
    };
    /**
     * Ошибки в параметрах запроса
     * @description Информация о возникших ошибках
     */
    ErrorsEmployerManagerBadArgumentErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsEmployerManagerBadArgumentError"][];
    };
    /** Ошибка в параметре запроса */
    ErrorsEmployerManagerBadArgumentError: {
      /**
       * @description Описание ошибки
       * @example too_long_value
       */
      reason?: string;
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example bad_argument
       * @enum {string}
       */
      type: "bad_argument" | "bad_request" | "managers";
      /**
       * @description Название поля с ошибкой
       * @example resume_id
       */
      value?: string;
    };
    /** Типы видимости резюме */
    ResumesAccessTypes: {
      /** @description Варианты времени автоскрытия резюме при неактивности пользователя. Возвращается только для пользователей rabota.by */
      auto_hide_time_options?: components["schemas"]["ResumesAutoHideTimeOptions"][] | null;
      /** @description Доступные типы видимости резюме */
      items: components["schemas"]["ResumesAccessTypesItem"][];
    };
    /** Вариант автоскрытия */
    ResumesAutoHideTimeOptions: {
      /** @description Выбран ли вариант автоскрытия */
      active?: boolean | null;
      /** @description Идентификатор варианта автоскрытия */
      id: string;
      /** @description Название варианта автоскрытия */
      name: string;
    };
    /** Тип видимости */
    ResumesAccessTypesItem: {
      /** @description Выбран ли тип видимости */
      active?: boolean | null;
      /** @description Идентификатор типа видимости */
      id: string;
      /** @description Максимальное количество компаний в списке видимости. Возвращается только для типов `blacklist` и `whitelist` */
      limit?: number | null;
      /** @description Ссылка на список видимости. Возвращается только для типов `blacklist` и `whitelist` */
      list_url?: string | null;
      /** @description Имя типа видимости */
      name: string;
      /** @description Количество компаний, добавленных в соответствующий список видимости. Возвращается только для типов `blacklist` и `whitelist` */
      total?: number | null;
    };
    /** Успешный ответ */
    ArtifactsArtifactPhotoResponse: components["schemas"]["ArtifactsArtifactPhotoItems"] & components["schemas"]["_IncludesPagination"];
    /** Коллекция изображений */
    ArtifactsArtifactPhotoItems: {
      /** @description Список изображений */
      items: components["schemas"]["ArtifactsArtifactItem"][];
    };
    /** Список отраслей */
    DictionariesIndustriesResponse: components["schemas"]["DictionariesBranchItem"][];
    /** Отрасль */
    DictionariesBranchItem: {
      /** @description Идентификатор отрасли */
      id: string;
      /** @description Сферы деятельности */
      industries: components["schemas"]["_IncludesIdName"][];
      /** @description Название отрасли */
      name: string;
    };
    /** Список откликов/приглашений коллекции */
    NegotiationsCollectionNegotiationsResponse: components["schemas"]["_IncludesSortingType"] & components["schemas"]["_IncludesPagination"] & components["schemas"]["NegotiationsCollectionNegotiations"];
    /** Сортировка */
    _IncludesSortingType: {
      /** @description Применяемый тип сортировки */
      ordered_by: components["schemas"]["_IncludesIdName"];
    };
    /** Поля ответа списка откликов/приглашений коллекции */
    NegotiationsCollectionNegotiations: {
      items: (components["schemas"]["NegotiationsObjectsTopicItemCommon"] & components["schemas"]["NegotiationsNegotiationCommonFields"] & ({
        /** @description Короткое представление резюме */
        resume?: (components["schemas"]["ResumeResumeShortLogoUrl90"] | components["schemas"]["_IncludesNullableObject"]) | null;
        /** @description Ссылка на полную версию отклика */
        url: string;
      }))[];
    };
    /** Сокращенное представление резюме */
    ResumeResumeShortLogoUrl90: components["schemas"]["ResumeResumeProfileLogoUrl90"] & components["schemas"]["ResumeResumeShortAdditionalFields"] & {
      /**
       * @description Для получения данных нужно передать параметр `with_job_search_status=true`.
       * Возможные значения перечислены в поле `job_search_statuses_employer` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
       */
      job_search_status?: components["schemas"]["_IncludesIdNameLastChangeTime"];
    };
    /** Сокращенное представление резюме */
    ResumeResumeProfileLogoUrl90: components["schemas"]["ResumeResumeNanoWithUrl"] & ({
      /** @description Возраст */
      age?: number | null;
      area?: components["schemas"]["ResumeObjectsArea"];
      /** @description Доступен ли просмотр контактной информации в резюме текущему работодателю */
      can_view_full_info?: boolean | null;
      /** @description Список сертификатов соискателя */
      certificate: components["schemas"]["ResumeObjectsCertificate"][];
      /** @description Дата и время создания резюме */
      created_at: string;
      /** @description Ссылки для скачивания резюме в разных форматах */
      download: components["schemas"]["ResumeObjectsDownload"];
      /**
       * @description Образование соискателя.
       *
       * Особенности сохранения образования:
       *
       * * Если передать и высшее и среднее образование и уровень образования "средний", то сохранится только среднее образование.
       * * Если передать и высшее и среднее образование и уровень образования "высшее", то сохранится только высшее образование
       */
      education: components["schemas"]["ResumeObjectsEducation"];
      /** @description Опыт работы */
      experience: components["schemas"]["ResumeObjectsExperienceLogoUrl90"][];
      /** @description Имя */
      first_name?: string | null;
      gender?: components["schemas"]["ResumeObjectsGender"];
      /** @description Справочник [Список скрытых полей](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#hidden-fields). Возможные значения элементов приведены в поле `resume_hidden_fields` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      hidden_fields: components["schemas"]["_IncludesIdName"][];
      /** @description Фамилия */
      last_name?: string | null;
      /**
       * @description Выделено ли резюме в поиске
       * @default false
       */
      marked?: boolean;
      /** @description Отчество */
      middle_name?: string | null;
      /** @description Ресурс, на котором было размещено резюме */
      platform?: components["schemas"]["_IncludesId"];
      salary?: components["schemas"]["ResumeObjectsSalaryProperties"];
      total_experience?: components["schemas"]["ResumeObjectsTotalExperience"];
      /** @description Дата и время обновления резюме */
      updated_at: string;
    });
    /** Опыт работы в организации */
    ResumeObjectsExperienceLogoUrl90: WithRequired<components["schemas"]["ResumeObjectsExperiencePropertiesLogoUrl90"], "start" | "position" | "industries">;
    /** Опыт работы в организации */
    ResumeObjectsExperiencePropertiesLogoUrl90: {
      /** @description Регион расположения организации. Элемент [справочника регионов](#tag/Obshie-spravochniki/operation/get-areas) */
      area?: components["schemas"]["_IncludesIdNameUrl"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Название организации */
      company?: string | null;
      /** @description Уникальный идентификатор организации */
      company_id?: string | null;
      /** @description Сайт компании */
      company_url?: string | null;
      /** @description Обязанности, функции, достижения */
      description?: string | null;
      /** @description Работодатель */
      employer?: components["schemas"]["EmployersEmployerInfoShortLogoUrl90"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Окончание работы (дата в формате `ГГГГ-ММ-ДД`) */
      end?: string | null;
      /** @description Список отраслей компании. Возможные значения приведены в [справочнике индустрий](#tag/Obshie-spravochniki/operation/get-industries) */
      industries?: components["schemas"]["_IncludesIdName"][];
      /** @description Отрасль компании */
      industry?: components["schemas"]["ResumeObjectsIndustry"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Должность */
      position?: string;
      /** @description Начало работы (дата в формате `ГГГГ-ММ-ДД`) */
      start?: string;
    };
    /** Работодатель */
    EmployersEmployerInfoShortLogoUrl90: {
      /** @description Ссылка на описание работодателя на сайте */
      alternate_url: string;
      /** @description Идентификатор работодателя */
      id: string;
      /** @description Ссылки на изображения логотипов работодателя разных размеров. `original` — это необработанный логотип, который может быть большого размера. Если изначально загруженный компанией логотип меньше, чем 240px и/или 90px по меньшей стороне, то в соответствующих ключах будут ссылки на изображения оригинального размера. Объект может быть `null`, если компания не загрузила логотип. Клиент должен предусмотреть возможность отсутствия логотипа по указанной ссылке (ответ с кодом `404 Not Found`). Логотипы 90 и 240 присутствуют не во всех компаниях */
      logo_urls?: components["schemas"]["_IncludesLogoUrls90"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Название работодателя */
      name: string;
      /** @description URL для получения полного описания работодателя */
      url: string;
    };
    /** Предпочитаемая сортировка откликов */
    VacanciesPreferredNegotiationsOrderRequest: {
      /** @description Идентификатор типа сортировки. Возможные значения представлены в поле `order_types` [коллекции откликов и приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations). Не все типы сортировки из списка доступны для изменения */
      order: string;
    };
    /**
     * Список сообщений
     * @description Получение списка сообщений в отклике
     */
    NegotiationsMessagesGetResponse: components["schemas"]["_IncludesPagination"] & {
      /** @description Список сообщений */
      items?: components["schemas"]["NegotiationsMessagesGet"][];
    };
    /**
     * Сообщение в отклике
     * @description Сообщение в отклике
     */
    NegotiationsMessagesGet: components["schemas"]["NegotiationsMessage"] & {
      address?: components["schemas"]["VacancyAddressRawOutput"];
      /** @description Инструменты оценки, привязанные к сообщению */
      assessments?: components["schemas"]["NegotiationsAssessment"][];
    };
    /**
     * Инструменты оценки
     * @description Тесты или опросники, предназначенные для прохождения соискателями
     */
    NegotiationsAssessment: components["schemas"]["_IncludesIdName"] & {
      /** @description Инструменты оценки */
      actions: components["schemas"]["NegotiationsAction"][];
    };
    /**
     * Действие над инструментом
     * @description В зависимости от состояния инструмента оценки, конкретные действия над ним могут быть доступны либо нет
     */
    NegotiationsAction: {
      /** @description Ссылка на сайт, переход по которой инициирует действие */
      alternate_url?: string;
      /** @description Пояснение, почему действие недоступно */
      disable_reason?: string;
      /** @description Доступно ли действие */
      enabled: boolean;
      /** @description Тип действия */
      id: string;
      /** @description Описание действия */
      name: string;
    };
    /**
     * Сообщение в отклике
     * @description Сообщение в отклике
     */
    NegotiationsMessage: {
      author: components["schemas"]["NegotiationsAuthor"];
      /** @description Дата и время создания сообщения */
      created_at: string;
      /** @description Можно ли редактировать текст сообщения */
      editable: boolean;
      /** @description Идентификатор сообщения */
      id: string;
      /** @description Можно ли прочитать сообщение */
      read?: boolean;
      /** @description Состояние сообщения */
      state: components["schemas"]["_IncludesIdName"];
      /** @description Текст сообщения */
      text: string | null;
      /** @description Прочитано ли сообщение смотрящим (для сообщений отправленных соискателем - всегда true) */
      viewed_by_me: boolean;
      /** @description Прочитано ли сообщение работодателем (для сообщений работодателя - true) */
      viewed_by_opponent: boolean;
    };
    /**
     * Автор сообщения
     * @description Автор сообщения
     */
    NegotiationsAuthor: {
      /** @description Тип собеседника: `applicant` или `employer` */
      participant_type: string;
    };
    /** Успешный ответ */
    VacanciesVisitorsResponse: components["schemas"]["VacanciesVisitorsVisitorItems"] & components["schemas"]["_IncludesPagination"] & components["schemas"]["VacanciesVisitorsHiddenOnPage"];
    /** Список резюме в сокращенном представлении */
    VacanciesVisitorsVisitorItems: {
      /** @description Список сокращенных представлений резюме */
      items: (components["schemas"]["ResumeResumeShort"] & components["schemas"]["_IncludesUrl"])[];
    };
    /** Количество удаленных или скрытых соискателями резюме */
    VacanciesVisitorsHiddenOnPage: {
      /** @description Количество удаленных или скрытых соискателями резюме на странице */
      hidden_on_page: number;
    };
    /** Информация о новом менеджере */
    EmployerManagersAddEmployerManager: {
      /** @description Дополнительный телефон менеджера */
      additional_phone?: components["schemas"]["EmployerManagersPhone"] & Record<string, never>;
      area: components["schemas"]["EmployerManagersAreaId"];
      /** @description Адрес электронной почты менеджера */
      email: string;
      /** @description Имя менеджера */
      first_name: string;
      /** @description Является ли менеджер основным контактным лицом */
      is_main_contact_person: boolean;
      /** @description Фамилия менеджера */
      last_name: string;
      manager_type: components["schemas"]["EmployerManagersManagerTypeId"];
      /** @description Отчество менеджера */
      middle_name?: string;
      /** @description Список [прав менеджера](#tag/Menedzhery-rabotodatelya/operation/get-employer-manager-types) */
      permissions?: components["schemas"]["EmployerManagersPermissions"][];
      /** @description Основной телефон менеджера */
      phone: components["schemas"]["EmployerManagersPhone"] & Record<string, never>;
      /** @description Должность менеджера */
      position: string;
    };
    /** Права доступа */
    EmployerManagersPermissions: {
      /** @description Идентификатор права */
      id: string;
    };
    /** Регион */
    EmployerManagersAreaId: {
      /** @description Идентификатор региона из [справочника](#tag/Obshie-spravochniki/operation/get-areas) */
      id: string;
    };
    /** Тип менеджера */
    EmployerManagersManagerTypeId: {
      /** @description Идентификатор [типа менеджера](#tag/Menedzhery-rabotodatelya/operation/get-employer-manager-types) */
      id: string;
    };
    /** Подтверждение отправки */
    NegotiationsMessageSent: components["schemas"]["NegotiationsMessage"] & ({
      address?: components["schemas"]["VacancyAddressOutput"] | components["schemas"]["_IncludesNullableObject"] | null;
    });
    /**
     * Адрес
     * @description Адрес
     */
    VacancyAddressOutput: (components["schemas"]["GeocoderAddress"] & components["schemas"]["VacancyDescriptionAddress"] & {
      metro_stations?: components["schemas"]["_IncludesMetroStation"][];
    }) | null;
    /** Описание адреса */
    VacancyDescriptionAddress: ({
      /** @description Описание */
      description?: string | null;
    }) | null;
    /**
     * Адрес для геокодера
     * @description Адрес
     */
    GeocoderAddress: ({
      /** @description Дом */
      building?: string | null;
      /** @description Город */
      city?: string | null;
      /** @description Широта */
      lat?: number | null;
      /** @description Долгота */
      lng?: number | null;
      /** @description Улица */
      street?: string | null;
    }) | null;
    /** Шаблон ответа соискателю */
    MailTemplatesMailTemplateInput: {
      /** @description Текст шаблона */
      text: string;
    };
    /** Успешный ответ */
    EmployerManagerTypesResponse: {
      /** Список типов и прав менеджера */
      items: components["schemas"]["EmployerManagerTypesEmployerManagerTypesItem"][];
    };
    /** Тип и права менеджера */
    EmployerManagerTypesEmployerManagerTypesItem: {
      /** @description Список прав, которые можно дать данному типу менеджера */
      available_permissions: components["schemas"]["EmployerManagerTypesAvailablePermissions"][];
      /** @description Идентификатор типа менеджера */
      id: string;
      /** @description Название типа менеджера */
      name: string;
    };
    /** Успешный ответ */
    EmployersVacancyBrandedTemplatesList: {
      /** @description Список доступных брендированных шаблонов вакансий */
      items: ({
        /** @description Идентификатор брендированного шаблона вакансий */
        id: string;
        /** @description Название брендированного шаблона вакансий */
        name: string;
        /**
         * @description Идентификатор активной версии брендированного шаблона.
         * Равен null в случае шаблонов-конструкторов
         */
        version_id: string | null;
      })[];
    };
    /** Информация о вариантах публикации вакансии */
    VacanciesAvailableVacancyTypeResponse: {
      /** @description Массив вариантов публикации вакансии */
      items: components["schemas"]["VacanciesAvailableVacancyTypeItem"][];
    };
    /** Вариант публикации вакансии */
    VacanciesAvailableVacancyTypeItem: {
      /** @description Общее количество публикаций, доступных данному менеджеру */
      available_publications_count: number;
      /** @description Описание типа публикации */
      description: string;
      /** @description Название типа публикации */
      name: string;
      publications: components["schemas"]["VacancyPublications"];
      vacancy_billing_type: Record<string, never> & components["schemas"]["VacancyBillingType"];
      vacancy_types: components["schemas"]["VacancyTypes"];
    };
    /**
     * Список типов вакансии
     * @description Список типов вакансии
     */
    VacancyTypes: components["schemas"]["VacancyType"][];
    /**
     * Инфо о регионах и количестве публикаций
     * @description Список регионов, где может быть опубликована вакансия и количество публикаций, доступных работодателю
     */
    VacancyPublications: components["schemas"]["VacancyPublication"][];
    /** Информация о публикации */
    VacancyPublication: {
      /** @description URL на список регионов, в которых можно опубликовать вакансию данного типа. Список возвращается в древовидной структуре и публикация вакансий возможна только в конечных (листовых) узлах дерева. Они помечены флагом `can_publish=true` */
      areas_url: string;
      /** @description Количество публикаций в регионе, доступных работодателю */
      count: number;
      /** @description Название региона */
      name: string;
    };
    /**
     * Ошибки в параметрах запроса
     * @description Информация о возникших ошибках
     */
    ErrorsEmployerAddressErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsEmployerAddressError"][];
    };
    /** Ошибка в параметре запроса */
    ErrorsEmployerAddressError: {
      /**
       * @description Причина ошибки. Описание:
       * * `too_early` - Отступ по времени от текущей даты слишком большой.
       * * `must_be_a_valid_ISO_8601_date-time_string` - Дата-время указаны в неверном формате
       *
       * @example must_be_a_valid_ISO_8601_date
       */
      reason?: string;
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example bad_argument
       * @enum {string}
       */
      type: "bad_argument" | "bad_request";
      /**
       * @description Название поля с ошибкой
       * @example changed_after
       */
      value?: string;
    };
    /**
     * Подсказки по должностям резюме
     * @description Подсказки по должностям
     */
    SuggestsPositions: {
      /**
       * Массив найденных должностей
       * @description Информация о найденных должностях
       */
      items: components["schemas"]["SuggestsPositionItem"][];
    };
    /** Информация о найденных позициях */
    SuggestsPositionItem: {
      /**
       * @description Идентификатор должности
       * @example 2063
       */
      id: string;
      /**
       * Массив профессиональных ролей, соответствующих должности
       * @description Информация о профессиональных ролях, соответствующих должности
       */
      professional_roles: components["schemas"]["SuggestsProfessionalRoleItemWithName"][];
      /**
       * Массив специализаций, соответствующих должности
       * @description Информация о специализациях, соответствующих должности
       */
      specializations?: components["schemas"]["SuggestsSpecializationsWithName"][];
      /**
       * @description Название должности
       * @example Личный водитель
       */
      text: string;
    };
    /** Информация о найденных специализациях с именем */
    SuggestsSpecializationsWithName: {
      /**
       * @description Идентификатор специализации
       * @example 21.17
       */
      id: string;
      /**
       * @description Название специализации
       * @example Автоперевозки
       */
      name: string;
      /**
       * @description Идентификатор профессиональной области
       * @example 21
       */
      profarea_id: string;
      /**
       * @description Название профессиональной области
       * @example Транспорт, логистика
       */
      profarea_name: string;
    };
    /**
     * В запросе передана слишком большая сущность
     * @description Информация о возникших ошибках
     */
    ErrorsRequestEntityTooLargeErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsRequestEntityTooLargeError"][];
    };
    /** Слишком большой файл */
    ErrorsRequestEntityTooLargeError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example artifacts
       * @enum {string}
       */
      type: "artifacts";
      /**
       * @description Краткое текстовое описание причины ошибки
       * @example image_too_large
       * @enum {string}
       */
      value: "image_too_large";
    };
    /** Комментарий */
    ApplicantCommentsApplicantCommentItem: {
      /** @description Тип доступа для комментария. Возможные значения перечислены [в справочнике](#tag/Obshie-spravochniki/operation/get-dictionaries) в поле `applicant_comment_access_type` */
      access_type: components["schemas"]["ApplicantCommentsAccessType"] & Record<string, never>;
      /** @description Автор комментария */
      author: components["schemas"]["ApplicantCommentsAuthor"] & Record<string, never>;
      /** @description Дата создания комментария */
      created_at: string;
      /** @description Уникальный идентификатор комментария */
      id: string;
      /** @description Комментарий написан текущим пользователем? */
      is_mine: boolean;
      /** @description Текст комментария. Может содержать символы новой строки */
      text: string;
    };
    /** Тип доступа */
    ApplicantCommentsAccessType: {
      /** @description Идентификатор типа доступа */
      id: string;
      /** @description Название типа доступа */
      name: string;
    };
    /** Автор комментария */
    ApplicantCommentsAuthor: {
      /** @description ФИО автора комментария */
      full_name: string;
    };
    /** Успешный ответ */
    VacanciesVacancyListResponse: components["schemas"]["VacanciesActiveListItems"] | components["schemas"]["VacanciesMatchListItems"];
    /** Список вакансий, подходящих под резюме (?resume_id={resume_id}) */
    VacanciesMatchListItems: {
      /** @description Список вакансий, подходящих под резюме */
      items: components["schemas"]["VacanciesMatchListItem"][];
    } & components["schemas"]["_IncludesPagination"];
    /** Информация о вакансии, подходящей под резюме */
    VacanciesMatchListItem: components["schemas"]["VacanciesVacancyShort"] & components["schemas"]["VacanciesMatchVacancyFields"];
    /** Совпадение полей вакансии */
    VacanciesMatchVacancyFields: {
      address?: components["schemas"]["VacanciesAddress"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Можно ли пригласить соискателя на данную вакансию */
      can_invite: boolean;
      /** @description Дата и время публикации вакансии */
      created_at: string;
      /** @description Работодательское состояние отклика/приглашения для этой вакансии с указанным резюме, либо `null` если отклика/приглашения не было. Возможные значения перечислены в поле `employer_states` в [списке работодательских состояний по вакансии](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations) */
      employer_negotiations_state: components["schemas"]["_IncludesIdName"] | components["schemas"]["_IncludesNullableObject"] | null;
      manager: components["schemas"]["VacancyManagerOutput"];
      /** @description Действия для [создания отклика](#tag/Otklikipriglasheniya-rabotodatelya/operation/invite-applicant-to-vacancy). Если создать отклик невозможно (например, нет нужных услуг), то вернется пустой массив */
      negotiations_actions: components["schemas"]["VacancyNegotiationActions"][];
      /** @description Состояние отклика/приглашения для этой вакансии с указанным резюме, либо `null` если отклика/приглашения не было. Возможные значения перечислены в поле `negotiations_state` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      negotiations_state: components["schemas"]["_IncludesIdName"] | components["schemas"]["_IncludesNullableObject"] | null;
      /**
       * @description Расстояние в метрах между центром сортировки (заданной параметрами `sort_point_lat`, `sort_point_lng`) и указанным в вакансии адресом. В случае, если в адресе указаны только станции метро, выдается расстояние между центром сортировки и средней геометрической точкой указанных станций.
       * Значение `sort_point_distance` выдается только в случае, если заданы параметры `sort_point_lat`, `sort_point_lng`, `order_by=distance`
       */
      sort_point_distance?: number | null;
      /** @description Шаблоны писем */
      templates?: components["schemas"]["VacancyTemplates"][];
    };
    /** Менеджер */
    VacancyManagerOutput: {
      /** @description Имя менеджера */
      first_name: string;
      /** @description Контактное лицо (менеджер) по размещаемой вакансии, по умолчанию текущий пользователь */
      id: string;
      /** @description Фамилия менеджера */
      last_name: string;
      /** @description Второе имя менеджера */
      middle_name: string | null;
    };
    /** Адрес для вакансии */
    VacanciesAddress: components["schemas"]["VacancyAddressRawOutput"] & ({
      /** @description Показывать только метро для указанного адреса */
      show_metro_only?: boolean | null;
    });
    /** Список опубликованных вакансий (?resume_id не задан) */
    VacanciesActiveListItems: {
      /** @description Список опубликованных вакансий */
      items: components["schemas"]["VacanciesActiveListItem"][];
    } & components["schemas"]["_IncludesPagination"];
    /** Информация об опубликованной вакансии */
    VacanciesActiveListItem: components["schemas"]["VacanciesVacancyShort"] & components["schemas"]["VacancyBillingTypeObject"] & components["schemas"]["VacanciesActiveVacancyFields"];
    /** Тип биллинга */
    VacancyBillingTypeObject: {
      billing_type?: components["schemas"]["VacancyBillingTypeOutput"];
    };
    /**
     * Биллинговый тип вакансии
     * @description Биллинговый тип [из справочника vacancy_billing_type](#tag/Obshie-spravochniki/operation/get-dictionaries)
     */
    VacancyBillingTypeOutput: (components["schemas"]["VacancyBillingType"] & {
      /** @description Название биллингового типа вакансии */
      name?: string;
    }) | null;
    /** Поля в опубликованной вакансии */
    VacanciesActiveVacancyFields: {
      address?: components["schemas"]["VacanciesAddress"] | components["schemas"]["_IncludesNullableObject"] | null;
      can_upgrade_billing_type: components["schemas"]["VacancyCanUpgradeBillingType"];
      counters: components["schemas"]["VacancyCountersForActive"];
      /** @description Дата и время публикации вакансии */
      created_at: string;
      expires_at: components["schemas"]["VacancyExpiresAt"];
      has_updates: components["schemas"]["VacancyHasUpdates"];
      manager: components["schemas"]["VacancyManagerOutput"];
      /**
       * @description Расстояние в метрах между центром сортировки (заданной параметрами `sort_point_lat`, `sort_point_lng`) и указанным в вакансии адресом. В случае, если в адресе указаны только станции метро, выдается расстояние между центром сортировки и средней геометрической точкой указанных станций.
       * Значение `sort_point_distance` выдается только в случае, если заданы параметры `sort_point_lat`, `sort_point_lng`, `order_by=distance`
       */
      sort_point_distance?: number | null;
    };
    /** Счетчики */
    VacancyCountersForActive: {
      /** @description Общее количество звонков */
      calls?: number;
      /** @description Количество приглашений на вакансию */
      invitations: number;
      /** @description Количество откликнувшихся и приглашенных соискателей на вакансию */
      invitations_and_responses?: number;
      /** @description Общее количество новых пропущенных звонков */
      new_missed_calls?: number;
      /** @description Количество откликов на вакансию */
      responses: number;
      /** @description Количество резюме в работе на вакансию */
      resumes_in_progress: number;
      /** @description Количество непросмотренных откликов на вакансию */
      unread_responses: number;
      /** @description Количество просмотров вакансии */
      views: number;
    };
    /**
     * Date and time
     * @description Дата и время окончания публикации вакансии
     */
    VacancyExpiresAt: string;
    /**
     * Улучшение биллингового типа
     * @description Можно ли улучшить биллинговый тип вакансии
     */
    VacancyCanUpgradeBillingType: boolean;
    /** Успешный ответ */
    VacanciesDeletedVacancyListResponse: components["schemas"]["_IncludesPagination"] & components["schemas"]["VacanciesDeletedVacancyListItems"];
    /** Список удаленных вакансий */
    VacanciesDeletedVacancyListItems: {
      /** @description Список удаленных вакансий */
      items: components["schemas"]["VacanciesVacancyArchived"][];
    };
    /** Департаменты работодателя */
    EmployersEmployerDepartmentsResponse: {
      /** @description Список департаментов работодателя */
      items: components["schemas"]["_IncludesIdName"][];
    };
    /** Параметры для получения токена пользователя */
    AuthCode: {
      /**
       * @description Идентификатор, полученный при [создании приложения](https://dev.hh.ru/admin)
       * @example ETVQdMs2n9VKw7SMXkh9nX5H
       */
      client_id: string;
      /**
       * @description Защищенный ключ, полученный при [создании приложения](https://dev.hh.ru/admin)
       * @example 95dNjB8FmtxQsmygm6dtEy53
       */
      client_secret: string;
      /**
       * @description Значение `authorization_code`, полученное при [перенаправлении пользователя](#get-authorization_code)
       *
       * @example 29CtxMcaA8pRFDYyC8e8Gkm4
       */
      code: string;
      /**
       * @description Способ запроса токена
       * @example authorization_code
       * @enum {string}
       */
      grant_type: "authorization_code";
      /**
       * @description Uri для перенаправления пользователя после авторизации. Если не указать, используется из настроек приложения. При наличии происходит валидация значения. Вероятнее всего, потребуется сделать urlencode значения параметра
       *
       * @example http://www.example.com/oauth
       */
      redirect_uri: string;
    };
    /**
     * Ошибка параметров запроса
     * @description Ошибка параметров запроса
     */
    WebhookBadDataError: components["schemas"]["ErrorsCommonBadJsonDataErrors"] | components["schemas"]["WebhookErrors"];
    /**
     * Бизнес ошибки
     * @description Информация о возникших ошибках
     */
    WebhookErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["WebhookError"][];
    };
    /** Ошибка */
    WebhookError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example notifications
       */
      type: string;
      /**
       * @description Описание ошибки:
       *   * already_exist - У текущего пользователя/компании уже есть подписка для данного приложения (включая подписку на резюме)
       *
       * @example already_exist
       * @enum {string}
       */
      value: "already_exist";
    };
    /**
     * Подсказки по регионам
     * @description Подсказки по регионам
     */
    SuggestsAreas: {
      /**
       * Массив регионов
       * @description Информация о найденных регионах
       */
      items: components["schemas"]["SuggestsAreasItem"][];
    };
    /** Регион */
    SuggestsAreasItem: {
      /** @description Идентификатор региона */
      id: string;
      /** @description Название региона */
      text: string;
      /** @description URL региона */
      url: string;
    };
    /** Список регионов */
    DictionariesAreaResponse: components["schemas"]["DictionariesAreaItem"][];
    /** История откликов/приглашений по резюме */
    ResumesResumeNegotiationsHistoryResponse: {
      /** @description Массив вакансий */
      vacancies: components["schemas"]["ResumesResumeNegotiationsHistoryVacancy"][];
    };
    /** Статистика откликов для менеджера */
    NegotiationsNegotiationsStatisticsManagerResponse: {
      manager_statistics: components["schemas"]["NegotiationsNegotiationsStatistics"];
    };
    /** Вакансия */
    VacanciesVacancy: components["schemas"]["VacanciesVacancyForApplicant"] | components["schemas"]["VacanciesVacancyForManager"];
    /** Информация о вакансии при запросе от менеджера */
    VacanciesVacancyForManager: components["schemas"]["VacanciesVacancyCommonFields"] & components["schemas"]["VacancyBillingTypeObject"] & components["schemas"]["VacanciesVacancyManagerFields"] & ({
      /** @description Идентификатор архивной вакансии, на основе которой была опубликована текущая вакансия. Если вакансия была создана самостоятельно - null */
      previous_id?: string | null;
    });
    /** Поля менеджера вакансии */
    VacanciesVacancyManagerFields: {
      address: components["schemas"]["VacanciesAddress"];
      archived_at?: components["schemas"]["VacancyArchivedAt"] | components["schemas"]["_IncludesNullableObject"] | null;
      branded_template: components["schemas"]["VacancyBrandedTemplate"];
      can_upgrade_billing_type: components["schemas"]["VacancyCanUpgradeBillingType"];
      counters?: components["schemas"]["VacancyCountersOutput"];
      expires_at: components["schemas"]["VacancyExpiresAt"];
      hidden: components["schemas"]["VacancyHidden"];
      manager: components["schemas"]["VacancyManager"];
      response_notifications: components["schemas"]["VacancyResponseNotifications"];
    };
    /** Ответ - счетчики */
    VacancyCountersOutput: {
      /** @description Общее количество звонков */
      calls: number;
      /** @description Количество приглашений на вакансию */
      invitations: number;
      /** @description Количество откликнувшихся и приглашенных соискателей на вакансию */
      invitations_and_responses: number;
      /** @description Общее количество новых пропущенных звонков */
      new_missed_calls: number;
      /** @description Количество откликов на вакансию */
      responses: number;
      /** @description Количество резюме в работе на вакансию */
      resumes_in_progress: number;
      /** @description Количество непросмотренных откликов на вакансию */
      unread_responses: number;
      /** @description Количество просмотров вакансии */
      views: number;
    };
    /**
     * Дата архивации вакансии
     * @description Дата архивации вакансии
     */
    VacancyArchivedAt: string;
    /**
     * Удалена ли вакансия
     * @description Удалена ли вакансия (скрыта из архива)
     */
    VacancyHidden: boolean;
    /** Обычные поля вакансии */
    VacanciesVacancyCommonFields: {
      accept_handicapped: components["schemas"]["VacancyAcceptHandicapped"];
      accept_incomplete_resumes: components["schemas"]["VacancyAcceptIncompleteResumes"];
      accept_kids: components["schemas"]["VacancyAcceptKids"];
      accept_temporary?: components["schemas"]["VacancyAcceptTemporary"];
      allow_messages: components["schemas"]["VacancyAllowMessages"];
      alternate_url: components["schemas"]["VacancyAlternateUrl"];
      apply_alternate_url: components["schemas"]["VacancyApplyAlternateUrl"];
      approved: components["schemas"]["VacancyApproved"];
      archived: components["schemas"]["VacancyArchived"];
      area: components["schemas"]["_IncludesArea"];
      billing_type: components["schemas"]["VacancyBillingTypeOutput"];
      /** @deprecated */
      branded_description?: components["schemas"]["VacancyBrandedDescription"] | components["schemas"]["_IncludesNullableObject"] | null;
      code?: components["schemas"]["VacancyCode"];
      contacts?: components["schemas"]["VacancyContactsOutput"];
      /** @deprecated */
      created_at: components["schemas"]["VacancyCreatedAt"];
      department?: components["schemas"]["VacanciesObjectsDepartment"];
      description: components["schemas"]["VacancyDescription"];
      driver_license_types: components["schemas"]["VacancyDriverLicenseTypes"];
      employer?: components["schemas"]["VacanciesVacancyEmployer"] | components["schemas"]["_IncludesNullableObject"] | null;
      employment?: components["schemas"]["VacancyEmploymentOutput"];
      experience: components["schemas"]["VacancyExperienceOutput"];
      has_test: components["schemas"]["VacancyHasTest"];
      id: components["schemas"]["VacancyId"];
      initial_created_at: components["schemas"]["VacancyInitialCreatedAt"];
      insider_interview?: components["schemas"]["VacanciesObjectsInsiderInterview"];
      key_skills: components["schemas"]["VacancyKeySkills"];
      languages?: components["schemas"]["VacancyLanguagesOutput"] | components["schemas"]["_IncludesNullableObject"] | null;
      name: components["schemas"]["VacancyName"];
      /** @description Ссылка для получения списка откликов/приглашений */
      negotiations_url?: string | null;
      premium: components["schemas"]["VacancyPremium"];
      professional_roles: components["schemas"]["VacancyProfessionalRolesOutput"];
      published_at: components["schemas"]["VacancyCreatedAt"];
      relations?: components["schemas"]["VacancyRelations"];
      response_letter_required: components["schemas"]["VacancyResponseLetterRequired"];
      response_url?: components["schemas"]["VacancyResponseUrl"];
      salary?: components["schemas"]["VacancySalary"];
      schedule: components["schemas"]["VacancyScheduleOutput"];
      /** @description Подходящие резюме на вакансию */
      suitable_resumes_url?: string | null;
      test?: components["schemas"]["VacancyDraftTest"];
      /** @description Идентификатор типа вакансии из справочника [`vacancy_type`](https://api.hh.ru/openapi/redoc#tag/Obshie-spravochniki/operation/get-dictionaries) */
      type: components["schemas"]["_IncludesIdName"];
      /** @deprecated */
      vacancy_constructor_template?: components["schemas"]["VacancyVacancyConstructorTemplate"] | components["schemas"]["_IncludesNullableObject"] | null;
      video_vacancy?: components["schemas"]["VacancyVideoVacancy"] | components["schemas"]["_IncludesNullableObject"] | null;
      working_days?: components["schemas"]["VacancyWorkingDaysOutput"];
      working_time_intervals?: components["schemas"]["VacancyWorkingTimeIntervalsOutput"];
      working_time_modes?: components["schemas"]["VacancyWorkingTimeModesOutput"];
    };
    /**
     * Дата и время создания вакансии
     * @description Дата и время создания вакансии
     */
    VacancyInitialCreatedAt: string;
    /**
     * Шаблон конструктора вакансии
     * @description Информация по примененному брендированному шаблону конструктора вакансии. Поддерживается только две картинки: верхняя — в шапке вакансии, нижняя — в самом низу
     */
    VacancyVacancyConstructorTemplate: {
      /** @description Информация по нижней картинке шаблона */
      bottom_picture?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacancyPicture"] | null;
      /** @description ID шаблона */
      id?: number;
      /** @description Название шаблона */
      name?: string;
      /** @description Информация по верхней картинке шаблона */
      top_picture?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["VacancyPicture"] | null;
    };
    /** Картинка */
    VacancyPicture: {
      /** @description Путь до маленькой (порядка 4% от изначального размера) размытой картинки. При показе ее нужно преобразовать к нужному размеру */
      blurred_path?: string | null;
      /** @description Высота картинки */
      height?: number;
      /** @description Адрес картинки */
      path?: string;
      /** @description Ширина картинки */
      width?: number;
    };
    /**
     * Идентификатор вакансии
     * @description Идентификатор вакансии
     */
    VacancyId: string;
    /**
     * Языки вакансии
     * @description Список языков вакансии. Значения из справочника [/languages](#tag/Obshie-spravochniki/operation/get-dictionaries)
     */
    VacancyLanguagesOutput: components["schemas"]["VacancyLanguageOutput"][];
    /** Язык */
    VacancyLanguageOutput: components["schemas"]["VacancyLanguage"] & {
      level?: {
        /** @description Идентификатор уровня владения языком */
        id: string;
        /** @description Название уровня владения языком */
        name: string;
      };
      /** @description Название языка */
      name: string;
    };
    /**
     * Находится ли данная вакансия в архиве
     * @description Находится ли данная вакансия в архиве
     */
    VacancyArchived: boolean;
    /**
     * Ссылка на отклик на вакансию на сайте
     * @description Ссылка на отклик на вакансию на сайте
     */
    VacancyApplyAlternateUrl: string;
    /**
     * Есть ли тестовое задание
     * @description Информация о наличии прикрепленного тестового задании к вакансии
     */
    VacancyHasTest: boolean;
    /**
     * Описание брендирования
     * @description Строка с кодом HTML (возможно наличие `<script/>` и `<style/>`), которая является альтернативой стандартному описанию вакансии.
     *
     * HTML адаптирован для мобильных устройств и корректно отображается без поддержки JavaScript. При этом:
     *
     * * Содержимое растягивается на 100% ширины контейнера и умещается в 300px без прокрутки.
     * * Содержимое рассчитано на то, что оно будет вставлено в обвязку, в которую входит название, требуемый опыт работы, регион, тип занятости и рабочего дня вакансии, а также ссылка на компанию, опубликовавшую вакансию.
     * * Изображения, которые могут встретиться в таком описании, адаптированы под Retina-дисплеи.
     * * Размер шрифта не меньше 12px, размер межстрочного интервала не меньше 16px.
     *
     * Значение может быть `null`, если у вакансии отсутствует индивидуальное описание
     */
    VacancyBrandedDescription: string;
    /**
     * Является ли данная вакансия премиум-вакансией
     * @description Является ли данная вакансия премиум-вакансией
     */
    VacancyPremium: boolean;
    /**
     * Прошла ли вакансия модерацию
     * @description Прошла ли вакансия модерацию
     */
    VacancyApproved: boolean;
    /**
     * Видео вакансия
     * @description Данные по видео вакансии, либо `null`, если она не подключена
     */
    VacancyVideoVacancy: {
      cover_picture?: components["schemas"]["VacancyVideoVacancyCoverPicture"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Ссылка для скачивания видео */
      video_url?: string;
    };
    /**
     * Обложка видео вакансии
     * @description Обложка видео вакансии, либо `null`, если обложка отсутствует
     */
    VacancyVideoVacancyCoverPicture: {
      /** @description Высота изображения */
      resized_height: number;
      /** @description Ссылка на изображение */
      resized_path: string;
      /** @description Ширина изображения */
      resized_width: number;
    };
    /** Поля работодателя в вакансии */
    VacanciesVacancyEmployer: components["schemas"]["VacanciesEmployerPublic"] & components["schemas"]["VacancyEmployerBlacklisted"] & components["schemas"]["_IncludesEmployerApplicantServicesObject"] & components["schemas"]["VacancyEmployerBages"];
    /** Услуги для соискателя */
    _IncludesEmployerApplicantServicesObject: {
      applicant_services?: components["schemas"]["_IncludesEmployerApplicantServices"];
    };
    /** Плашка работодателя */
    VacancyEmployerBages: Record<string, never>;
    /** Информация о компании работодателя */
    VacancyEmployerBlacklisted: {
      /** @description Добавлены ли все вакансии работодателя в [список скрытых](#tag/Skrytye-rabotodateli) */
      blacklisted?: boolean;
    };
    /**
     * Ссылка на представление вакансии на сайте
     * @description Ссылка на представление вакансии на сайте
     */
    VacancyAlternateUrl: string;
    /**
     * Дата и время публикации вакансии
     * @description Дата и время публикации вакансии
     */
    VacancyCreatedAt: string;
    /** Информация о вакансии с токеном соискателя или приложения */
    VacanciesVacancyForApplicant: components["schemas"]["VacanciesVacancyCommonFields"] & components["schemas"]["VacancyHiddenDeprecated"] & components["schemas"]["VacancyBillingTypeObject"] & components["schemas"]["VacancyAddressCommon"] & Record<string, never>;
    /**
     * Адрес
     * @description Адрес
     */
    VacancyAddressCommon: ({
      address?: components["schemas"]["VacancyAddressOutput"] | components["schemas"]["_IncludesNullableObject"] | null;
    }) | null;
    /** Удалена ли вакансия */
    VacancyHiddenDeprecated: {
      /**
       * @deprecated
       * @description Удалена ли вакансия (скрыта из архива). Оставлено для обеспечения обратной совместимости
       */
      hidden?: boolean;
    };
    /** Список доступных локалей */
    LocalesLocales: components["schemas"]["LocalesLocaleItem"][];
    /** Локаль */
    LocalesLocaleItem: components["schemas"]["LocalesResumeLocaleItem"] & {
      /** @description Для текущей локали `true` , `false` для остальных */
      current: boolean;
    };
    /** Город */
    MetroCityMetroItem: {
      /** @description Идентификатор города */
      id: string;
      /** @description Список линий метро в городе */
      lines: components["schemas"]["MetroMetroLineWithStations"][];
      /** @description Название города */
      name: string;
    };
    /** Линия метро со станциями */
    MetroMetroLineWithStations: components["schemas"]["MetroMetroLine"] & {
      /** @description Список станций метро на линии */
      stations: components["schemas"]["MetroLineStation"][];
    };
    /** Линия метро */
    MetroMetroLine: {
      /** @description Цвет линии в HEX-формате `RRGGBB` (от `000000` до `FFFFFF`) */
      hex_color: string;
      /** @description Идентификатор линии */
      id: string;
      /** @description Название линии */
      name: string;
    };
    /** Станция метро */
    MetroLineStation: {
      /** @description Идентификатор станции */
      id: string;
      /** @description Широта расположения станции */
      lat: number;
      /** @description Линия метро */
      line: components["schemas"]["MetroMetroLine"];
      /** @description Долгота расположения станции */
      lng: number;
      /** @description Название станции */
      name: string;
      /** @description Порядковый номер станции на линии, начиная с 0 */
      order: number;
    };
    /** Ошибка */
    ErrorsDraftError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example vacancy
       * @enum {string}
       */
      type: "vacancy";
      /**
       * @description Значение ошибки
       * @example vacancy_draft_limit_exceeded
       * @enum {string}
       */
      value: "vacancy_draft_limit_exceeded";
    };
    /** Редактируемые поля вакансии */
    VacancyEdit: components["schemas"]["VacancyEditCommon"] | components["schemas"]["VacancyEditBillingType"] | components["schemas"]["VacancyEditManager"];
    /** Поля вакансии, которые можно отредактировать одновременно */
    VacancyEditCommon: components["schemas"]["VacancyCommonFields"] & components["schemas"]["VacancyEditFields"];
    /**
     * Поля для редактирование вакансии
     * @description Поля, передаваемые в запросе на редактирование вакансии
     */
    VacancyEditFields: {
      description?: components["schemas"]["VacancyDescription"] | components["schemas"]["_IncludesNullableObject"] | null;
      name?: components["schemas"]["VacancyName"] | components["schemas"]["_IncludesNullableObject"] | null;
    };
    /**
     * Смена менеджера вакансии
     * @description Поле, передаваемое в запросе при смене менеджера вакансии
     */
    VacancyEditManager: {
      /** @description Идентификатор менеджера, которому надо передать автопоиск из ([списка менеджеров компании](#tag/Menedzhery-rabotodatelya/operation/get-employer-managers)) */
      manager: components["schemas"]["_IncludesId"] | null;
    };
    /**
     * Смена биллингового типа
     * @description Поле, передаваемое в запросе при смене биллингового типа вакансии. Биллинговый тип можно только улучшать
     */
    VacancyEditBillingType: {
      billing_type: components["schemas"]["VacancyBillingType"];
    };
    /** Перечень групп с доступом к платным методам */
    EmployerServicesMethodAccess: {
      /** Перечень групп с доступом к платным методам */
      items: components["schemas"]["EmployerServicesMethodAccessItem"][];
    };
    /** Группа методов */
    EmployerServicesMethodAccessItem: {
      /** @description Информация о доступе к платному методу */
      access: {
        /** @description Признак наличия доступа к группе методов */
        has_access: boolean;
      };
      /** @description Описание группы методов */
      description: string;
      /** @description Идентификатор группы методов */
      id: string;
    };
    /**
     * Резюме
     * @description Тело запроса при редактировании резюме
     */
    ResumeEditResumeRequest: components["schemas"]["ResumeNullableFields"] & ({
      /** @description Город проживания. Элемент справочника [areas](#tag/Obshie-spravochniki/operation/get-areas) */
      area?: components["schemas"]["ResumeObjectsOneOfId"];
      /** @description Список гражданств соискателя. Элементы [справочника регионов](#tag/Obshie-spravochniki/operation/get-areas) */
      citizenship?: components["schemas"]["_IncludesId"][] | null;
      /**
       * @description Список контактов соискателя.
       *
       * При заполнении контактов в резюме необходимо учитывать следующие условия:
       *
       * * В резюме обязательно должен быть указан e-mail. Он может быть только один.
       * * В резюме должен быть указан хотя бы один телефон, причём можно указывать только один телефон каждого типа.
       * * Комментарий можно указывать только для телефонов, для e-mail комментарий не сохранится
       * * Обязательно указать либо телефон полностью в поле `formatted`, либо все три части телефона по отдельности в трёх полях: `country`, `city` и `number`. Если указано и то, и то, используются данные из трёх полей. В поле `formatted` допустимо использовать пробелы, скобки и дефисы. В остальных полях допустимы только цифры
       */
      contact?: components["schemas"]["_IncludesContact"][] | null;
      /**
       * @description Образование соискателя.
       *
       * Особенности сохранения образования:
       *
       * * Если передать и высшее и среднее образование и уровень образования "средний", то сохранится только среднее образование.
       * * Если передать и высшее и среднее образование и уровень образования "высшее", то сохранится только высшее образование
       */
      education?: components["schemas"]["ResumeObjectsOneOfEducation"];
      /** @description Опыт работы */
      experience?: components["schemas"]["ResumeObjectsExperience"][] | null;
      /** @description Пол. Элемент справочника [gender](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      gender?: components["schemas"]["ResumeObjectsOneOfId"];
      /** @description Список языков, которыми владеет соискатель. Элементы справочника [languages](#tag/Obshie-spravochniki/operation/get-languages) */
      language?: components["schemas"]["_IncludesLanguageLevel"][] | null;
    });
    /** Образование - поле резюме */
    ResumeObjectsOneOfEducation: components["schemas"]["ResumeObjectsEducation"] | components["schemas"]["_IncludesNullableObject"];
    /** Id - поле резюме */
    ResumeObjectsOneOfId: components["schemas"]["Id"] | components["schemas"]["_IncludesNullableObject"];
    /** Успешный ответ */
    ApplicantCommentsApplicantCommentsList: components["schemas"]["ApplicantCommentsApplicantCommentItems"] & components["schemas"]["_IncludesPagination"];
    /** Коллекция со списком комментариев */
    ApplicantCommentsApplicantCommentItems: {
      /** @description Список комментариев */
      items: components["schemas"]["ApplicantCommentsApplicantCommentItem"][];
    };
    /** Информация о возможности создания резюме */
    ResumesCreationAvailability: {
      /** @description Количество созданных резюме */
      created: number;
      /** @description Доступно ли создание новых резюме для данного пользователя */
      is_creation_available: boolean;
      /** @description Максимально возможное количество резюме */
      max: number;
      /** @description Количество доступных для создания резюме */
      remaining: number;
    };
    /**
     * Условия заполнения полей резюме
     * @description Условия заполнения полей резюме.
     *
     * Поле, представленное объектом с полями (`fields`), само по себе может не являться необходимым, но если заполнено хотя бы одно поле объекта, необходимо заполнить и другие его поля. Пример — желаемая зарплата (`salary`) может быть не указана, но если указана сумма, то необходимо указать и валюту
     */
    ResumesResumeConditions: {
      access?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsAccessCondition"] | null;
      area?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      /** @description Поле доступно для просмотра и редактирования только для пользователей rabota.by */
      auto_hide_time?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      birth_date?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredDateWithTitle"] | null;
      business_trip_readiness?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      citizenship?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      contact?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsContactCondition"] | null;
      district?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      driver_license_types?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      education?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsEducationCondition"] | null;
      employment?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      employments?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      experience?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsExperienceCondition"] | null;
      first_name?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthTitleRegexp"] | null;
      gender?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      has_vehicle?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      hidden_fields?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      language?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsLanguageCondition"] | null;
      last_name?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthTitleRegexp"] | null;
      metro?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      middle_name?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthTitleRegexp"] | null;
      photo?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      portfolio?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      professional_roles?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      recommendation?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRecommendationCondition"] | null;
      relocation?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRelocationCondition"] | null;
      resume_locale?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      salary?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsSalaryCondition"] | null;
      schedule?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      schedules?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      site?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsSiteCondition"] | null;
      skill_set?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountAndLengthTitle"] | null;
      skills?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      specialization?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      title?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthTitleNotInt"] | null;
      travel_time?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      work_ticket?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      [key: string]: unknown;
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsRequiredCountAndLengthTitle: components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] & components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"];
    /** Условия для поля */
    ResumesResumeConditionFieldsRequiredCountWithTitle: components["schemas"]["ResumesResumeConditionFieldsMaxMinCount"] & components["schemas"]["ResumesResumeConditionFieldsRequired"];
    /** Необходимость поля резюме */
    ResumesResumeConditionFieldsRequired: {
      /** @description Является ли поле необходимым? Для строковых значений поле не должно быть `null` или `""` */
      required?: boolean | null;
    };
    /** Условия по количеству полей */
    ResumesResumeConditionFieldsMaxMinCount: {
      /** @description Максимальное количество объектов для полей, в которых передается список. Если `null` — количество неограниченно */
      max_count?: number | null;
      /** @description Минимальное количество объектов для полей,, где необходимо передавать список. Если `null` — нижняя граница не определена */
      min_count?: number | null;
    };
    /** Условия для поля */
    ResumesResumeConditionFieldsRequiredLengthWithTitle: components["schemas"]["ResumesResumeConditionFieldsMaxMinLength"] & components["schemas"]["ResumesResumeConditionFieldsRequired"];
    /** Условия по длине текстовых полей */
    ResumesResumeConditionFieldsMaxMinLength: {
      /**
       * @description Максимальная длина для текстовых полей. Рассчитывается для текста без символов переноса строки (`
       * `). `null` — если количество не ограничено
       */
      max_length?: number | null;
      /**
       * @description Минимальная длина для текстовых полей. Рассчитывается для текста без символов переноса строки (`
       * `). `null` — если количество не ограничено
       */
      min_length?: number | null;
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsRecommendationCondition: components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] & {
      fields?: components["schemas"]["ResumesResumeConditionFieldsRecommendationFields"];
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsRecommendationFields: ({
      name?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      organization?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      position?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
    }) | null;
    /** Условия для полей */
    ResumesResumeConditionFieldsSiteCondition: components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] & {
      fields?: components["schemas"]["ResumesResumeConditionFieldsSiteFields"];
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsSiteFields: ({
      type?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      url?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
    }) | null;
    /** Условия для поля */
    ResumesResumeConditionFieldsRequiredWithTitle: Record<string, never> & components["schemas"]["ResumesResumeConditionFieldsRequired"];
    /** Условия для полей */
    ResumesResumeConditionFieldsLanguageCondition: components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] & {
      fields?: components["schemas"]["ResumesResumeConditionFieldsLanguageFields"];
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsLanguageFields: ({
      id?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      level?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
    }) | null;
    /** Условия для полей */
    ResumesResumeConditionFieldsContactCondition: components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] & {
      fields?: components["schemas"]["ResumesResumeConditionFieldsContactFields"];
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsContactFields: ({
      comment?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      preferred?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      type?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      value?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
    }) | null;
    /** Условия для полей */
    ResumesResumeConditionFieldsSalaryCondition: components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] & {
      fields?: components["schemas"]["ResumesResumeConditionFieldsSalaryFields"];
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsSalaryFields: ({
      amount?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredValueWithTitle"] | null;
      currency?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
    }) | null;
    /** Условия для поля */
    ResumesResumeConditionFieldsRequiredValueWithTitle: components["schemas"]["ResumesResumeConditionFieldsMaxMinValue"] & components["schemas"]["ResumesResumeConditionFieldsRequired"];
    /** Условия по границам числовых значений */
    ResumesResumeConditionFieldsMaxMinValue: {
      /** @description Верхняя граница диапазона числовых значений, включительно. `null` — если верхняя граница не определена */
      max_value?: number | null;
      /** @description Нижняя граница диапазона числовых значений, включительно. `null` — если нижняя граница не определена */
      min_value?: number | null;
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsEducationCondition: components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] & {
      fields?: components["schemas"]["ResumesResumeConditionFieldsEducationFields"];
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsEducationFields: ({
      additional?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsEducationPrimaryCondition"] | null;
      attestation?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsEducationPrimaryCondition"] | null;
      elementary?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsEducationElementaryCondition"] | null;
      level?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      primary?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsEducationPrimaryCondition"] | null;
    }) | null;
    /** Условия для полей */
    ResumesResumeConditionFieldsEducationElementaryCondition: components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] & {
      fields?: components["schemas"]["ResumesResumeConditionFieldsElementaryEducationFields"];
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsElementaryEducationFields: ({
      name?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      year?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredValueWithTitle"] | null;
    }) | null;
    /** Условия для полей */
    ResumesResumeConditionFieldsEducationPrimaryCondition: components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] & {
      fields?: components["schemas"]["ResumesResumeConditionFieldsPrimaryEducationFields"];
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsPrimaryEducationFields: ({
      name?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      organization?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      result?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      year?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredValueWithTitle"] | null;
    }) | null;
    /** Условия для полей */
    ResumesResumeConditionFieldsRelocationCondition: components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] & {
      fields?: components["schemas"]["ResumesResumeConditionFieldsRelocationFields"];
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsRelocationFields: ({
      area?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      district?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      type?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
    }) | null;
    /** Условия для полей */
    ResumesResumeConditionFieldsRequiredLengthTitleRegexp: components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] & components["schemas"]["ResumesResumeConditionFieldsRegexp"];
    /** Регулярные выражения для поля */
    ResumesResumeConditionFieldsRegexp: {
      /** @description Регулярное выражение, которому должно отвечать значение поля */
      regexp?: string | null;
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsRequiredLengthTitleNotInt: components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] & components["schemas"]["ResumesResumeConditionFieldsNotIn"];
    /** Недопустимые значения */
    ResumesResumeConditionFieldsNotIn: {
      /** @description Список недопустимых значений */
      not_in?: string[] | null;
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsExperienceCondition: components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] & {
      fields?: components["schemas"]["ResumesResumeConditionFieldsExperienceFields"];
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsExperienceFields: ({
      area?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      company?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      company_url?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      description?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      end?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredDateWithTitle"] | null;
      industries?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredCountWithTitle"] | null;
      industry?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
      position?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredLengthWithTitle"] | null;
      start?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredDateWithTitle"] | null;
    }) | null;
    /** Условия для поля */
    ResumesResumeConditionFieldsRequiredDateWithTitle: components["schemas"]["ResumesResumeConditionFieldsMaxMinDate"] & components["schemas"]["ResumesResumeConditionFieldsRequired"];
    /** Условия по диапазону дат */
    ResumesResumeConditionFieldsMaxMinDate: {
      /** @description Верхняя граница диапазона значений дат, включительно. Если `null` — верхняя граница даты не определена */
      max_date?: string | null;
      /** @description Нижняя граница диапазона значений дат, включительно. Если `null` — нижняя граница даты не определена */
      min_date?: string | null;
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsAccessCondition: components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] & {
      fields?: components["schemas"]["ResumesResumeConditionFieldsAccessFields"];
    };
    /** Условия для полей */
    ResumesResumeConditionFieldsAccessFields: ({
      type?: components["schemas"]["_IncludesNullableObject"] | components["schemas"]["ResumesResumeConditionFieldsRequiredWithTitle"] | null;
    }) | null;
    /**
     * Ошибки
     * @description Информация о возникших ошибках
     */
    ErrorsSavedSearchForbiddenErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /**
       * @description Описание ошибки
       * @example Forbidden
       */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsSavedSearchForbiddenError"][];
    };
    /** Ошибка */
    ErrorsSavedSearchForbiddenError: {
      /**
       * @description Список доступных для токена аккаунтов менеджера в случае, если используемый рабочий аккаунт заблокирован.
       * Актуально только в случае авторизации работодателя
       */
      allowed_accounts?: components["schemas"]["ManagerAccount"][];
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example oauth
       * @enum {string}
       */
      type: "saved_searches" | "forbidden" | "oauth";
      /**
       * @description Возможные ошибки:
       * * `cant_send_to_yourself` — Нельзя передать сохраненный поиск самому себе
       * * `user_auth_expected` — Передана авторизация приложения, метод требует [авторизации пользователя](#section/Avtorizaciya/Avtorizaciya-polzovatelya)
       *
       * @example user_auth_expected
       * @enum {string}
       */
      value?: "cant_send_to_yourself" | "user_auth_expected";
    };
    /** ФИО */
    MeChangeName: {
      /**
       * @description Имя
       * @example Иван
       */
      first_name: string;
      /**
       * @description Фамилия
       * @example Иванов
       */
      last_name: string;
      /**
       * @description Отчество, поле может быть пустым
       * @example Иванович
       */
      middle_name: string;
    };
    /** Ошибки */
    ErrorsVacancyFavoritedCombinedBadAuthErrors: components["schemas"]["ErrorsCommonBadAuthorizationErrors"] | components["schemas"]["ErrorsVacancyFavoritedBadAuthErrors"];
    /**
     * Ошибки добавления вакансии в отобранное
     * @description Информация о возникших ошибках
     */
    ErrorsVacancyFavoritedBadAuthErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /**
       * @description Описание ошибки
       * @example Forbidden
       */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsVacancyFavoritedBadAuthError"][];
    };
    /** Ошибка добавления вакансии в отобранные */
    ErrorsVacancyFavoritedBadAuthError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example vacancies_favorited
       * @enum {string}
       */
      type: "vacancies_favorited";
      /**
       * @description Возможные ошибки:
       *   * `vacancy_archived` — Вакансия уже в архиве и не может быть добавлена в отобранное
       *   * `limit_exceeded` — Превышен лимит количества отобранных вакансий
       *
       * @example vacancy_archived
       * @enum {string}
       */
      value: "vacancy_archived" | "limit_exceeded";
    };
    /** Отобранные вакансии */
    VacanciesVacanciesFavoritedResponse: components["schemas"]["_IncludesPagination"] & components["schemas"]["VacanciesVacanciesFavorited"];
    /** Отобранные вакансии */
    VacanciesVacanciesFavorited: {
      /** @description Массив отобранных вакансий */
      items?: components["schemas"]["VacanciesVacanciesFavoritedItem"][];
    };
    /** Отобранная вакансия */
    VacanciesVacanciesFavoritedItem: {
      address?: components["schemas"]["VacancyAddressRawOutput"];
      /** @description URL для регистрации нажатия кнопки отклика */
      adv_response_url?: string | null;
      /** @description Ссылка на представление вакансии на сайте */
      alternate_url: string;
      /** @description Ссылка на отклик на вакансию на сайте */
      apply_alternate_url: string;
      /** @description Находится ли данная вакансия в архиве */
      archived: boolean;
      area: components["schemas"]["_IncludesArea"];
      /** @description Дата и время публикации вакансии */
      created_at?: string;
      department: components["schemas"]["VacanciesObjectsDepartment"];
      employer: components["schemas"]["VacanciesEmployerPublic"];
      /** @description Информация о наличии прикрепленного тестового задании к вакансии */
      has_test: boolean;
      /** @description Идентификатор вакансии */
      id: string;
      insider_interview?: components["schemas"]["VacanciesObjectsInsiderInterview"];
      name: components["schemas"]["VacancyName"];
      /** @description Ссылка для получения списка откликов/приглашений */
      negotiations_url?: string | null;
      /** @description Является ли данная вакансия премиум-вакансией */
      premium: boolean;
      /** @description Дата и время публикации вакансии */
      published_at: string;
      relations: components["schemas"]["VacancyRelations"];
      response_letter_required: components["schemas"]["VacancyResponseLetterRequired"];
      response_url?: components["schemas"]["VacancyResponseUrl"];
      salary: components["schemas"]["VacancySalary"];
      sort_point_distance?: components["schemas"]["VacancySortPointDistance"];
      /** @description Подходящие резюме на вакансию */
      suitable_resumes_url?: string | null;
      type: components["schemas"]["VacancyTypeOutput"];
      /** @description URL вакансии */
      url: string;
    };
    /** JSON c редактируемыми параметрами менеджера */
    EmployerManagersManagerData: {
      /** @description Дополнительный телефон менеджера */
      additional_phone?: components["schemas"]["EmployerManagersPhone"] & Record<string, never>;
      /** @description Список прав, которые можно дать данному типу менеджера */
      permissions?: components["schemas"]["EmployerManagerTypesAvailablePermissions"][];
      /** @description Основной телефон менеджера */
      phone?: components["schemas"]["EmployerManagersPhone"] & Record<string, never>;
      /** Должность менеджера */
      position?: string;
    };
    /** Список всех районов во всех городах */
    DictionariesDistrictsResponse: components["schemas"]["DictionariesDistrictItem"][];
    /** Город */
    DictionariesDistrictItem: {
      /** @description Идентификатор города */
      area_id: string;
      /** @description Идентификатор района */
      id: string;
      /** @description Название района */
      name: string;
    };
    /** Тело запроса */
    VacanciesVacancyApplicationBody: {
      /**
       * @description Сопроводительное письмо к отклику.
       *
       * Является обязательным, если в вакансии указано, что обязательно сопроводительное письмо.
       *
       * Максимальная длина — 10000 символов
       */
      message?: string | null;
      /** @description Идентификатор резюме, которым производится отклик */
      resume_id: string;
      /** @description Идентификатор вакансии, на которую происходит отклик */
      vacancy_id: string;
    };
    /** Ошибка */
    SuggestsErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & ({
      /**
       * @deprecated
       * @enum {string}
       */
      bad_argument?: "locale" | "text" | "area_id";
      /** @deprecated */
      bad_arguments?: ({
        description?: string;
        /**
         * @description Поле, в котором допущена ошибка.
         * Возможные значения:
         * * `locale` — указан неподдерживаемый язык
         * * `text` — искомый текст должен быть длиной от 2 до 30000 символов
         * * `area_id` - указан не валидный идентификатор
         *
         * @enum {string}
         */
        name?: "locale" | "text" | "area_id";
      })[];
      /** @deprecated */
      description?: string;
      errors: ({
        /** @enum {string} */
        type?: "bad_argument";
        /**
         * @description Поле, в котором допущена ошибка.
         * Возможные значения:
         * * `locale` — указан неподдерживаемый язык
         * * `text` — искомый текст должен быть длиной от 2 до 30000 символов
         * * `area_id` - указан не валидный идентификатор
         *
         * @enum {string}
         */
        value?: "locale" | "text" | "area_id";
      })[];
    });
    /**
     * Ошибка добавления работодателя в скрытые
     * @description Информация о возникших ошибках
     */
    ErrorsEmployerBlacklistedErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Описание ошибки */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsEmployerBlacklistedError"][];
    };
    /** Ошибка в параметре запроса */
    ErrorsEmployerBlacklistedError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example employers_blacklist
       * @enum {string}
       */
      type: "employers_blacklist";
      /**
       * @description Название поля с ошибкой:
       * * `limit_exceeded` — превышен лимит на количество работодателей в списке скрытых
       *
       * @example limit_exceeded
       * @enum {string}
       */
      value?: "limit_exceeded";
    };
    /**
     * Неподдерживаемое значение падежа
     * @description Информация о возникших ошибках
     */
    ErrorsDictionariesBadArgumentErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsDictionariesBadArgumentError"][];
    };
    /** Ошибка в параметре запроса */
    ErrorsDictionariesBadArgumentError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example bad_argument
       * @enum {string}
       */
      type: "bad_argument";
      /**
       * @description Название поля с ошибкой
       * @example wrong_case
       */
      value: string;
    };
    /** Идентификатор менеджера */
    EmployerManagersEmployerManagerId: {
      /** @description Идентификатор менеджера */
      id: string;
    };
    /**
     * Ошибки, связанные с доступом к откликам/приглашениям
     * @description Информация о возникших ошибках
     */
    ErrorsNegotiationForbiddenErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & ({
      /**
       * @description Описание ошибки
       * @example Forbidden
       */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsNegotiationForbiddenError"][];
      /**
       * @description Ошибки авторизации:
       *   * `token-revoked` — Токен отозван пользователем, приложению необходимо [запросить новую авторизацию](#tag/Avtorizaciya-rabotodatelya/operation/authorize)
       *   * `token-expired` — Время жизни `access_token` завершилось, необходимо [получить `refresh_token`](#tag/Avtorizaciya-rabotodatelya/operation/authorize)
       *
       * @example token-revoked
       * @enum {string}
       */
      oauth_error?: "token-revoked" | "token-expired";
    });
    /** Ошибка доступа и ошибка авторизации работодателя */
    ErrorsNegotiationForbiddenError: components["schemas"]["ErrorsCommonBadAuthorizationError"] | components["schemas"]["ErrorsCommonBadAuthorizationEmployerError"] | components["schemas"]["ErrorsCommonCaptchaError"] | components["schemas"]["ErrorsNegotiationTopicsStateChangeDeniedError"];
    /** Ошибки при переводе откликов по вакансии в другой статус */
    ErrorsNegotiationTopicsStateChangeDeniedError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example negotiations
       * @enum {string}
       */
      type: "negotiations";
      /**
       * @description Ошибки при переводе откликов по вакансии:
       *   * `application_denied` — ошибка доступа к отклику. Может возникнуть в случае перевода нескольких откликов в другой статус, если,
       * как минимум один из откликов принадлежит другой вакансии
       *
       * @example application_denied
       * @enum {string}
       */
      value: "application_denied";
    };
    /** Список доступных шаблонов ответов соискателю */
    MailTemplatesMailTemplates: components["schemas"]["MailTemplatesMailTemplate"][];
    /** Шаблон ответа соискателю */
    MailTemplatesMailTemplate: {
      /** @description Работодательский статус, соответствующий данному шаблону; может отсутствовать если шаблон не связан с каким-либо статусом */
      employer_state?: string;
      /** @description Идентификатор шаблона */
      id: string;
      /** @description Имя шаблона */
      name: string;
      /** @description Был ли изменен шаблон работодателем или же используется стандартный шаблон с текстом от Хэдхантер */
      template_modified: boolean;
      /** @description Текст шаблона */
      text: string;
      /**
       * @description Способ доставки сообщения сформированного из шаблона
       * @enum {string}
       */
      type: "SMS" | "EMAIL";
      /** @description Переменные доступные для вставки в шаблон */
      variables: components["schemas"]["_IncludesIdName"][];
    };
    /**
     * Ошибка добавления вакансии в скрытые
     * @description Информация о возникших ошибках
     */
    ErrorsVacancyBlacklistedBadRequestErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Описание ошибки */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsVacancyBlacklistedBadRequestError"][];
    };
    /** Ошибка в параметре запроса */
    ErrorsVacancyBlacklistedBadRequestError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example vacancies_blacklist
       * @enum {string}
       */
      type: "vacancies_blacklist";
      /**
       * @description Название поля с ошибкой:
       *
       * * `limit_exceeded` — превышен лимит на количество вакансий в списке скрытых
       *
       * @example limit_exceeded
       * @enum {string}
       */
      value?: "limit_exceeded";
    };
    /** Объект с подписками */
    WebhookSubscriptionsOutput: {
      /** @description Cписок подписок пользователя */
      items: components["schemas"]["WebhookSubscriptionItem"][];
    };
    /** Подписка пользователя */
    WebhookSubscriptionItem: components["schemas"]["WebhookSubscriptionCommonItem"] & {
      /**
       * @description Идентификатор подписки
       * @example q1ww2e2r4ty
       */
      id: string;
    };
    /** Список улучшений для вакансий */
    VacanciesVacancyUpgradeListResponse: {
      /** @description Список улучшений для вакансий */
      items: components["schemas"]["VacanciesVacancyUpgradeListItem"][];
    };
    /** Улучшение для вакансии */
    VacanciesVacancyUpgradeListItem: {
      /** @description Список возможных действий */
      actions: components["schemas"]["VacanciesUpgradeFieldsAction"][];
      vacancy_billing_type: components["schemas"]["VacanciesUpgradeFieldsBillingTypeFull"];
      /** @description Объект с описанием причины, по которой невозможно улучшить вакансию до данного типа. `Null`, если массив `actions` не пустой */
      without_action?: ((components["schemas"]["VacanciesUpgradeFieldsWithoutAction"] | components["schemas"]["_IncludesNullableObject"])[]) | null;
    };
    /**
     * Возможное действие
     * @description Возможное действие
     */
    VacanciesUpgradeFieldsAction: {
      /** @description Идентификатор заказа, ожидающего активации. Возвращается только для действий с `actions.type=activate` */
      cart_id?: number | null;
      /** @description Стоимость публикации. Возвращается только для действий с `actions.type=buy` */
      price?: components["schemas"]["VacanciesUpgradeFieldsPrice"] | components["schemas"]["_IncludesNullableObject"] | null;
      /**
       * @description Тип действия:
       *
       * * `direct_upgrade` — публикации вакансий данного типа есть на счету. Вы можете изменить тип вакансии.
       * * `activate` — публикации вакансий данного типа есть в неактивированных заказах. Перейдите по ссылке, указанной в поле `actions.url`, и активируйте заказ. После этого станет доступно улучшение вакансии.
       * * `buy` — нет доступных публикаций вакансий данного типа. Перейдите по ссылке, указанной в поле `actions.url`, чтобы перейти к покупке публикаций нужного типа
       */
      type: string;
      /** @description Ссылка на действие */
      url?: string | null;
    };
    /** Цена */
    VacanciesUpgradeFieldsPrice: {
      /** @description Значение цены */
      amount: string;
      /** @description Идентификатор валюты. Возможные значения приведены в поле `currency` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      currency_code: string;
    };
    /** Улучшение невозможно */
    VacanciesUpgradeFieldsWithoutAction: {
      /** @description Описание причины, по которой улучшение вакансии до данного типа невозможно */
      reason: string;
    };
    /** Биллинговый тип вакансии */
    VacanciesUpgradeFieldsBillingTypeFull: components["schemas"]["VacancyBillingTypeOutput"] & {
      /** @description Описание типа вакансии */
      description?: string;
    };
    /**
     * Предпочтения менеджера
     * @description Информация о предпочтениях менеджера
     */
    ManagerSettings: {
      default_currency: components["schemas"]["ManagerSettingsCurrency"];
      default_vacancy_branded_template?: components["schemas"]["VacancyBrandedTemplate"];
      /**
       * @description Предпочтение по использованию флага `send_sms`
       * при [приглашении соискателя](#tag/Otklikipriglasheniya-rabotodatelya/operation/invite-applicant-to-vacancy)
       *
       * @example true
       */
      use_sms_notification: boolean;
    };
    /**
     * Предпочитаемая валюта
     * @description Предпочитаемая валюта при [публикации вакансии](#tag/Upravlenie-vakansiyami/operation/publish-vacancy)
     */
    ManagerSettingsCurrency: {
      /**
       * @description Краткое обозначение валюты
       * @example руб.
       */
      abbr: string;
      /**
       * @description Код валюты
       * @example RUR
       */
      code: string;
      /**
       * @description Название валюты
       * @example Рубли
       */
      name: string;
    };
    /** Ошибки */
    ErrorsNegotiationHideResponseTooEarlyErrors: components["schemas"]["ErrorsNegotiationHideResponseErrors"];
    /** Параметры для обновление пары access и refresh токенов */
    AuthRefreshToken: {
      /**
       * @description Cпособ запроса токена
       * @example refresh_token
       * @enum {string}
       */
      grant_type: "refresh_token";
      /**
       * @description Refresh-токен, полученный ранее при [получении пары токенов](#section/Avtorizaciya/Obnovlenie-pary-access-i-refresh-tokenov) или прошлом обновлении пары
       * @example xuLNvUSv7FYM4MPfXDP9aJWe
       */
      refresh_token: string;
    };
    /** Ошибки */
    ErrorsVacancyAddEditCombinedBadJsonDataErrors: components["schemas"]["ErrorsCommonBadJsonDataErrors"] | components["schemas"]["ErrorsVacancyAddEditBadJsonDataErrors"];
    /**
     * Невалидный json
     * @description Информация о возникших ошибках
     */
    ErrorsVacancyAddEditBadJsonDataErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsVacancyAddEditBadJsonDataError"][];
    };
    /** Ошибка при публикации или редактировании вакансии */
    ErrorsVacancyAddEditBadJsonDataError: {
      /**
       * @description Описание ошибки
       * @example Значение неправильное
       */
      description?: string | null;
      /**
       * @description Путь до параметра, в котором возникла ошибка.
       *
       * Для указания параметра используется формат JsonPointer [RFC 6901](https://tools.ietf.org/html/rfc6901)
       *
       * @example /contacts/phones/1/number
       */
      pointer?: string;
      /**
       * @description Причина ошибки. Возможные значения:
       *   * `required` - отстутствует поле в запросе
       *   * `invalid` - недопустимое значение в поле запроса
       *   * `is_empty` — пустое значение
       *   * `wrong_size` — значение имеет неправильный размер
       *   * `is_too_short` — значение имеет слишком маленький размер
       *   * `is_too_long` — значение имеет слишком большой размер
       *   * `currency_code_is_invalid` — валюта заработной платы введена некорректно
       *   * `chosen_area_is_not_a_leaf_or_not_exist` — местоположение вакансии введено неверно (например, передан несуществующий ID) или не является конечным регионом (город, населенный пункт)
       *   * `email_in_description` — в описании вакансии содержится email
       *   * `anonymous_vacancy_contains_address` — в анонимной вакансии содержится адрес работодателя
       *   * `anonymous_vacancy_has_real_company_name` — в названии вакансии содержится название компании работодателя
       *   * `only_for_anonymous_type` — действие доступно только для анонимных вакансий
       *   * `address_is_disabled` — адрес недоступен
       *   * `vacancy_type_employer_billing_type_mismatch` — тип вакансии не совместим с текущим биллинг-типом
       *   * `only_for_direct_type` — действие доступно только для прямых вакансий
       *   * `address_is_empty_with_checked_show_metro_flag` — введен пустой адрес, но указана опция показывать метро
       *   * `address_has_no_metro_but_checked_show_metro_flag` — по введенному адресу не доступно метро, но указана опция показывать метро
       *   * `default_vacancy_branded_template_is_invalid_or_not_enough_purchased_services` — в запросе указан шаблон, который отсутствует в списке доступных шаблонов (этот список можно получить [запросом](#tag/Informaciya-o-rabotodatele/operation/get-vacancy-branded-templates-list)). Также шаблон может отсутствовать в списке доступных шаблонов, если не оплачена услуга использования [брендированного шаблона вакансии](https://hh.ru/price/branding)
       *   * `department_code_prohibited_in_anonymous_vacancy` — нельзя указать код подразделения для анонимной вакансии
       *   * `branded_template_prohibited_in_anonymous_vacancy` — использование брендированного шаблона невозможно для анонимной вакансии
       *   * `value_conflict_with_business_rules` — публикация вакансии с указанным `billing_type` запрещена
       *   * `can_not_accept_kids` — вакансия недоступна несовершеннолетним
       *   * `can_not_edit_vacancy_after_moderation` — нельзя изменить название вакансии после модерации
       *
       * @example is_empty
       * @enum {string}
       */
      reason?: "required" | "invalid" | "is_empty" | "wrong_size" | "is_too_short" | "is_too_long" | "currency_code_is_invalid" | "chosen_area_is_not_a_leaf_or_not_exist" | "email_in_description" | "anonymous_vacancy_contains_address" | "anonymous_vacancy_has_real_company_name" | "only_for_anonymous_type" | "address_is_disabled" | "vacancy_type_employer_billing_type_mismatch" | "only_for_direct_type" | "address_is_empty_with_checked_show_metro_flag" | "address_has_no_metro_but_checked_show_metro_flag" | "default_vacancy_branded_template_is_invalid_or_not_enough_purchased_services" | "department_code_prohibited_in_anonymous_vacancy" | "branded_template_prohibited_in_anonymous_vacancy" | "value_conflict_with_business_rules" | "can_not_accept_kids" | "can_not_edit_vacancy_after_moderation";
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example bad_json_data
       * @enum {string}
       */
      type: "bad_json_data" | "vacancies";
      /**
       * @description Название поля с ошибкой
       * @example salary
       */
      value?: string;
    };
    /**
     * Список профобластей и специализаций
     * @description Список профобластей и специализаций
     */
    DictionariesSalaryStatisticsProfessionalAreasResponse: (components["schemas"]["_IncludesIdName"] & components["schemas"]["DictionariesSalaryStatisticsSpecializations"])[];
    /** Специализации */
    DictionariesSalaryStatisticsSpecializations: {
      specializations: components["schemas"]["_IncludesIdNameDesc"][];
    };
    /** Список всех станций метро во всех городах */
    MetroMetroResponse: components["schemas"]["MetroMetroItem"][];
    /** Город */
    MetroMetroItem: {
      /** @description Идентификатор города */
      id: string;
      /** @description Список линий метро в городе */
      lines: components["schemas"]["MetroMetroLineWithStations"][];
      /** @description Название города */
      name: string;
      /** @description URL запроса */
      url: string;
    };
    /** Объект черновика вакансии */
    VacancyDraftVacancyDraftFull: components["schemas"]["VacancyDraftVacancyDraftCommon"] & {
      address: components["schemas"]["VacancyDraftAddressOutput"];
      /** @description Коды и названия регионов (фед. округа, субъекты федерации, города) */
      areas: components["schemas"]["VacancyAreaOutput"][];
      assigned_manager?: components["schemas"]["VacancyDraftAssignedManager"];
      branded_template?: components["schemas"]["VacancyBrandedTemplate"];
      contacts: components["schemas"]["VacancyDraftContactsWithFullPhone"];
      custom_employer_name?: components["schemas"]["VacancyCustomEmployerName"];
      employer: components["schemas"]["VacancyDraftEmployer"];
      meta_info: components["schemas"]["VacancyDraftVacancyDraftBase"];
      with_zp: components["schemas"]["VacancyDraftWithZp"];
    };
    /** Поля черновика */
    VacancyDraftVacancyDraftCommon: {
      accept_handicapped: components["schemas"]["VacancyAcceptHandicapped"];
      accept_incomplete_resumes: components["schemas"]["VacancyAcceptIncompleteResumes"];
      accept_kids: components["schemas"]["VacancyAcceptKids"];
      accept_temporary?: components["schemas"]["VacancyAcceptTemporary"];
      allow_messages: components["schemas"]["VacancyAllowMessages"];
      billing_type: components["schemas"]["VacancyBillingTypeOutput"];
      code?: components["schemas"]["VacancyCode"];
      department?: components["schemas"]["VacancyDepartmentOutput"];
      description: components["schemas"]["VacancyDescription"];
      driver_license_types: components["schemas"]["VacancyDriverLicenseTypes"];
      employment?: components["schemas"]["VacancyEmploymentOutput"];
      experience: components["schemas"]["VacancyExperienceOutput"];
      /** @description Информация о наличии прикрепленного тестового задании к вакансии */
      has_test: boolean;
      key_skills: components["schemas"]["VacancyKeySkills"];
      languages: components["schemas"]["VacancyLanguagesOutput"];
      manager: components["schemas"]["VacancyManager"];
      name: components["schemas"]["VacancyName"];
      professional_roles: components["schemas"]["VacancyProfessionalRolesOutput"];
      response_letter_required: components["schemas"]["VacancyResponseLetterRequired"];
      response_notifications: components["schemas"]["VacancyResponseNotifications"];
      response_url?: components["schemas"]["VacancyResponseUrl"];
      salary?: components["schemas"]["VacancySalary"];
      schedule: components["schemas"]["VacancyScheduleOutput"];
      test?: components["schemas"]["VacancyDraftTest"];
      type: components["schemas"]["VacancyTypeOutput"];
      working_days?: components["schemas"]["VacancyWorkingDaysOutput"];
      working_time_intervals?: components["schemas"]["VacancyWorkingTimeIntervalsOutput"];
      working_time_modes?: components["schemas"]["VacancyWorkingTimeModesOutput"];
    };
    /** Адрес */
    VacancyDraftAddressOutput: components["schemas"]["VacancyAddressOutput"] & components["schemas"]["VacancyAddress"];
    /** Регион */
    VacancyAreaOutput: {
      /** @description Идентификатор региона из [справочника](#tag/Obshie-spravochniki/operation/get-areas) */
      id: string;
      /** @description Название региона */
      name: string;
    };
    /** Черновик */
    VacancyDraftVacancyDraftBase: {
      /** @description Состояние автопубликации. Объект при активной автопубликации, иначе null */
      auto_publication?: components["schemas"]["VacancyDraftAutoPublicationState"] | components["schemas"]["_IncludesNullableObject"] | null;
      /** @description Процент заполнения черновика */
      completed_fields_percentage: number;
      /** @description Идентификатор черновика */
      draft_id: string;
      /** @description Массив объектов с информацией о том, каких публикаций не хватает на счету для публикации вакансии из данного черновика */
      insufficient_publications?: components["schemas"]["VacancyDraftPublications"][] | null;
      /** @description Массив объектов с информацией о том, какие квоты превышены */
      insufficient_quotas?: components["schemas"]["VacancyDraftPublications"][] | null;
      /** @description Время изменения черновика (в формате [ISO 8601](https://ru.wikipedia.org/wiki/ISO_8601) с точностью до секунды `YYYY-MM-DDThh:mm:ss±hhmm`) */
      last_change_time?: string | null;
      /** @description Готовность черновика к публикации */
      publication_ready: boolean;
      /** @description Массив объектов с информацией о необходимых публикациях на счету */
      required_publications?: components["schemas"]["VacancyDraftPublications"][] | null;
      scheduled_at: components["schemas"]["VacancyDraftScheduledAt"] | components["schemas"]["_IncludesNullableObject"] | null;
    };
    /** Состояние публикации */
    VacancyDraftAutoPublicationState: {
      /** @description Номер счета */
      bill_uid: string;
      /** @description Идентификатор заказа */
      cart_id: string;
    };
    /** Публикация */
    VacancyDraftPublications: {
      /** @description Биллинговый тип [из справочника vacancy_billing_type](#tag/Obshie-spravochniki/operation/get-dictionaries) */
      billing_type: components["schemas"]["VacancyBillingTypeOutput"];
      /** @description Количество публикаций */
      count: number;
      /**
       * @deprecated
       * @description Тип публикации (справочник [vacancy_billing_type](#tag/Obshie-spravochniki/operation/get-dictionaries))
       */
      publication_type: string;
      /** @description Тип вакансии (справочник [vacancy_type](#tag/Obshie-spravochniki/operation/get-dictionaries)) */
      vacancy_type: string;
    };
    /** Менеджер, к которому перейдет вакансия после публикации */
    VacancyDraftAssignedManager: {
      /** @description ФИО */
      full_name?: string;
      /** @description Идентификатор рабочего аккаунта менеджера, которому перейдет вакансия после публикации */
      id?: string;
    } | null;
    /** Работодатель */
    VacancyDraftEmployer: {
      /** @description Url для просмотра работодателя на сайте */
      alternate_url: string;
      /** @description Идентификатор работодателя */
      id: string;
      /** @description Ссылки на логотипы работодателя разных размеров */
      logo_urls: {
        90: string;
        240: string;
        original?: string;
      };
      /** @description Название работодателя */
      name: string;
      /** @description Url для просмотра работодателя */
      url: string;
    };
    /**
     * Контакты
     * @description Контактная информация
     */
    VacancyDraftContactsWithFullPhone: {
      /** @description Email */
      email: string | null;
      /** @description Имя менеджера */
      name: string | null;
      /** @description Список телефонов для связи */
      phones: components["schemas"]["VacancyDraftPhoneItemWithFullPhone"][] | null;
    };
    /** Объект телефона для связи */
    VacancyDraftPhoneItemWithFullPhone: {
      /** @description Комментарий (удобное время для звонка по этому номеру) */
      comment?: string | null;
      /** @description Телефонный номер */
      formatted?: string;
    };
    /**
     * Подсказки по ключевым словам поиска
     * @description Подсказки по ключевым словам поиска
     */
    SuggestsSearchKeyword: {
      /** Массив ключевых слов */
      items: components["schemas"]["SuggestsSearchKeywordItem"][];
    };
    /** Ключевое слово */
    SuggestsSearchKeywordItem: {
      /** @description Ключевое слово */
      text: string;
    };
    /** Инфо о пролонгации вакансии */
    VacanciesVacancyProlongate: {
      /** @description Список действий, которые можно предпринять для продления вакансии */
      actions: (components["schemas"]["VacanciesVacancyProlongateAvailableActions"] | components["schemas"]["VacanciesVacancyProlongateUnavailableActions"])[];
      /** @description Дата окончания публикации вакансии */
      expires_at: string;
      /** @description Идентификатор вакансии */
      id: string;
    };
    /** Продление невозможно */
    VacanciesVacancyProlongateUnavailableActions: {
      disable_reason: Record<string, never> & components["schemas"]["_IncludesIdName"];
      /** @description Возможно ли выполнить действие */
      enabled: boolean;
      /** @description Идентификатор действия */
      id: string;
    };
    /** Продление возможно */
    VacanciesVacancyProlongateAvailableActions: {
      /** @description Возможно ли выполнить действие */
      enabled: boolean;
      /** @description Идентификатор действия */
      id: string;
      /** @description HTTP-метод запроса для выполнения действия */
      method: string;
      /** @description URL запроса для выполнения действия */
      url: string;
    };
    /** Успешный ответ */
    VacancyDraftVacancyDraftItems: {
      /** Количество найденных черновиков */
      found: number;
      /** @description Список черновиков */
      items: components["schemas"]["VacancyDraftVacancyDraftItem"][];
      /** Номер текущей страницы */
      page: number;
      /** Количество страниц с черновиками */
      pages: number;
      /** Количество элементов на страницу */
      per_page: number;
    };
    /** Черновик */
    VacancyDraftVacancyDraftItem: components["schemas"]["VacancyDraftVacancyDraftBase"] & ({
      /** @description Коды и названия регионов (фед. округа, субъекты федерации, города) */
      areas: components["schemas"]["VacancyAreaOutput"][];
      assigned_manager?: components["schemas"]["VacancyDraftAssignedManager"];
      billing_type: components["schemas"]["VacancyBillingTypeOutput"];
      /** @description Название вакансии */
      name?: string;
      /**
       * @deprecated
       * @description Тип публикации (справочник [vacancy_billing_type](#tag/Obshie-spravochniki/operation/get-dictionaries))
       */
      publication_type: string;
      /** @description Url для запроса полной информации черновика */
      url: string;
      /** @description Тип вакансии (справочник [vacancy_type](#tag/Obshie-spravochniki/operation/get-dictionaries)) */
      vacancy_type: string | null;
    });
    /**
     * Ошибки отклика на вакансию
     * @description Информация о возникших ошибках
     */
    ErrorsVacancyApplyBadRequestErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & ({
      /**
       * @deprecated
       * @enum {string}
       */
      bad_argument?: "vacancy_id" | "resume_id";
      /** @deprecated */
      bad_arguments?: ({
        description?: string;
        /**
         * @description Поле, в котором допущена ошибка.
         * Возможные значения:
         * * `vacancy_id` - указан не валидный идентификатор
         * * `resume_id` - указан не валидный идентификатор
         *
         * @enum {string}
         */
        name?: "vacancy_id" | "resume_id";
      })[];
      /** @description Описание ошибки */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsVacancyApplyBadRequestError"][];
    });
    /** Ошибка в параметре запроса */
    ErrorsVacancyApplyBadRequestError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example negotiations
       * @enum {string}
       */
      type: "negotiations";
      /**
       * @description Название поля с ошибкой:
       *
       * * `vacancy_not_found` — вакансия не найдена.
       * * `resume_not_found` — резюме из отклика/приглашения скрыто, удалено или не найдено.
       * * `limit_exceeded` — превышен лимит количества откликов/приглашений
       * * `resource_policy_violation` — отклик нарушает правила пользования сервисом
       * * `inappropriate_language` — отклик содержит нецензурную лексику
       *
       * @example vacancy_not_found
       * @enum {string}
       */
      value: "vacancy_not_found" | "resume_not_found" | "limit_exceeded" | "resource_policy_violation" | "inappropriate_language";
    };
    /**
     * Подсказки по специализациям
     * @description Подсказки по специализациям
     */
    SuggestsFieldsOfStudy: {
      /**
       * Массив специализаций
       * @description Информация о найденных специализациях
       */
      items: components["schemas"]["SuggestsFieldsOfStudyItem"][];
    };
    /** Информация о найденных специализациях */
    SuggestsFieldsOfStudyItem: {
      /** @description Идентификатор специализации */
      id: string;
      /** @description Название специализации */
      text: string;
    };
    /** Список резюме текущего пользователя */
    ResumesMineResponse: components["schemas"]["_IncludesPagination"] & components["schemas"]["ResumesMineItems"];
    /** Список резюме */
    ResumesMineItems: {
      /** @description Список резюме текущего пользователя */
      items: components["schemas"]["ResumesMineItem"][];
    };
    /** Информация о резюме для соискателя */
    ResumesMineItem: components["schemas"]["ResumeResumeShortForOwner"] & components["schemas"]["ResumeStatus"] & components["schemas"]["ResumeApplicantFields"] & {
      /** @description Список контактов соискателя */
      contact: components["schemas"]["_IncludesContact"][];
      /**
       * @deprecated
       * @description Дата и время создания резюме
       */
      created: string;
      similar_vacancies: components["schemas"]["ResumeObjectsSimilarVacancies"];
      /** @description Теги к резюме */
      tags?: components["schemas"]["_IncludesId"][];
      /**
       * @deprecated
       * @description Дата и время обновления резюме
       */
      updated: string;
      /**
       * @deprecated
       * @description Видно ли резюме в поиске
       */
      visible: boolean;
    };
    /**
     * Информация о похожих вакансиях
     * @description Информация о вакансиях, похожих на это резюме
     */
    ResumeObjectsSimilarVacancies: {
      counters: components["schemas"]["ResumeObjectsCounters"];
      /** @description URL, по которому необходимо сделать GET-запрос, для получения [вакансий, похожих на данное резюме](#tag/Poisk-vakansij-dlya-soiskatelya/operation/get-vacancies-similar-to-resume) */
      url: string;
    };
    /**
     * Счетчики
     * @description Счетчики похожих вакансий
     */
    ResumeObjectsCounters: {
      /** @description Количество подходящих вакансий */
      total: number;
    };
    /**
     * Ошибка конфликта запроса при одновременном изменении параметров
     * @description Информация о возникших ошибках
     */
    ErrorsCommonConflictBothChangedErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & ({
      /**
       * @description Имя аргумента, с которым связана ошибка
       * @enum {string}
       */
      bad_argument?: "name" | "subscription";
      /** @description Список аргументов, с которыми связаны ошибки */
      bad_arguments?: components["schemas"]["_IncludesNameDescription"][];
      /** @description Описание причины ошибки */
      description?: string;
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsCommonConflictBothChangedError"][];
    });
    /** Ошибка конфликта запроса при одновременном изменении параметров */
    ErrorsCommonConflictBothChangedError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example bad_argument
       * @enum {string}
       */
      type: "bad_argument";
      /**
       * @description Имя конфликтующего аргумента
       * @example name
       * @enum {string}
       */
      value: "name" | "subscription" | "email_subscription";
    };
    /**
     * Автопоиск или менеджер не найден
     * @description Информация о возникших ошибках
     */
    ErrorsSavedSearchNotFoundErrors: components["schemas"]["ErrorsCommonErrorRequestId"] & {
      /** @description Массив с данными ошибок */
      errors: components["schemas"]["ErrorsSavedSearchNotFoundError"][];
    };
    /** Ошибка */
    ErrorsSavedSearchNotFoundError: {
      /**
       * @description Текстовый идентификатор типа ошибки
       * @example saved_searches
       * @enum {string}
       */
      type: "saved_searches" | "not_found";
      /**
       * @description Название поля запроса с ошибкой. Возможные значения:
       * * `saved_search_not_found` — автопоиск не найден или не принадлежит текущему пользователю.
       * * `manager_not_found` — менеджер не найден
       *
       * @example saved_search_not_found
       * @enum {string}
       */
      value?: "saved_search_not_found" | "manager_not_found";
    };
  };
  responses: {
    /** @description Успешный ответ */
    SuccessNoContent: {
      content: never;
    };
    /** @description Ошибка запроса при одновременном изменении параметров */
    ErrorBothChangedConflict: {
      content: {
        "application/json": components["schemas"]["ErrorsCommonConflictBothChangedErrors"];
      };
    };
    /** @description Не найдено или не доступно текущему пользователю */
    ErrorNotFound: {
      content: {
        "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
      };
    };
    /** @description Успешно создано */
    SuccessCreated: {
      content: {
        "application/json": components["schemas"]["Id"];
      };
    };
    /** @description Ошибка авторизации пользователя */
    ErrorBadAuthorization: {
      content: {
        "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
      };
    };
    /** @description Ошибка в параметре запроса */
    ErrorBadArgument: {
      content: {
        "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
      };
    };
    /** @description Автопоиск или менеджер не найден */
    ErrorSavedSearchNotFound: {
      content: {
        "application/json": components["schemas"]["ErrorsSavedSearchNotFoundErrors"];
      };
    };
  };
  parameters: {
    /**
     * @description Доменное имя сайта (см. [Выбор сайта](#section/Obshaya-informaciya/Vybor-sajta))
     *
     * @example hh.ru
     */
    Host?: "hh.ru" | "rabota.by" | "hh1.az" | "hh.uz" | "hh.kz" | "headhunter.ge" | "headhunter.kg";
    /**
     * @description Название приложения и контактная почта разработчика (см. [Информация о клиенте](#section/Obshaya-informaciya/Trebovaniya-k-zaprosam))
     *
     * @example MyApp/1.0 (my-app-feedback@example.com)
     */
    HHUserAgent: string;
    /**
     * @description Идентификатор локали (см. [Локализация](#tag/Obshie-spravochniki/operation/get-locales))
     *
     * @example EN
     */
    Locale?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Подтвердить телефон кодом */
  "confirm-phone-in-resume": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * @description Телефон который надо подтвердить
           * @example 8(454)555-55-55
           */
          phone: string;
          /**
           * @description Код для подтверждения
           * @example 5675
           */
          confirmation_code: string;
        };
      };
    };
    responses: {
      /** @description Успешный ответ, номер верифицирован */
      200: {
        content: never;
      };
      /** @description Ошибки в аргументах */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Ошибка авторизации */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Предпочтения менеджера
   * @description Возвращает информацию о предпочтениях менеджера.
   *
   * Проще всего получить URL из поля `manager_settings_url` объекта `manager`
   * в [информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info).
   *
   * Предпочтения менеджера *не влияют* на действия в API по умолчанию. Например, брендированный шаблон оформления
   * (`default_vacancy_branded_template`) не будет применен автоматически при публикации вакансии, если шаблон не был передан.
   * Приложение может использовать эту информацию для того, чтобы реализовать логику предзаполнения полей
   */
  "get-manager-settings": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /**
         * @description Идентификатор работодателя, который можно узнать [в информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info)
         * @example 1455
         */
        employer_id: string;
        /**
         * @description Идентификатор менеджера. Можно узнать из списка [менеджеров](#tag/Menedzhery-rabotodatelya/operation/get-employer-managers)
         * @example 87654321
         */
        manager_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ManagerSettings"];
        };
      };
      /** @description Текущий пользователь не является менеджером */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Менеджер не существует, либо просмотр его настроек не доступен */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Дневной лимит просмотра резюме для текущего менеджера
   * @description Метод доступен менеджеру только для просмотра своего дневного лимита
   */
  "get-employer-manager-limits": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя, который можно узнать в [информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
        /** @description Идентификатор менеджера, который можно узнать в [информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        manager_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployerManagersEmployerManagerLimits"];
        };
      };
      /** @description Неподходящая авторизация */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель или менеджер не существует или у текущего пользователя нет прав на просмотр информации */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Список адресов работодателя
   * @description Возвращает список адресов работодателя. Для компаний с большим количеством адресов, возможна ситуация, когда между созданием адреса и его чтением будет задержка. То есть, только что созданный адрес не будет содержаться в теле ответа
   */
  "get-employer-addresses": {
    parameters: {
      query?: {
        /** @description Позволяет загрузить все адреса, изменённые после этой даты (добавление, удаление или изменение адреса). Изменения возвращаются без пагинации. Значение указывается в формате [ISO 8601](#date-format) - `YYYY-MM-DDThh:mm:ss` или c указанием отступа для часового пояса `YYYY-MM-DDThh:mm:ss±hhmm`. Максимальное значение отступа от текущей даты - 7 дней. При передаче этого параметра, для каждого адреса в теле ответа возвращается поле `deleted`, указывающее на то, удалён ли адрес. Также, в случае передачи этого параметра, игнорируются все остальные */
        changed_after?: string;
        /** @description Идентификатор менеджера создавшего адрес */
        manager_id?: string;
        /** @description Если true, ответ будет содержать информацию о менеджере создавшем адрес */
        with_manager?: boolean;
        /** @description Количество элементов на странице выдачи. Поддерживаются [стандартные параметры пагинации](#section/Obshaya-informaciya/Paginaciya). Значение по умолчанию и максимальное значение per_page составляет 10000 */
        per_page?: number;
        /** @description Порядковый номер страницы в выдаче. Поддерживаются [стандартные параметры пагинации](#section/Obshaya-informaciya/Paginaciya). По умолчанию нумерация начинается с 0 страницы */
        page?: number;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ, в поле `items` содержится список адресов компании */
      200: {
        content: {
          "application/json": components["schemas"]["EmployerAddressesEmployerAddressesResponse"];
        };
      };
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsEmployerAddressErrors"];
        };
      };
      /** @description Текущий пользователь не имеет прав на просмотр адресов данного работодателя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель не существует или у текущего пользователя нет прав на просмотр информации */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Список менеджеров работодателя */
  "get-employer-managers": {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов */
        per_page?: number;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя, который можно узнать [в информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployerManagersResponse"];
        };
      };
      /** @description Текущий пользователь не имеет прав на просмотр менеджеров данного работодателя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель не существует или у текущего пользователя нет прав на просмотр информации */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Добавление менеджера */
  "add-employer-manager": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя. Чтобы получить его, используйте метод [Информация о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployerManagersAddEmployerManager"];
      };
    };
    responses: {
      /** @description Менеджер добавлен */
      201: {
        content: {
          "application/json": components["schemas"]["EmployerManagersEmployerManagerId"];
        };
      };
      /** @description Параметры во входном JSON переданы с ошибкой */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsEmployerManagerBadArgumentErrors"];
        };
      };
      /** @description Неподходящая авторизация или другие причины */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsEmployerManagerBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель не существует, или пользователь не имеет прав на создание менеджера */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Справочник типов и прав менеджера */
  "get-employer-manager-types": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployerManagerTypesResponse"];
        };
      };
      /** @description Текущий пользователь не имеет прав на просмотр типов менеджеров данного работодателя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель не существует или у текущего пользователя нет прав на просмотр информации */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Рабочие аккаунты менеджера
   * @description Возвращает список рабочих аккаунтов менеджера и информацию об основном и текущем аккаунте.
   *
   * Для работы под определенным аккаунтом необходимо передать значение account_id, полученное из списка, в заголовке:
   *
   * `X-Manager-Account-Id: {account_id}`
   *
   * Использовать данный заголовок можно во всех методах, доступных для работодателей.
   *
   * В заголовке можно передавать account_id основного аккаунта, который также подразумевается по умолчанию, при отсутствии заголовка
   */
  "get-manager-accounts": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ManagerAccounts"];
        };
      };
      /** @description Ошибка авторизации */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /** Получить информацию о телефоне соискателя */
  "get-applicant-phone-info": {
    parameters: {
      query: {
        /** @description Номер телефона в любом формате */
        phone: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumeShouldSendSmsContainer"];
        };
      };
      /** @description Ошибки в аргументах */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Ошибка авторизации */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /** Получение адреса */
  "get-address": {
    parameters: {
      query?: {
        /** @description Если true, ответ будет содержать информацию о менеджере создавшем адрес */
        with_manager?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя. Чтобы получить его, используйте метод [Информация о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
        /** @description Идентификатор адреса работодателя */
        address_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployerAddressesEmployerAddressItemResponse"];
        };
      };
      /** @description Неподходящая авторизация */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель или адрес не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Получение информации о менеджере */
  "get-employer-manager": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя, который можно узнать в [информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
        /** @description Идентификатор менеджера */
        manager_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployerManagersEmployerManagerInfo"];
        };
      };
      /** @description Указанный работодатель или менеджер не существует или у текущего пользователя нет прав на просмотр информации */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Редактирование менеджера */
  "edit-employer-manager": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя, который можно узнать [в информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
        /** @description Идентификатор менеджера. Можно узнать из списка [менеджеров](#tag/Menedzhery-rabotodatelya/operation/get-employer-managers) */
        manager_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployerManagersManagerData"];
      };
    };
    responses: {
      /** @description Параметры менеджера отредактированы */
      200: {
        content: never;
      };
      /** @description Параметры запроса переданы с ошибкой */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsEmployerManagerBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не имеет прав на редактирование менеджера или иные причины */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsEmployerManagerBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель или менеджер не существует, или пользователь не имеет прав на редактирование менеджера */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Удаление менеджера
   * @description Удаление менеджера занимает некоторое время. По этой причине, если сразу после успешного удаления менеджера вы запросите, например, список менеджеров, в ответе может вернуться удаленный менеджер
   */
  "delete-employer-manager": {
    parameters: {
      query: {
        /** @description Идентификатор менеджера, которому передаются данные, связанные с удаляемым менеджером, в частности: вакансии, отклики, папки отобранных резюме, комментарии к соискателю, автопоиски и прочее */
        successor_id: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя, который можно узнать в [информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
        /** @description Идентификатор менеджера */
        manager_id: string;
      };
    };
    responses: {
      /** @description Успешное выполнение запроса, менеджер удалён */
      204: {
        content: never;
      };
      /** @description Параметры запроса переданы с ошибкой */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsEmployerManagerBadArgumentErrors"];
        };
      };
      /** @description Неподходящая авторизация или иные причины отказа */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsEmployerManagerBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель или менеджер не существует, или пользователь не имеет прав на удаление данного менеджера */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Отправить код подтверждения для телефона резюме */
  "send-code-for-verify-phone-in-resume": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Телефон на который надо отправить подтверждающий код */
          phone: string;
        };
      };
    };
    responses: {
      /** @description Успешно отправлено */
      201: {
        content: {
          "application/json": components["schemas"]["ResumePhoneGenerateCodeGenerateCode"];
        };
      };
      /** @description Ошибки в аргументах */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Ошибка авторизации */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /** Получение access-токена */
  authorize: {
    /** @description В зависимости от способа получения токена `grant_type` необходимо передавать различные наборы параметров <a name="required_parameters"></a> */
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["AuthCode"] | components["schemas"]["AuthRefreshToken"] | components["schemas"]["AuthClientCredentials"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["AuthUserTokenAndAppToken"];
        };
      };
      /** @description Ошибка параметров запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationBadParameters"];
        };
      };
      /** @description Действие запрещено */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Инвалидация токена
   * @description Инвалидация работает только на действующем access-токене.
   * После инвалидации токен нельзя будет запросить с помощью refresh-токена - для работы необходимо будет заново авторизоваться в API
   * Таким образом нельзя инвалидировать токен приложения <a name="invalidate_token"></a>.
   * В случае компрометации токена необходимо инвалидировать скомпрометированный токен и запросить токен заново!
   */
  "invalidate-token": {
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Запрос выполнен не с авторизацией пользователя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /** Информация о текущем пользователе */
  "get-current-user-info": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["MeProfile"];
        };
      };
      /** @description Ошибка авторизации */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Редактирование информации авторизованного пользователя
   * @description Редактирование ФИО или изменение флага «ищу работу». Данные можно редактировать только группами
   */
  "edit-current-user-info": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["MeChangeName"] | components["schemas"]["MeSetInSearch"];
      };
    };
    responses: {
      /** @description Успешный ответ, данные переданы */
      204: {
        content: never;
      };
      /** @description Переданы не все поля, или параметры относятся к разным группам */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Ошибка авторизации. Пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Список доступных локалей для резюме
   * @description Возвращает справочник возможных локалей резюме. Подколлекция [справочника локалей](#tag/Obshie-spravochniki/operation/get-locales-for-resume).
   *
   * Изменив локаль, можно, например, создать резюме на английском языке
   */
  "get-locales-for-resume": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["LocalesResumeLocales"];
        };
      };
    };
  };
  /**
   * Список доступных локалей
   * @description Возвращает список возможных значений (доступных локалей) в поле `id`. Список локалей будет зависеть от указанного сайта (параметр `host`). В любом запросе к API можно указывать параметр `?locale=` для передачи значения локали (языка)
   */
  "get-locales": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["LocalesLocales"];
        };
      };
    };
  };
  /** Подсказки по должностям резюме */
  "get-positions-suggestions": {
    parameters: {
      query: {
        /**
         * @description Текст для поиска должности. Искомый текст должен быть длиной два или более символа и не более 3 000 символов
         * @example водитель
         */
        text: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsPositions"];
        };
      };
      /** @description Ошибки запроса */
      400: {
        content: {
          "application/json": components["schemas"]["SuggestsErrors"];
        };
      };
    };
  };
  /**
   * Подсказки по названиям учебных заведений
   * @description Чтобы узнать список факультетов, обратитесь к [соответствующему методу](#tag/Obshie-spravochniki/operation/get-educational-institutions-dictionary)
   */
  "get-educational-institutions-suggests": {
    parameters: {
      query: {
        /** @description Текст для поиска учебного заведения. Искомый текст должен быть длиной два или более символа и не более 3 000 символов */
        text: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsEducationalInstitutions"];
        };
      };
      /** @description Ошибки запроса */
      400: {
        content: {
          "application/json": components["schemas"]["SuggestsErrors"];
        };
      };
    };
  };
  /**
   * Подсказки по регионам, являющимися листами в дереве регионов
   * @description Также доступна загрузка [полного дерева регионов](#tag/Obshie-spravochniki/operation/get-areas) и [части дерева от определенного элемента](#tag/Obshie-spravochniki/operation/get-areas-from-specified)
   */
  "get-area-leaves-suggests": {
    parameters: {
      query: {
        /** @description Текст для поиска региона. Искомый текст должен быть длиной два или более символа и не более 3 000 символов */
        text: string;
        /** @description Идентификатор региона из [справочника](#tag/Obshie-spravochniki/operation/get-areas). Сужает подсказки поддеревом переданного идентификатора региона */
        area_id?: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsAreas"];
        };
      };
      /** @description Ошибки запроса */
      400: {
        content: {
          "application/json": components["schemas"]["SuggestsErrors"];
        };
      };
    };
  };
  /** Подсказки по ключевым навыкам */
  "get-skill-set-suggests": {
    parameters: {
      query: {
        /** @description Текст для поиска ключевых навыков. Искомый текст должен быть длиной два или более символа и не более 3 000 символов */
        text: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsSkillSet"];
        };
      };
      /** @description Ошибки запроса */
      400: {
        content: {
          "application/json": components["schemas"]["SuggestsErrors"];
        };
      };
    };
  };
  /** Подсказки по должностям вакансий */
  "get-vacancy-positions-suggests": {
    parameters: {
      query: {
        /**
         * @description Текст для поиска должности в вакансии. Искомый текст должен быть длиной два или более символа и не более 3 000 символов
         * @example водитель
         */
        text: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsVacancyPositions"];
        };
      };
      /** @description Ошибки запроса */
      400: {
        content: {
          "application/json": components["schemas"]["SuggestsErrors"];
        };
      };
    };
  };
  /** Подсказки по профессиональным ролям */
  "get-professional-roles-suggests": {
    parameters: {
      query: {
        /**
         * @description Текст для поиска профессиональной роли. Искомый текст должен быть длиной два или более символа и не более 3 000 символов
         * @example водитель
         */
        text: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsProfessionalRoles"];
        };
      };
      /** @description Ошибки запроса */
      400: {
        content: {
          "application/json": components["schemas"]["SuggestsErrors"];
        };
      };
    };
  };
  /**
   * Подсказки по ключевым словам поиска резюме
   * @description Предназначены для использования в поле `text` при [поиске резюме](#tag/Poisk-rezyume/operation/search-for-resumes). Содержит названия должностей, компаний и другие фразы, часто используемые при поиске резюме
   */
  "get-resume-search-keywords-suggests": {
    parameters: {
      query: {
        /** @description Текст для поиска ключевого слова. Искомый текст должен быть длиной два или более символа и не более 3 000 символов */
        text: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsSearchKeyword"];
        };
      };
      /** @description Ошибки запроса */
      400: {
        content: {
          "application/json": components["schemas"]["SuggestsErrors"];
        };
      };
    };
  };
  /**
   * Подсказки по регионам
   * @description Также доступна загрузка [полного дерева регионов](#tag/Obshie-spravochniki/operation/get-areas) и [части дерева от определенного элемента](#tag/Obshie-spravochniki/operation/get-areas-from-specified)
   */
  "get-areas-suggests": {
    parameters: {
      query: {
        /** @description Текст для поиска региона. Искомый текст должен быть длиной два или более символа и не более 3 000 символов */
        text: string;
        /** @description Идентификатор региона из [справочника](#tag/Obshie-spravochniki/operation/get-areas). Сужает подсказки поддеревом переданного идентификатора региона */
        area_id?: string;
        /** @description Включать ли в ответ регион, переданный в параметре `area_id`, если он подходит по искомому тексту */
        include_parent?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsAreas"];
        };
      };
      /** @description Ошибки запроса */
      400: {
        content: {
          "application/json": components["schemas"]["SuggestsErrors"];
        };
      };
    };
  };
  /**
   * Подсказки по ключевым словам поиска вакансий
   * @description Предназначены для использования в поле `text` при [поиске вакансий](#tag/Poisk-vakansij/operation/get-vacancies). Содержит названия должностей, компаний и другие фразы, часто используемые при поиске вакансий
   */
  "get-vacancy-search-keywords": {
    parameters: {
      query: {
        /** @description Текст для поиска ключевого слова. Искомый текст должен быть длиной два или более символа и не более 3 000 символов */
        text: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsSearchKeyword"];
        };
      };
      /** @description Ошибки запроса */
      400: {
        content: {
          "application/json": components["schemas"]["SuggestsErrors"];
        };
      };
    };
  };
  /** Подсказки по специализациям */
  "get-fields-of-study-suggestions": {
    parameters: {
      query: {
        /** @description Текст для поиска специализаций. Искомый текст должен быть длиной два или более символа и не более 3 000 символов */
        text: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsFieldsOfStudy"];
        };
      };
      /** @description Ошибки запроса */
      400: {
        content: {
          "application/json": components["schemas"]["SuggestsErrors"];
        };
      };
    };
  };
  /**
   * Подсказки по зарегистрированным организациям
   * @description Данные из этой подсказки можно использовать, например, для выбора компании при заполнении опыта работы [в резюме](#tag/Rezyume.-Sozdanie-i-obnovlenie). Чтобы найти организации, которые могут публиковать вакансии, используйте [поиск](#tag/Rabotodatel/operation/search-employer)
   */
  "get-registered-companies-suggests": {
    parameters: {
      query: {
        /** @description Текст для поиска организации. Искомый текст должен быть длиной два или более символа и не более 3 000 символов */
        text: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsCompanies"];
        };
      };
      /** @description Ошибки запроса */
      400: {
        content: {
          "application/json": components["schemas"]["SuggestsErrors"];
        };
      };
    };
  };
  /**
   * Информация по активным услугам API для платных методов
   * @description Каждая подключенная услуга отображается отдельным объектом в массиве `items`, даже при условии, что подключено несколько услуг одного типа.
   * Если у работодателя нет активных услуг, то в ответе придет пустой массив `items`
   */
  "get-payable-api-actions": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployerServicesEmployerServices"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель не существует или у текущего пользователя нет прав на просмотр информации */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Проверка доступа к платным методам
   * @description Начиная с 16 июля 2018 года, некоторые методы API HH для работодателей стали платными.
   *
   * Такие методы отмечены в [оглавлении GitHub](https://github.com/hhru/api/blob/master/README.md#content) лейблом <img src="http://hhru.github.io/api/badges/emp_paid.png" alt="employer with paid access" />
   *
   * Чтобы приобрести доступ к платным методам, обратитесь к своему персональному менеджеру.
   *
   * > Если вы работаете от имени нескольких учетных записей работодателя, проверьте [информацию о подключенных услугах](#tag/Uslugi-rabotodatelya/operation/get-payable-api-actions) — каждой учетной записи должен быть предоставлен доступ к платным методам API. При отсутствии доступа будет выдана ошибка `403 Forbidden`.
   *
   * Метод возвращает информацию о доступе к группам платных методов. Существующие группы:
   *
   * 1. Наличие доступа к методам резюме:
   *   * [Просмотр резюме](#tag/Prosmotr-rezyume/operation/get-resume).
   *   * [Работа с откликами](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md).
   *   * [Переписка с соискателем](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-messages).
   * 2. Наличие доступа к методам поиска вакансий:
   *   * [Поиск резюме](#tag/Poisk-rezyume/operation/search-for-resumes).
   *   * [Сохраненные поиски резюме](#tag/Sohranennye-poiski-rezyume/operation/get-saved-resume-searches).
   * 3. Наличие доступа к [просмотру резюме](#tag/Prosmotr-rezyume/operation/get-resume), у которого есть отклик или приглашение.
   * 4. Наличие доступа к [просмотру резюме](#tag/Prosmotr-rezyume/operation/get-resume), найденных через [поиск по базе](#tag/Poisk-rezyume/operation/search-for-resumes).
   *
   * **Внимание!** Изменился доступ к контактной информации резюме, подробнее [о новой модели работы с базой резюме](https://github.com/hhru/api/blob/master/docs/payable/resume.md)
   */
  "get-payable-api-method-access": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя. Можно узнать в [информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
        /** @description Идентификатор менеджера. Можно узнать в [информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        manager_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployerServicesMethodAccess"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель или менеджер не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Список сохраненных поисков вакансий */
  "get-saved-vacancy-searches": {
    parameters: {
      query?: {
        /** @description Номер страницы (считается от 0, по умолчанию - 0) */
        page?: number;
        /** @description Количество элементов (по умолчанию - 10, максимальное значение - 10) */
        per_page?: number;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SavedSearchesSavedSearchResponse"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Создание нового сохраненного поиска вакансий
   * @description Некоторые параметры принимают множественные значения: `key=value&key=value`.
   *
   * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше 2000. Например, возможен запрос `per_page=10&page=199` (выдача с 1991 по 2000 вакансию), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с 2001 до 2010 вакансию)
   */
  "create-saved-vacancy-search": {
    parameters: {
      query?: {
        /** @description Номер страницы (считается от 0, по умолчанию - 0) */
        page?: number;
        /** @description Количество элементов (по умолчанию - 10, максимальное значение - 100) */
        per_page?: number;
        /** @description Переданное значение ищется в полях вакансии, указанных в параметре `search_field`. Доступен [язык запросов](https://hh.ru/article/1175). Специально для этого поля есть [автодополнение](#tag/Podskazki/operation/get-vacancy-search-keywords) */
        text?: string;
        /**
         * @description Область поиска. Справочник с возможными значениями: `vacancy_search_fields` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * По умолчанию, используются все поля. Можно указать несколько значений
         */
        search_field?: string;
        /** @description Опыт работы. Необходимо передавать `id` из справочника `experience` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        experience?: string;
        /** @description Тип занятости. Необходимо передавать `id` из справочника `employment` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        employment?: string;
        /** @description График работы. Необходимо передавать `id` из справочника `schedule` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        schedule?: string;
        /** @description Регион. Необходимо передавать `id` из справочника [/areas](#tag/Obshie-spravochniki/operation/get-areas). Можно указать несколько значений */
        area?: string;
        /** @description Ветка или станция метро. Необходимо передавать `id` из справочника [/metro](#tag/Obshie-spravochniki/operation/get-metro-stations). Можно указать несколько значений */
        metro?: string;
        /** @description Профессиональная область. Необходимо передавать `id` из справочника [/professional_roles](#tag/Obshie-spravochniki/operation/get-professional-roles-dictionary) */
        professional_role?: string;
        /** @description Индустрия компании, разместившей вакансию. Необходимо передавать `id` из справочника [/industries](#tag/Obshie-spravochniki/operation/get-industries). Можно указать несколько значений */
        industry?: string;
        /** @description Идентификатор [работодателя](#tag/Rabotodatel). Можно указать несколько значений */
        employer_id?: string;
        /** @description Код валюты. Справочник с возможными значениями: `currency` (ключ `code`) в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Имеет смысл указывать только совместно с параметром `salary` */
        currency?: string;
        /**
         * @description Размер заработной платы. Если указано это поле, но не указано `currency`, то для `currency` используется значение RUR.
         *
         * При указании значения будут найдены вакансии, в которых вилка зарплаты близка к указанной в запросе. При этом значения пересчитываются по текущим курсам ЦБ РФ. Например, при указании `salary=100&currency=EUR` будут найдены вакансии, где вилка зарплаты указана в рублях и после пересчёта в Евро близка к 100 EUR.
         *
         * По умолчанию будут также найдены вакансии, в которых вилка зарплаты не указана, чтобы такие вакансии отфильтровать, используйте `only_with_salary=true`
         */
        salary?: number;
        /** @description Фильтр по меткам вакансий. Необходимо передавать `id` из справочника `vacancy_label` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        label?: string;
        /** @description Показывать вакансии только с указанием зарплаты. По умолчанию `false` */
        only_with_salary?: boolean;
        /** @description Количество дней, в пределах которых производится поиск по вакансиям */
        period?: number;
        /**
         * @description Дата, которая ограничивает снизу диапазон дат публикации вакансий. Нельзя передавать вместе с параметром `period`.
         *
         * Значение указывается в формате `ISO 8601 - YYYY-MM-DD` или с точность до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Указанное значение будет округлено до ближайших пяти минут
         */
        date_from?: string;
        /**
         * @description Дата, которая ограничивает сверху диапазон дат публикации вакансий. Нельзя передавать вместе с параметром `period`.
         *
         * Значение указывается в формате `ISO 8601 - YYYY-MM-DD` или с точность до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Указанное значение будет округлено до ближайших пяти минут
         */
        date_to?: string;
        /**
         * @description Верхняя граница широты.
         *
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         *
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        top_lat?: number;
        /**
         * @description Нижняя граница широты.
         *
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         *
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        bottom_lat?: number;
        /**
         * @description Левая граница долготы.
         *
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         *
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        left_lng?: number;
        /**
         * @description Правая граница долготы.
         *
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         *
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        right_lng?: number;
        /**
         * @description Сортировка списка вакансий. Справочник с возможными значениями: `vacancy_search_order` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         *
         * Если выбрана сортировка по удалённости от гео-точки `distance`, необходимо также задать её координаты: `sort_point_lat`, `sort_point_lng`
         */
        order_by?: string;
        /** @description Значение географической широты точки, по расстоянию от которой будут отсортированы вакансии. Необходимо указывать только, если `order_by` установлено в `distance` */
        sort_point_lat?: number;
        /** @description Значение географической долготы точки, по расстоянию от которой будут отсортированы вакансии. Необходимо указывать только, если `order_by` установлено в `distance` */
        sort_point_lng?: number;
        /** @description Возвращать ли [кластеры для данного поиска](#tag/Poisk-vakansij/Klastery-v-poiske-vakansij). По умолчанию — `false` */
        clusters?: boolean;
        /**
         * @description Возвращать ли описание использованных параметров поиска. Успешный ответ будет содержать поле [`arguments`]((#tag/Poisk-vakansij/operation/get-vacancies))).
         * По умолчанию — `false`
         */
        describe_arguments?: boolean;
        /**
         * @description Если значение `true` — автоматическое преобразование вакансий отключено. По умолчанию – false.
         *
         * При включённом автоматическом преобразовании, будет предпринята попытка изменить текстовый запрос пользователя на набор параметров. Например, запрос `text=москва бухгалтер 100500` будет преобразован в `text=бухгалтер&only_with_salary=true&area=1&salary=100500`
         */
        no_magic?: boolean;
        /** @description Если значение `true` — в сортировке вакансий будет учтены премиум вакансии. Такая сортировка используется на сайте. По умолчанию — false */
        premium?: boolean;
        /** @description Если значение `true` — дополнительное поле `counters` с количеством откликов для вакансии включено. По-умолчанию — `false` */
        responses_count_enabled?: boolean;
        /**
         * @description Вакансии для подработки. Возможные значения:
         *
         * * Все элементы из `working_days` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Все элементы из `working_time_intervals` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Все элементы из `working_time_modes` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Элементы `part` или `project` из `employment` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Элемент `accept_temporary`, показывает вакансии только с временным трудоустройством.
         *
         * Можно указать несколько значений
         */
        part_time?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешно создано */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "text/html": string;
        };
      };
      /** @description Ошибки в аргументах */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Посмотревшие вакансию
   * @description Возвращает список сокращенных резюме соискателей, просмотревших вакансию за последнюю неделю. Список отсортирован по убыванию по дате просмотра. Если у пользователя несколько резюме, то вернется резюме с наиболее поздней датой обновления.
   *
   * В списке `items` не отображаются резюме, которые соискатель удалил или скрыл от работодателя. Но они учитываются при пагинации (`per_page`) и при подсчете найденных резюме (`found`), а в поле `hidden_on_page` показано количество таких пропущенных резюме на странице
   */
  "get-vacancy-visitors": {
    parameters: {
      query?: {
        /** @description Номер страницы (считается от 0, по умолчанию — 0) */
        page?: number;
        /** @description Количество элементов (по умолчанию — 20, максимальное значение — 50) */
        per_page?: number;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVisitorsResponse"];
        };
      };
      /** @description Параметры переданы с ошибкой */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Вакансия не найдена или недоступна текущему пользователю */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Просмотр вакансии
   * @description Возвращает подробную информацию по указанной вакансии
   */
  "get-vacancy": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVacancy"];
        };
      };
      /** @description Требуется ввести капчу */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonCaptchaErrors"];
        };
      };
      /** @description Указанная вакансия не существует или у пользователя нет прав на просмотр вакансии */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Редактирование вакансий
   * @description Изменяет поля вакансии, передаваемые в теле запроса.
   *
   * Составные поля (например, `salary`, `contacts`, `professional_roles`) можно редактировать только целиком, передавая полный объект. Например, для изменения валюты в зарплате, необходимо передавать также и значение зарплаты.
   *
   * Поля `billing_type` и `manager` необходимо передавать в отдельном запросе
   */
  "edit-vacancy": {
    parameters: {
      query?: {
        /** @description Игнорировать [появление дубликата](https://github.com/hhru/api/blob/master/docs/employer_vacancies.md#edit-ignore-duplicates), после редактирования вакансии. По умолчанию — `false` */
        ignore_duplicates?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VacancyEdit"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      204: {
        content: never;
      };
      /** @description Ошибка в теле запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyAddEditCombinedBadJsonDataErrors"];
        };
      };
      /** @description Ошибка авторизации */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyAddEditBadAuthForbiddenErrors"];
        };
      };
      /** @description Вакансия с переданным идентификатором не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Список скрытых вакансий
   * @description Возвращает [подмножество вакансий](#tag/Vakansii/operation/get-vacancy), скрытых пользователем, а также один дополнительный параметр
   */
  "get-blacklisted-vacancies": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVacanciesBlacklistedResponse"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Поиск по вакансиям
   * @description Возвращает список вакансий, размещенных в сервисе. Список вакансий фильтруется согласно переданным параметрам запроса.
   *
   * Особенности работы метода:
   *
   * * Неизвестные параметры и параметры с ошибкой в названии игнорируются.
   * * Если не передан токен авторизации, то после первого запроса будет предложено пройти капчу.
   * * Список вакансий зависит от типа авторизации пользователя. Например, для соискателей вакансии фильтруются по [списку скрытых вакансий](#tag/Skrytye-vakansii) и [списку скрытых компаний](#tag/Skrytye-rabotodateli).
   * * Список вакансий также зависит от [выбранного сайта](#section/Obshaya-informaciya/Vybor-sajta) (параметр `host`). Однако выбор регионального сайта, например hh.kz, не ограничивает список вакансиями данного региона. Чтобы ограничить список по региону, используйте параметр `area`.
   * * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше `2000`. Например, возможен запрос `per_page=10&page=199` (выдача с `1991` по `2000` вакансию), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с `2001` по `2010` вакансию)
   */
  "get-vacancies": {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов */
        per_page?: number;
        /** @description Переданное значение ищется в полях вакансии, указанных в параметре `search_field`. Доступен [язык запросов](https://hh.ru/article/1175). Специально для этого поля есть [автодополнение](#tag/Podskazki/operation/get-vacancy-search-keywords) */
        text?: string;
        /**
         * @description Область поиска. Справочник с возможными значениями: `vacancy_search_fields` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * По умолчанию, используются все поля. Можно указать несколько значений
         */
        search_field?: string;
        /** @description Опыт работы. Необходимо передавать `id` из справочника `experience` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        experience?: string;
        /** @description Тип занятости. Необходимо передавать `id` из справочника `employment` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        employment?: string;
        /** @description График работы. Необходимо передавать `id` из справочника `schedule` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        schedule?: string;
        /** @description Регион. Необходимо передавать `id` из справочника [/areas](#tag/Obshie-spravochniki/operation/get-areas). Можно указать несколько значений */
        area?: string;
        /** @description Ветка или станция метро. Необходимо передавать `id` из справочника [/metro](#tag/Obshie-spravochniki/operation/get-metro-stations). Можно указать несколько значений */
        metro?: string;
        /** @description Профессиональная область. Необходимо передавать `id` из справочника [/professional_roles](#tag/Obshie-spravochniki/operation/get-professional-roles-dictionary) */
        professional_role?: string;
        /** @description Индустрия компании, разместившей вакансию. Необходимо передавать `id` из справочника [/industries](#tag/Obshie-spravochniki/operation/get-industries). Можно указать несколько значений */
        industry?: string;
        /** @description Идентификатор [работодателя](#tag/Rabotodatel). Можно указать несколько значений */
        employer_id?: string;
        /** @description Код валюты. Справочник с возможными значениями: `currency` (ключ `code`) в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Имеет смысл указывать только совместно с параметром `salary` */
        currency?: string;
        /**
         * @description Размер заработной платы. Если указано это поле, но не указано `currency`, то для `currency` используется значение RUR.
         * При указании значения будут найдены вакансии, в которых вилка зарплаты близка к указанной в запросе. При этом значения пересчитываются по текущим курсам ЦБ РФ. Например, при указании `salary=100&currency=EUR` будут найдены вакансии, где вилка зарплаты указана в рублях и после пересчёта в Евро близка к 100 EUR.
         * По умолчанию будут также найдены вакансии, в которых вилка зарплаты не указана, чтобы такие вакансии отфильтровать, используйте `only_with_salary=true`
         */
        salary?: number;
        /** @description Фильтр по меткам вакансий. Необходимо передавать `id` из справочника `vacancy_label` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        label?: string;
        /** @description Показывать вакансии только с указанием зарплаты. По умолчанию `false` */
        only_with_salary?: boolean;
        /** @description Количество дней, в пределах которых производится поиск по вакансиям */
        period?: number;
        /**
         * @description Дата, которая ограничивает снизу диапазон дат публикации вакансий. Нельзя передавать вместе с параметром `period`.
         * Значение указывается в формате `ISO 8601 - YYYY-MM-DD` или с точность до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Указанное значение будет округлено до ближайших пяти минут
         */
        date_from?: string;
        /**
         * @description Дата, которая ограничивает сверху диапазон дат публикации вакансий. Нельзя передавать вместе с параметром `period`.
         * Значение указывается в формате `ISO 8601 - YYYY-MM-DD` или с точность до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Указанное значение будет округлено до ближайших пяти минут
         */
        date_to?: string;
        /**
         * @description Верхняя граница широты.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        top_lat?: number;
        /**
         * @description Нижняя граница широты.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        bottom_lat?: number;
        /**
         * @description Левая граница долготы.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        left_lng?: number;
        /**
         * @description Правая граница долготы.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        right_lng?: number;
        /**
         * @description Сортировка списка вакансий. Справочник с возможными значениями: `vacancy_search_order` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * Если выбрана сортировка по удалённости от гео-точки `distance`, необходимо также задать её координаты: `sort_point_lat`, `sort_point_lng`
         */
        order_by?: string;
        /** @description Значение географической широты точки, по расстоянию от которой будут отсортированы вакансии. Необходимо указывать только, если `order_by` установлено в `distance` */
        sort_point_lat?: number;
        /** @description Значение географической долготы точки, по расстоянию от которой будут отсортированы вакансии. Необходимо указывать только, если `order_by` установлено в `distance` */
        sort_point_lng?: number;
        /** @description Возвращать ли [кластеры для данного поиска](#tag/Poisk-vakansij/Klastery-v-poiske-vakansij). По умолчанию — `false` */
        clusters?: boolean;
        /** @description Возвращать ли описание использованных параметров поиска (массив `arguments`). По умолчанию — `false` */
        describe_arguments?: boolean;
        /**
         * @description Если значение `true` — автоматическое преобразование вакансий отключено. По умолчанию – false.
         * При включённом автоматическом преобразовании, будет предпринята попытка изменить текстовый запрос пользователя на набор параметров. Например, запрос `text=москва бухгалтер 100500` будет преобразован в `text=бухгалтер&only_with_salary=true&area=1&salary=100500`
         */
        no_magic?: boolean;
        /** @description Если значение `true` — в сортировке вакансий будет учтены премиум вакансии. Такая сортировка используется на сайте. По умолчанию — false */
        premium?: boolean;
        /** @description Если значение `true` — дополнительное поле `counters` с количеством откликов для вакансии включено. По-умолчанию — `false` */
        responses_count_enabled?: boolean;
        /**
         * @description Вакансии для подработки. Возможные значения:
         * * Все элементы из `working_days` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Все элементы из `working_time_intervals` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Все элементы из `working_time_modes` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Элементы `part` или `project` из `employment` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Элемент `accept_temporary`, показывает вакансии только с временным трудоустройством.
         * Можно указать несколько значений
         */
        part_time?: string;
        /**
         * @description Если значение `true` — то поиск происходит только по вакансиям временной работы.
         * По-умолчанию — `false`
         */
        accept_temporary?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVacanciesResponse"];
        };
      };
      /** @description Параметры переданы с ошибкой */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Требуется ввести капчу */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonCaptchaErrors"];
        };
      };
      /** @description Указанная вакансия не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Публикация вакансии
   * @description Создает новую вакансию с полями, передаваемыми в теле запроса.
   *
   * В соответствии с [законом РФ № 1032-1 от 19.04.1991 в ред. от 02.07.2013 г.](https://hh.ru/article/13967) запрещено размещать информацию, ограничивающую права или устанавливающую преимущества для соискателей по полу, возрасту, семейному положению и другим обстоятельствам, не связанным с деловыми качествами работников.
   *
   * Примечания:
   *
   * * При успешной публикации будут списаны соответствующие услуги.
   * * Все вакансии проходят ручную модерацию.
   * * В течение нескольких минут после публикации вакансия станет доступна в поиске.
   *
   * Полезные ссылки:
   *
   * * [Правила размещения вакансий](https://hh.ru/article/341)
   * * [Как составить хорошее описание вакансии](https://hh.ru/article/16239)
   */
  "publish-vacancy": {
    parameters: {
      query?: {
        /** @description Форсирование добавления дубликатов */
        ignore_duplicates?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VacancyCreate"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["_IncludesId"];
        };
      };
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyAddEditCombinedBadJsonDataErrors"];
        };
      };
      /** @description Ошибка авторизации */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyAddEditBadAuthForbiddenErrors"];
        };
      };
    };
  };
  /** Получение единичного сохраненного поиска вакансий */
  "get-saved-vacancy-search": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор сохраненного поиска */
        id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SavedSearchesSavedSearchItem"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Сохраненный поиск не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Обновление сохраненного поиска вакансий
   * @description У сохраненного поиска можно изменить имя (`name`) и статус подписки (`subscription`). В одном запросе можно передать только один из параметров
   */
  "update-saved-vacancy-search": {
    parameters: {
      query?: {
        /** @description Новое имя сохраненного поиска */
        name?: string;
        /** @description Статус подписки */
        subscription?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор сохраненного поиска */
        id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      400: components["responses"]["ErrorBadArgument"];
      403: components["responses"]["ErrorBadAuthorization"];
      404: components["responses"]["ErrorNotFound"];
      409: components["responses"]["ErrorBothChangedConflict"];
    };
  };
  /** Удаление сохраненного поиска вакансий */
  "delete-saved-vacancy-search": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор сохраненного поиска */
        id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      403: components["responses"]["ErrorBadAuthorization"];
      404: components["responses"]["ErrorNotFound"];
    };
  };
  /**
   * Поиск по вакансиям, похожим на вакансию
   * @description Если не передан токен авторизации, то после первого запроса будет предложено пройти капчу.
   *
   * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше `2000`. Например, возможен запрос `per_page=10&page=199` (выдача с `1991` по `2000` вакансию), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с `2001` по `2010` вакансию)
   */
  "get-vacancies-similar-to-vacancy": {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов */
        per_page?: number;
        /** @description Переданное значение ищется в полях вакансии, указанных в параметре `search_field`. Доступен [язык запросов](https://hh.ru/article/1175). Специально для этого поля есть [автодополнение](#tag/Podskazki/operation/get-vacancy-search-keywords) */
        text?: string;
        /**
         * @description Область поиска. Справочник с возможными значениями: `vacancy_search_fields` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * По умолчанию, используются все поля. Можно указать несколько значений
         */
        search_field?: string;
        /** @description Опыт работы. Необходимо передавать `id` из справочника `experience` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        experience?: string;
        /** @description Тип занятости. Необходимо передавать `id` из справочника `employment` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        employment?: string;
        /** @description График работы. Необходимо передавать `id` из справочника `schedule` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        schedule?: string;
        /** @description Регион. Необходимо передавать `id` из справочника [/areas](#tag/Obshie-spravochniki/operation/get-areas). Можно указать несколько значений */
        area?: string;
        /** @description Ветка или станция метро. Необходимо передавать `id` из справочника [/metro](#tag/Obshie-spravochniki/operation/get-metro-stations). Можно указать несколько значений */
        metro?: string;
        /** @description Профессиональная область. Необходимо передавать `id` из справочника [/professional_roles](#tag/Obshie-spravochniki/operation/get-professional-roles-dictionary) */
        professional_role?: string;
        /** @description Индустрия компании, разместившей вакансию. Необходимо передавать `id` из справочника [/industries](#tag/Obshie-spravochniki/operation/get-industries). Можно указать несколько значений */
        industry?: string;
        /** @description Идентификатор [работодателя](#tag/Rabotodatel). Можно указать несколько значений */
        employer_id?: string;
        /** @description Код валюты. Справочник с возможными значениями: `currency` (ключ `code`) в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Имеет смысл указывать только совместно с параметром `salary` */
        currency?: string;
        /**
         * @description Размер заработной платы. Если указано это поле, но не указано `currency`, то для `currency` используется значение RUR.
         * При указании значения будут найдены вакансии, в которых вилка зарплаты близка к указанной в запросе. При этом значения пересчитываются по текущим курсам ЦБ РФ. Например, при указании `salary=100&currency=EUR` будут найдены вакансии, где вилка зарплаты указана в рублях и после пересчёта в Евро близка к 100 EUR.
         * По умолчанию будут также найдены вакансии, в которых вилка зарплаты не указана, чтобы такие вакансии отфильтровать, используйте `only_with_salary=true`
         */
        salary?: number;
        /** @description Фильтр по меткам вакансий. Необходимо передавать `id` из справочника `vacancy_label` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        label?: string;
        /** @description Показывать вакансии только с указанием зарплаты. По умолчанию `false` */
        only_with_salary?: boolean;
        /** @description Количество дней, в пределах которых производится поиск по вакансиям */
        period?: number;
        /**
         * @description Дата, которая ограничивает снизу диапазон дат публикации вакансий. Нельзя передавать вместе с параметром `period`.
         * Значение указывается в формате `ISO 8601 - YYYY-MM-DD` или с точность до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Указанное значение будет округлено до ближайших пяти минут
         */
        date_from?: string;
        /**
         * @description Дата, которая ограничивает сверху диапазон дат публикации вакансий. Нельзя передавать вместе с параметром `period`.
         * Значение указывается в формате `ISO 8601 - YYYY-MM-DD` или с точность до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Указанное значение будет округлено до ближайших пяти минут
         */
        date_to?: string;
        /**
         * @description Верхняя граница широты.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        top_lat?: number;
        /**
         * @description Нижняя граница широты.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        bottom_lat?: number;
        /**
         * @description Левая граница долготы.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        left_lng?: number;
        /**
         * @description Правая граница долготы.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        right_lng?: number;
        /**
         * @description Сортировка списка вакансий. Справочник с возможными значениями: `vacancy_search_order` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * Если выбрана сортировка по удалённости от гео-точки `distance`, необходимо также задать её координаты: `sort_point_lat`, `sort_point_lng`
         */
        order_by?: string;
        /** @description Значение географической широты точки, по расстоянию от которой будут отсортированы вакансии. Необходимо указывать только, если `order_by` установлено в `distance` */
        sort_point_lat?: number;
        /** @description Значение географической долготы точки, по расстоянию от которой будут отсортированы вакансии. Необходимо указывать только, если `order_by` установлено в `distance` */
        sort_point_lng?: number;
        /** @description Возвращать ли [кластеры для данного поиска](#tag/Poisk-vakansij/Klastery-v-poiske-vakansij). По умолчанию — `false` */
        clusters?: boolean;
        /**
         * @description Возвращать ли описание использованных параметров поиска. Успешный ответ будет содержать поле [`arguments`]((#tag/Poisk-vakansij/operation/get-vacancies))).
         * По умолчанию — `false`
         */
        describe_arguments?: boolean;
        /**
         * @description Если значение `true` — автоматическое преобразование вакансий отключено. По умолчанию – false.
         * При включённом автоматическом преобразовании, будет предпринята попытка изменить текстовый запрос пользователя на набор параметров. Например, запрос `text=москва бухгалтер 100500` будет преобразован в `text=бухгалтер&only_with_salary=true&area=1&salary=100500`
         */
        no_magic?: boolean;
        /** @description Если значение `true` — в сортировке вакансий будет учтены премиум вакансии. Такая сортировка используется на сайте. По умолчанию — false */
        premium?: boolean;
        /** @description Если значение `true` — дополнительное поле `counters` с количеством откликов для вакансии включено. По-умолчанию — `false` */
        responses_count_enabled?: boolean;
        /**
         * @description Вакансии для подработки. Возможные значения:
         * * Все элементы из `working_days` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Все элементы из `working_time_intervals` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Все элементы из `working_time_modes` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Элементы `part` или `project` из `employment` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Элемент `accept_temporary`, показывает вакансии только с временным трудоустройством.
         * Можно указать несколько значений
         */
        part_time?: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVacanciesResponse"];
        };
      };
      /** @description Параметры переданы с ошибкой */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Требуется ввести капчу */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonCaptchaErrors"];
        };
      };
      /** @description Указанная вакансия не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Список улучшений для вакансии */
  "get-vacancy-upgrade-list": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVacancyUpgradeListResponse"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Вакансия не найдена или у пользователя нет прав на просмотр данной вакансии */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Поиск по вакансиям, похожим на резюме
   * @description Данные доступны только автору резюме.
   *
   * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше `2000`. Например, возможен запрос `per_page=10&page=199` (выдача с `1991` по `2000` вакансию), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с `2001` по `2010` вакансию)
   */
  "get-vacancies-similar-to-resume": {
    parameters: {
      query?: {
        /** @description Номер страницы (считается от 0, по умолчанию - 0) */
        page?: number;
        /** @description Количество элементов (по умолчанию - 10, максимальное значение - 100) */
        per_page?: number;
        /** @description Переданное значение ищется в полях вакансии, указанных в параметре `search_field`. Доступен [язык запросов](https://hh.ru/article/1175). Специально для этого поля есть [автодополнение](#tag/Podskazki/operation/get-vacancy-search-keywords) */
        text?: string;
        /**
         * @description Область поиска. Справочник с возможными значениями: `vacancy_search_fields` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * По умолчанию, используются все поля. Можно указать несколько значений
         */
        search_field?: string;
        /** @description Опыт работы. Необходимо передавать `id` из справочника `experience` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        experience?: string;
        /** @description Тип занятости. Необходимо передавать `id` из справочника `employment` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        employment?: string;
        /** @description График работы. Необходимо передавать `id` из справочника `schedule` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        schedule?: string;
        /** @description Регион. Необходимо передавать `id` из справочника [/areas](#tag/Obshie-spravochniki/operation/get-areas). Можно указать несколько значений */
        area?: string;
        /** @description Ветка или станция метро. Необходимо передавать `id` из справочника [/metro](#tag/Obshie-spravochniki/operation/get-metro-stations). Можно указать несколько значений */
        metro?: string;
        /** @description Профессиональная область. Необходимо передавать `id` из справочника [/professional_roles](#tag/Obshie-spravochniki/operation/get-professional-roles-dictionary) */
        professional_role?: string;
        /** @description Индустрия компании, разместившей вакансию. Необходимо передавать `id` из справочника [/industries](#tag/Obshie-spravochniki/operation/get-industries). Можно указать несколько значений */
        industry?: string;
        /** @description Идентификатор [работодателя](#tag/Rabotodatel). Можно указать несколько значений */
        employer_id?: string;
        /** @description Код валюты. Справочник с возможными значениями: `currency` (ключ `code`) в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Имеет смысл указывать только совместно с параметром `salary` */
        currency?: string;
        /**
         * @description Размер заработной платы. Если указано это поле, но не указано `currency`, то для `currency` используется значение RUR.
         * При указании значения будут найдены вакансии, в которых вилка зарплаты близка к указанной в запросе. При этом значения пересчитываются по текущим курсам ЦБ РФ. Например, при указании `salary=100&currency=EUR` будут найдены вакансии, где вилка зарплаты указана в рублях и после пересчёта в Евро близка к 100 EUR.
         * По умолчанию будут также найдены вакансии, в которых вилка зарплаты не указана, чтобы такие вакансии отфильтровать, используйте `only_with_salary=true`
         */
        salary?: number;
        /** @description Фильтр по меткам вакансий. Необходимо передавать `id` из справочника `vacancy_label` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        label?: string;
        /** @description Показывать вакансии только с указанием зарплаты. По умолчанию `false` */
        only_with_salary?: boolean;
        /** @description Количество дней, в пределах которых производится поиск по вакансиям */
        period?: number;
        /**
         * @description Дата, которая ограничивает снизу диапазон дат публикации вакансий. Нельзя передавать вместе с параметром `period`.
         * Значение указывается в формате `ISO 8601 - YYYY-MM-DD` или с точность до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Указанное значение будет округлено до ближайших пяти минут
         */
        date_from?: string;
        /**
         * @description Дата, которая ограничивает сверху диапазон дат публикации вакансий. Нельзя передавать вместе с параметром `period`.
         * Значение указывается в формате `ISO 8601 - YYYY-MM-DD` или с точность до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Указанное значение будет округлено до ближайших пяти минут
         */
        date_to?: string;
        /**
         * @description Верхняя граница широты.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        top_lat?: number;
        /**
         * @description Нижняя граница широты.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        bottom_lat?: number;
        /**
         * @description Левая граница долготы.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        left_lng?: number;
        /**
         * @description Правая граница долготы.
         * При поиске используется значение указанного в вакансии адреса. Принимаемое значение — градусы в виде десятичной дроби.
         * Необходимо передавать одновременно все четыре параметра гео-координат, иначе вернется ошибка
         */
        right_lng?: number;
        /**
         * @description Сортировка списка вакансий. Справочник с возможными значениями: `vacancy_search_order` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * Если выбрана сортировка по удалённости от гео-точки `distance`, необходимо также задать её координаты: `sort_point_lat`, `sort_point_lng`
         */
        order_by?: string;
        /** @description Значение географической широты точки, по расстоянию от которой будут отсортированы вакансии. Необходимо указывать только, если `order_by` установлено в `distance` */
        sort_point_lat?: number;
        /** @description Значение географической долготы точки, по расстоянию от которой будут отсортированы вакансии. Необходимо указывать только, если `order_by` установлено в `distance` */
        sort_point_lng?: number;
        /** @description Возвращать ли [кластеры для данного поиска](#tag/Poisk-vakansij/Klastery-v-poiske-vakansij). По умолчанию — `false` */
        clusters?: boolean;
        /**
         * @description Возвращать ли описание использованных параметров поиска. Успешный ответ будет содержать поле [`arguments`]((#tag/Poisk-vakansij/operation/get-vacancies))).
         * По умолчанию — `false`
         */
        describe_arguments?: boolean;
        /**
         * @description Если значение `true` — автоматическое преобразование вакансий отключено. По умолчанию – false.
         * При включённом автоматическом преобразовании, будет предпринята попытка изменить текстовый запрос пользователя на набор параметров. Например, запрос `text=москва бухгалтер 100500` будет преобразован в `text=бухгалтер&only_with_salary=true&area=1&salary=100500`
         */
        no_magic?: boolean;
        /** @description Если значение `true` — в сортировке вакансий будет учтены премиум вакансии. Такая сортировка используется на сайте. По умолчанию — false */
        premium?: boolean;
        /** @description Если значение `true` — дополнительное поле `counters` с количеством откликов для вакансии включено. По-умолчанию — `false` */
        responses_count_enabled?: boolean;
        /**
         * @description Вакансии для подработки. Возможные значения:
         * * Все элементы из `working_days` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Все элементы из `working_time_intervals` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Все элементы из `working_time_modes` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Элементы `part` или `project` из `employment` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries).
         * * Элемент `accept_temporary`, показывает вакансии только с временным трудоустройством.
         * Можно указать несколько значений
         */
        part_time?: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVacanciesResponse"];
        };
      };
      /** @description Параметры переданы с ошибкой */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Указанное резюме не существует или у текущего пользователя нет доступа */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Список отобранных вакансий
   * @description Возвращает [подмножество вакансий](#tag/Vakansii/operation/get-vacancy), добавленных пользователем в отобранные, а также ряд дополнительных полей
   */
  "get-favorite-vacancies": {
    parameters: {
      query?: {
        /** @description Номер страницы (считается от 0, по умолчанию - 0) */
        page?: number;
        /** @description Количество элементов на странице */
        per_page?: number;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVacanciesFavoritedResponse"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Добавление вакансии в список скрытых
   * @description Добавляет указанную вакансию в [список скрытых вакансий](#tag/Skrytye-vakansii/operation/get-blacklisted-vacancies)
   */
  "add-vacancy-to-blacklisted": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Превышен лимит на количество элементов в списке */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyBlacklistedBadRequestErrors"];
        };
      };
      /** @description Текущий пользователь не является соискателем или не имеет прав на добавление вакансии в скрытые */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Вакансия не найдена */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyBlacklistedNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Удаление вакансии из списка скрытых
   * @description Удаляет указанную вакансию из [списка скрытых вакансий](#tag/Skrytye-vakansii/operation/get-blacklisted-vacancies)
   */
  "delete-vacancy-from-blacklisted": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Вакансия не найдена */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyBlacklistedNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Просмотр списка опубликованных вакансий
   * @description Возвращает список опубликованных вакансий.
   *
   * Если передан параметр `resume_id`, то в список попадут только те вакансии, которые подходят для указанного резюме. Кроме того, ответ будет содержать дополнительные поля
   */
  "get-active-vacancy-list": {
    parameters: {
      query?: {
        /** @description Номер страницы (считается от 0) */
        page?: number;
        /** @description Количество элементов */
        per_page?: number;
        /**
         * @description Идентификатор менеджера, вакансии которого будут получены в ответе. По умолчанию возвращаются вакансии текущего пользователя.
         * Если передать несколько `manager_id`, будет использован последний. Значения можно взять из [списка](#tag/Menedzhery-rabotodatelya/operation/get-employer-managers)
         */
        manager_id?: string;
        /** @description Строка для поиска по названию вакансии */
        text?: string;
        /** @description Идентификатор региона с вакансией. Чтобы получить идентификаторы регионов, в которых есть активные вакансии, воспользуйтесь [соответствующим методом](#tag/Informaciya-o-rabotodatele/operation/get-employer-vacancy-areas) */
        area?: string;
        /** @description Идентификатор резюме. Этот параметр нельзя передавать в комбинации с другими параметрами, только отдельно. Если параметр передан, в ответе возвращаются только те вакансии, которые подходят для указанного резюме, а также дополнительные поля */
        resume_id?: string;
        /** @description Способ сортировки вакансий. Доступные значения перечислены в поле `employer_active_vacancies_order` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        order_by?: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVacancyListResponse"];
        };
      };
      /** @description Ошибка параметров запроса или передана несочетаемая пара параметров */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Менеджер с переданным идентификатором не существует или у текущего пользователя нет прав на просмотр опубликованных вакансий */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Список удаленных вакансий */
  "get-hidden-vacancies": {
    parameters: {
      query?: {
        /**
         * @description Идентификатор менеджера. Передайте, если требуется получить удаленные вакансии другого менеджера.
         * Если передать несколько параметров `manager_id`, будет использоваться только последний.
         * По умолчанию возвращаются вакансии текущего пользователя
         */
        manager_id?: string;
        /** @description Сортировка списка вакансий в архиве. Справочник с возможными значениями: `employer_hidden_vacancies_order` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        order_by?: string;
        /** @description Количество элементов на странице выдачи. Поддерживаются [стандартные параметры пагинации](#section/Obshaya-informaciya/Paginaciya). Значение по умолчанию и максимальное значение `per_page` составляет 1000 */
        per_page?: number;
        /** @description Порядковый номер страницы в выдаче. Поддерживаются [стандартные параметры пагинации](#section/Obshaya-informaciya/Paginaciya). По умолчанию нумерация начинается с 0 страницы */
        page?: number;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesDeletedVacancyListResponse"];
        };
      };
      /** @description Параметры переданы с ошибкой */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является работодателем, либо указан неверный идентификатор работодателя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description У текущего пользователя нет прав на просмотр удаленных вакансий */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Удаление вакансий
   * @description Удалить можно только вакансию из архива
   */
  "add-vacancy-to-hidden": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текущий пользователь не является работодателем или вы пытаетесь удалить вакансию, которая не находится в архиве */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указан неверный идентификатор работодателя или вакансии, либо у текущего пользователя нет прав на удаление вакансии из архива */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Восстановление вакансии из удаленных
   * @description Восстановить можно только удаленную из архива вакансию. Вакансия вернется в архив
   */
  "restore-vacancy-from-hidden": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текущий пользователь не является работодателем или вы пытаетесь восстановить вакансию, которая не удалена */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указан неверный идентификатор работодателя или вакансии, либо у текущего пользователя нет прав на удаление вакансии из архива */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Условия заполнения полей при добавлении и редактировании вакансий */
  "get-vacancy-conditions": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVacancyConditions"];
        };
      };
      /** @description Условия заполнения полей вакансии недоступны данному пользователю */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Информация о возможности продления вакансии
   * @description Условия продления:
   *
   *     * Стоимость продления вакансии равна стоимости новой публикации.
   *     * Стандартные вакансии можно продлевать, если с момента предыдущего продления прошло не менее 1 минуты.
   *     * Вакансии "стандарт-плюс" можно продлевать не ранее, чем за 7 дней до окончания срока публикации
   */
  "get-prolongation-vacancy-info": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVacancyProlongate"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Текущему пользователю недоступно получение информации о вакансии или вакансия не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Продление вакансии
   * @description Продлевает срок размещения указанной вакансии.
   *
   * Условия продления:
   *
   * * Стоимость продления вакансии равна стоимости новой публикации.
   * * Стандартные вакансии можно продлевать, если с момента предыдущего продления прошло не менее 1 минуты.
   * * Вакансии "стандарт-плюс" можно продлевать не ранее, чем за 7 дней до окончания срока публикации
   */
  "vacancy-prolongation": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текущий пользователь не является работодателем или продление невозможно */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyProlongateForbidden"];
        };
      };
      /** @description Текущему пользователю недоступно получение информации о вакансии или вакансия не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Архивация вакансии
   * @description Переносит вакансию в архив
   */
  "add-vacancy-to-archive": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указан неверный идентификатор работодателя, либо у текущего пользователя нет прав на архивацию вакансии, либо вакансия с переданным идентификатором не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Просмотр предпочитаемой сортировки откликов */
  "get-pref-negotiations-order": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesPreferredNegotiationsOrder"];
        };
      };
      /** @description Вакансия не найдена или просмотр откликов/приглашений по ней недоступен */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Изменение предпочитаемой сортировки откликов */
  "put-pref-negotiations-order": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["VacanciesPreferredNegotiationsOrderRequest"];
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Идентификатор типа сортировки передан с ошибкой или данный тип сортировки недоступен */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Вакансия не найдена или просмотр откликов/приглашений по ней недоступен */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Добавление вакансии в список отобранных
   * @description Добавляет указанную вакансию в [список отобранных вакансий](#tag/Otobrannye-vakansii/operation/get-favorite-vacancies)
   */
  "add-vacancy-to-favorite": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текущий пользователь не является соискателем или не имеет прав на добавление вакансии в отобранные */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyFavoritedCombinedBadAuthErrors"];
        };
      };
      /** @description Вакансия не найдена */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Удаление вакансии из списка отобранных
   * @description Удаляет указанную вакансию из [списка отобранных вакансий](#tag/Otobrannye-vakansii/operation/get-favorite-vacancies)
   */
  "delete-vacancy-from-favorite": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Вакансия не найдена */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Варианты публикации вакансий у текущего менеджера
   * @description Метод позволяет понять, может ли менеджер публиковать вакансии и какие типы вакансий ему доступны. Возвращает все возможные типы публикации
   */
  "get-available-vacancy-types": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя, который можно узнать [в информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
        /** @description Идентификатор менеджера, который можно узнать [в информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        manager_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesAvailableVacancyTypeResponse"];
        };
      };
      /** @description Текущий пользователь не является работодателем или не имеет доступа к данным */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Менеджер или компания не существуют или не доступны для текущего пользователя */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Статистика по вакансии
   * @description Возвращает статистику за последние пять дней существования вакансии.
   *
   * При этом:
   *
   * * Если вакансия создана менее пяти дней назад, то первой датой в ответе будет дата создания вакансии. Для будущих дат в полях `responses` и `views` вернется `null`.
   * * Если вакансия находится в архиве или удалена, то последней датой будет дата архивации
   */
  "get-vacancy-stats": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesVacancyStatsResponse"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Вакансия не найдена */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Список архивных вакансий */
  "get-archived-vacancies": {
    parameters: {
      query?: {
        /**
         * @description Идентификатор менеджера из [списка менеджеров работодателя](#tag/Menedzhery-rabotodatelya/operation/get-employer-managers). Передайте, если требуется получить вакансии другого менеджера.
         *
         * Если передать несколько параметров `manager_id`, будет использоваться только последний.
         *
         * По умолчанию возвращаются вакансии текущего пользователя
         */
        manager_id?: string;
        /** @description Сортировка списка вакансий в архиве. Справочник с возможными значениями: `employer_archived_vacancies_order` в [/dictionaries](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        order_by?: string;
        /** @description Количество элементов на странице выдачи. Поддерживаются [стандартные параметры пагинации](#section/Obshaya-informaciya/Paginaciya). Значение по умолчанию и максимальное значение `per_page` составляет 1000 */
        per_page?: number;
        /** @description Порядковый номер страницы в выдаче. Поддерживаются [стандартные параметры пагинации](#section/Obshaya-informaciya/Paginaciya). По умолчанию нумерация начинается с 0 страницы */
        page?: number;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacanciesArchivedVacancyListResponse"];
        };
      };
      /** @description Параметры переданы с ошибкой */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является работодателем, либо указан неверный идентификатор работодателя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description У текущего пользователя нет прав на просмотр архивных вакансий */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Условия загрузки портфолио */
  "get-artifacts-portfolio-conditions": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ArtifactsArtifactConditions"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Редактирование артефакта
   * @description Метод позволяет отредактировать описание портфолио
   */
  "edit-artifact": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор артефакта. Чтобы получить его, используйте метод [Получение портфолио](#tag/Rabota-s-artefaktami/operation/get-artifacts-portfolio) */
        id: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ArtifactsPortfolioDescription"];
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Артефакт не существует или не принадлежит текущему пользователю */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Удаление артефакта */
  "delete-artifact": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор артефакта. Чтобы получить его, используйте метод [Получение портфолио](#tag/Rabota-s-artefaktami/operation/get-artifacts-portfolio) или [Получение фотографий](#tag/Rabota-s-artefaktami/operation/get-artifact-photos) */
        id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Артефакт не существует или не принадлежит текущему пользователю */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Загрузка артефакта
   * @description Запрос загружает файл с локальной машины в сервис.
   *
   * Ограничения на типы файлов и их размер доступны в [условиях загрузки артефактов](#tag/Rabota-s-artefaktami).
   *
   * Для прикрепления загруженных изображений в резюме, необходимо передать `id` артефакта в [соответствующее поле резюме](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#resume-fields). Для удаления артефакта из резюме укажите `null`
   */
  "load-artifact": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ArtifactsArtifactUploadBody"];
      };
    };
    responses: {
      /** @description Результат отправки файла */
      201: {
        content: {
          "application/json": components["schemas"]["ArtifactsArtifactItem"];
        };
      };
      /** @description Ошибка в параметрах запроса или добавление изображения невозможно */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsArtifactUploadBadJsonData"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Изображение слишком большое */
      413: {
        content: {
          "application/json": components["schemas"]["ErrorsRequestEntityTooLargeErrors"];
        };
      };
    };
  };
  /**
   * Получение портфолио
   * @description Возвращает список ранее загруженных изображений с портфолио. Их можно использовать при создании/редактировании резюме
   */
  "get-artifacts-portfolio": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ArtifactsArtifactPortfolioResponse"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /** Условия загрузки фотографий */
  "get-artifact-photos-conditions": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ArtifactsArtifactConditions"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Получение фотографий
   * @description Возвращает список ранее загруженных изображений с фотографиями. Их можно использовать при создании/редактировании резюме
   */
  "get-artifact-photos": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ArtifactsArtifactPhotoResponse"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Справочники полей
   * @description Справочники полей и сущностей, используемых в API. Значения в справочниках могут поменяться в любой момент
   */
  "get-dictionaries": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesDictResponse"];
        };
      };
    };
  };
  /** Список всех языков */
  "get-languages": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesLangResponse"];
        };
      };
    };
  };
  /** Основная информация об учебных заведениях */
  "get-educational-institutions-dictionary": {
    parameters: {
      query: {
        /** @description Идентификаторы учебных заведений. Идентификатор конкретного заведения можно узнать в [подсказке](#tag/Podskazki/operation/get-educational-institutions-suggests). Передать можно не более 50 значений. Например: `?id=39196&id=45470&id=0`. Если был передан идентификатор несуществующего заведения, для него не вернется никакой информации */
        id: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestsEducationalInstitutions"];
        };
      };
      /** @description Неверные параметры запроса, либо ошибка [bulk-запроса](https://github.com/hhru/api/blob/master/docs/errors.md#bulk-request) */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
    };
  };
  /**
   * Справочник ключевых навыков
   * @description Метод возвращает информацию по запрашиваемым ключевым навыкам.
   *
   * Значения в справочнике могут поменяться в любой момент
   */
  "get-skills": {
    parameters: {
      query: {
        /** @description Идентификаторы ключевых навыков. Идентификатор конкретного навыка можно узнать по [подсказке](#tag/Podskazki/operation/get-skill-set-suggests). Передать можно не более 50 значений. Например: `?id=2716&id=3019&id=0`. Если был передан идентификатор несуществующего ключевого навыка, для него не вернется никакой информации */
        id: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesSkillsResponse"];
        };
      };
      /** @description Неверные параметры запроса, либо ошибка [bulk-запроса](https://github.com/hhru/api/blob/master/docs/errors.md#bulk-request) */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
    };
  };
  /**
   * Справочник профессиональных ролей
   * @description Возвращает профессиональные роли, их категории и другую информацию о профессиональных ролях
   */
  "get-professional-roles-dictionary": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ProfessionalRolesCatalog"];
        };
      };
      400: components["responses"]["ErrorBadArgument"];
    };
  };
  /**
   * Список факультетов учебного заведения
   * @description Возвращает список факультетов указанного учебного заведения
   */
  "get-faculties": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор учебного заведения, который можно узнать из [подсказки](#tag/Podskazki/operation/get-educational-institutions-suggests) */
        id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesFacultiesResponse"];
        };
      };
      /** @description Указанное учебное заведение не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Отрасли компаний
   * @description Возвращает двухуровневый справочник всех отраслей
   */
  "get-industries": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesIndustriesResponse"];
        };
      };
    };
  };
  /**
   * Справочник стран
   * @description Возвращает подмножество регионов, являющихся странами
   */
  "get-countries": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesCountriesResponse"];
        };
      };
    };
  };
  /**
   * Дерево всех регионов
   * @description Возвращает древовидный список всех регионов.
   *
   * Значения в справочнике могут поменяться в любой момент
   */
  "get-areas": {
    parameters: {
      query?: {
        /**
         * @description Применимо только к русской локализации.
         *
         * В дополнительном поле вернется название региона в указанном падеже. Поддерживается только значение `prepositional` — предложный падеж
         */
        additional_case?: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesAreaResponse"];
        };
      };
      /** @description Ошибки в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsDictionariesBadArgumentErrors"];
        };
      };
    };
  };
  /**
   * Справочник регионов, начиная с указанного
   * @description Возвращает древовидный список регионов, начиная с указанного.
   *
   * Значения в справочнике могут поменяться в любой момент
   */
  "get-areas-from-specified": {
    parameters: {
      query?: {
        /**
         * @description Применимо только к русской локализации.
         *
         * В дополнительном поле вернется название региона в указанном падеже. Поддерживается только значение `prepositional` — предложный падеж
         */
        additional_case?: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор региона из справочника [/areas](#tag/Obshie-spravochniki/operation/get-areas) */
        area_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesAreaItem"];
        };
      };
      /** @description Ошибки в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsDictionariesBadArgumentErrors"];
        };
      };
    };
  };
  /**
   * Уровни компетенций
   * @description Возвращает список уровней компетенций
   */
  "get-salary-employee-levels": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesSalaryStatisticsEmployeeLevelResponse"];
        };
      };
    };
  };
  /**
   * Регионы и города
   * @description Возвращает список регионов, областей и городов
   */
  "get-salary-salary-areas": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesSalaryStatisticsAreaResponse"];
        };
      };
    };
  };
  /**
   * Профобласти и специализации
   * @description Возвращает список профобластей и специализаций
   */
  "get-salary-professional-areas": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesSalaryStatisticsProfessionalAreasResponse"];
        };
      };
    };
  };
  /**
   * Отрасли и сферы деятельности
   * @description Возвращает двухуровневый список отраслей и сфер деятельности
   */
  "get-salary-industries": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesIndustriesResponse"];
        };
      };
    };
  };
  /**
   * Действия по отклику/приглашению коллекции
   * @description Запрос изменяет состояние работодательского (`employer_state`) или соискательского (`state`) состояния отклика/приглашения.
   *
   * #### Смена работодательского состояния отклика/приглашения
   *
   * > Доступные действия для каждого отклика/приглашения перечислены в массиве `employer_states` [списка откликов/приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations).
   *
   * Чтобы изменить состояние отклика, выполните запрос из параметра `actions[].url` [списка откликов/приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-collection-negotiations-list) для выбранного действия над откликом.
   * В запросе необходимо передать аргументы массива `actions[].arguments` в формате `application/x-www-form-urlencoded`.
   *
   * Примеры действий:
   *
   * * отложить отклик;
   * * пригласить соискателя на интервью в ответ на отклик;
   * * отказать соискателю.
   *
   * #### Смена соискательского состояния отклика/приглашения
   *
   * Изменение соискательского состояния отклика/приглашения влияет на [статистику по работе с откликами](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations-statistics-employer).
   *
   * Условие смены соискательского состояния отклика/приглашения — отправка сообщения соискателю любым из способов:
   *
   * - Совершить действие с откликом/приглашением, используя метод `/negotiations/{collection_name}/{nid}`, с сопроводительным сообщением.
   * - [Отправить сообщение](#tag/Otklikipriglasheniya-rabotodatelya/operation/send-negotiation-message) в отклике. Статус изменится, если перед отправкой использовался метод изменения работодательского статуса без сопроводительного сообщения.
   *
   * Соискательский статус в обоих случаях изменится или на приглашение (`invitation`), или на отказ (`discard`)
   */
  "change-negotiation-action": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Название коллекции. Возможные значения указаны в поле `generated_collections.name` [списка коллекций](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations) */
        collection_name: string;
        /** @description Идентификатор отклика */
        nid: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Ошибка параметров запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadRequestBadArgumentBadRequestAndBadArgumentErrors"];
        };
      };
      /** @description Невозможно выполнить действие по отклику/приглашению */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyApplyForbiddenErrors"];
        };
      };
      /** @description Указанный отклик/приглашение не найден или у текущего пользователя нет доступа */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsNegotiationNegotiationsNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Список откликов/приглашений
   * @description Возвращает список откликов соискателя или список коллекций откликов/приглашений по [вакансии](#tag/Upravlenie-vakansiyami/operation/get-active-vacancy-list) работодателя.
   *
   * По умолчанию отклики сортируются по дате последнего обновления — от новых к старым.
   *
   * Чтобы получить список активных откликов, передайте в запросе параметр `?status=active`
   */
  "get-negotiations": {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        per_page?: number;
        /** @description Тип сортировки. Возможные значения указаны в поле `negotiations_order` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        order_by?: string;
        /** @description Направление сортировки. Возможные значения: `asc` — по возрастанию, `desc` — по убыванию */
        order?: string;
        /** @description Фильтр по ID вакансии. Обязательный для работодателя */
        vacancy_id?: string;
        /**
         * @description Запрос вернет только те отклики, которые находятся в определенном статусе.
         *
         * Возможные значения указаны в поле `applicant_negotiation_status` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
         */
        status?: string;
        /** @description Если передан `true`, запрос вернет только те отклики, для которых есть непросмотренные сообщения. По умолчанию `false` */
        has_updates?: boolean;
        /** @description Если передан `true`, запрос вернет статус поиска работы кандидатом */
        with_job_search_status?: boolean;
        /**
         * @description Если передан `true`, запрос вернет информацию по [сгенерированным коллекциям](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md#term-collection) откликов/приглашений для данной вакансии.
         *
         * Чтобы получить выгрузку по нескольким коллекциям, запросите их последовательно. По умолчанию `false`
         */
        with_generated_collections?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["NegotiationsListResponse"];
        };
      };
      /** @description Ошибка параметров запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadRequestBadArgumentBadRequestAndBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанная вакансия не существует или у текущего пользователя нет доступа */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Отклик на вакансию
   * @description Запрос позволяет пользователю откликнуться на вакансию.
   *
   * Чтобы узнать, какими резюме возможно откликнуться на конкретную вакансию, воспользуйтесь [списком подходящих резюме](#tag/Rezyume.-Prosmotr-informacii/operation/get-suitable-resumes)
   */
  "apply-to-vacancy": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["VacanciesVacancyApplicationBody"];
      };
    };
    responses: {
      /** @description Результат отклика на обычную вакансию */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "text/html": string;
        };
      };
      /** @description Результат отклика на вакансию с прямым откликом */
      303: {
        headers: {
          Location?: string;
        };
        content: {
          "text/html": string;
        };
      };
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyApplyBadRequestErrors"] | components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Невозможно откликнуться на вакансию */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsNegotiationNegotiationsBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Статистика откликов для менеджера
   * @description Запрос выводит статистику по работе с откликами для вакансий менеджера за период (30 дней). Статистика менеджера доступна самому менеджеру, а также менеджерам с [типом](#tag/Menedzhery-rabotodatelya/operation/get-employer-manager-types) `main_contact_person`.
   *
   * Дополнительно рассчитывается [индекс вежливости](https://hh.ru/article/23734) менеджера по всем вакансиям
   */
  "get-negotiations-statistics-manager": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /**
         * @description Идентификатор работодателя
         * @example 1455
         */
        employer_id: string;
        /** @description Идентификатор менеджера */
        manager_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["NegotiationsNegotiationsStatisticsManagerResponse"];
        };
      };
      /** @description Текущий пользователь не является менеджером или работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Запрашиваемый работодатель или менеджер не существует или у текущего пользователя нет доступа */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Список активных откликов
   * @deprecated
   * @description Возвращает список активных откликов соискателя.
   *
   * Запрос является устаревшим и поддерживается для обратной совместимости. Вместо него используйте [запрос списка откликов](#tag/Perepiska-(otklikipriglasheniya)-dlya-soiskatelya/operation/get-negotiations) с параметром `?status=active`
   */
  "get-active-negotiations": {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Количество элементов на странице */
        per_page?: number;
        /** @description Тип сортировки. Возможные значения указаны в поле `negotiations_order` [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        order_by?: string;
        /** @description Направление сортировки. Возможные значения: `asc` — по возрастанию, `desc` — по убыванию */
        order?: string;
        /** @description Фильтр по ID вакансии */
        vacancy_id?: string;
        /** @description Если передан `true`, запрос вернет только те отклики, для которых есть непросмотренные сообщения. По умолчанию `false` */
        has_updates?: boolean;
        /** @description Если передан `true`, запрос вернет статус поиска работы кандидатом */
        with_job_search_status?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["NegotiationsListResponse"];
        };
      };
      /** @description Ошибка параметров запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Список шаблонов ответов для отклика/приглашения
   * @description Метод требует наличия [платного доступа для работодателя](#operation/get-payable-api-method-access).
   *
   * Возвращает список шаблонов ответов для отклика/приглашения или резюме. Может использоваться в отправляемых соискателю приглашениях на вакансию или [действиях по откликам/приглашениям](#tag/Otklikipriglasheniya-rabotodatelya/operation/put-negotiations-collection-to-next-state).
   *
   * > Количество доступных шаблонов будет зависеть от конкретного отклика/приглашения или вакансии и их статусов.
   *
   * Рекомендуется использовать URL из поля `templates.url` в [списке откликов/приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations). Примеры:
   *
   * ```
   * GET /message_templates/{template}?topic_id={topic_id}
   * GET /message_templates/{template}?vacancy_id={vacancy_id}&resume_id={resume_id}
   * ```
   */
  "get-negotiation-message-templates": {
    parameters: {
      query?: {
        /** @description Идентификатор существующего отклика/приглашения. Не может передаваться одновременно с другими параметрами */
        topic_id?: string;
        /** @description Идентификатор вакансии для приглашения. Передается только вместе с параметром `resume_id` */
        vacancy_id?: string;
        /** @description Идентификатор резюме для приглашения на вакансию. Передается только вместе с параметром `vacancy_id` */
        resume_id?: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /**
         * @description Название шаблона. Возможные варианты:
         *
         * * `invite` — текст при приглашении соискателя на вакансию;
         * * `invite_after_response` — текст при [приглашении после отклика со стороны соискателя](#tag/Otklikipriglasheniya-rabotodatelya/operation/put-negotiations-collection-to-next-state);
         * * `discard_after_response` — текст при [отказе после отклика](#tag/Otklikipriglasheniya-rabotodatelya/operation/put-negotiations-collection-to-next-state);
         * * `discard_after_interview` — текст при [отказе после приглашения соискателя на интервью](#tag/Otklikipriglasheniya-rabotodatelya/operation/put-negotiations-collection-to-next-state).
         *
         * Список шаблонов может быть расширен
         */
        template: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["NegotiationsNegotiationMessageTemplates"];
        };
      };
      /**
       * @description Переданы конфликтующие параметры запроса (`topic_id` одновременно с `resume_id` или `vacancy_id`) или параметры не переданы совсем. Расшифровка возможных ошибок:
       *
       * * `topic_id` — 1) указанного отклика/приглашения не существует, либо у текущего пользователя нет к нему доступа; 2) вакансия из отклика/приглашения была заархивирована; 3) резюме из отклика/приглашения было скрыто/удалено;
       * * `resume_id` — указанного резюме не существует, либо у текущего пользователя нет к нему доступа;
       * * `vacancy_id` — 1) указанной вакансии не существует; 2) вакансия скрыта/заархивирована; 3) у текущего пользователя нет доступа к вакансии
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Ошибка авторизации, либо отсутствует доступ к платному методу */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Запрашиваемый шаблон не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Список откликов/приглашений коллекции
   * @description Возвращает список откликов/приглашений для заданной коллекции. URL для запроса необходимо брать из поля `collections[].url` [списка коллекций](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations).
   *
   * > Вместо `response` необходимо указывать параметр `{collection_name}` — название коллекции. Возможные значения указаны в поле `generated_collections.name` [списка коллекций](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations).
   *
   * В ответе будет только основная информация о резюме. Чтобы получить дополнительную информацию, например, контактный телефон, необходимо [запросить полное резюме](#tag/Upravlenie-vakansiyami/operation/get-vacancy).
   *
   * Некоторые параметры запроса могут принимать множественные значения: `key=value&key=value`. Если параметр может принимать несколько значений, об этом явно указано в его описании. Неизвестные параметры и параметры с ошибкой в названии игнорируются.
   *
   * > Коллекция `phone_calls` принимает только параметры `vacancy_id`, `order_by`, `page` и `per_page`
   */
  "get-collection-negotiations-list": {
    parameters: {
      query: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
        /** @description Тип сортировки. Возможные значения указаны в поле `order_types` [списка коллекций](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations) */
        order_by?: string;
        /** @description Порядковый номер страницы в выдаче. Поддерживаются [стандартные параметры пагинации](#section/Obshaya-informaciya/Paginaciya). По умолчанию нумерация начинается с 0 страницы */
        page?: number;
        /** @description Количество элементов на странице выдачи. Поддерживаются [стандартные параметры пагинации](#section/Obshaya-informaciya/Paginaciya). Максимальное значение — `50` */
        per_page?: number;
        /** @description Нижняя граница возраста соискателя в годах */
        age_from?: string;
        /** @description Верхняя граница возраста соискателя в годах */
        age_to?: string;
        /**
         * @description Регион. Возможные значения указаны в [справочнике регионов](#tag/Obshie-spravochniki/operation/get-areas). Можно указать несколько значений.
         *
         * По умолчанию выбираются резюме, в которых соискатели живут в указанных регионах или готовы в них переехать. Поменять это поведение поиска можно, указав параметр `relocation`
         */
        area?: string;
        /** @description Страна гражданства соискателя. Возможные значения перечислены в [справочнике стран](#tag/Obshie-spravochniki/operation/get-countries). Можно указать несколько значений */
        citizenship?: string;
        /** @description Код валюты. Возможные значения перечислены в поле `currency.code` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        currency?: string;
        /** @description Категории водительских прав соискателя. Возможные значения перечислены в поле `driver_license_types` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        driver_license_types?: string;
        /** @description Учебные заведения соискателя. В качестве параметров используются [подсказки по названиям университетов](#tag/Podskazki/operation/get-educational-institutions-suggests). Можно указать несколько значений */
        educational_institution?: string;
        /** @description Уровень образования. Возможные значения перечислены в поле `education_level` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Если параметр не указан, поиск ведется без ограничений на уровень образования */
        education_level?: string;
        /** @description Опыт работы. Возможные значения перечислены в поле `experience` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        experience?: string;
        /**
         * @description Пол соискателя. Возможные значения перечислены в поле `gender` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries).
         *
         * По умолчанию вне зависимости от значения параметра будут найдены резюме, в которых пол не указан, исключить из поисковой выдачи такие резюме можно с помощью параметра `label=only_with_gender`
         */
        gender?: string;
        /**
         * @description Знание языка. Можно указать несколько значений. Задается в формате `language.level`, где:
         *
         * * `language` — значение из [справочника языков](#tag/Obshie-spravochniki/operation/get-languages);
         * * `language_level` — значение одноименного поля [справочника полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
         */
        language?: string;
        /** @description Готовность к переезду. Возможные значения указаны в поле `resume_search_relocation` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Необходимо указывать вместе с параметром `area` */
        relocation?: string;
        /** @description Нижняя граница желаемой заработной платы (ЗП) */
        salary_from?: number;
        /** @description Верхняя граница желаемой заработной платы (ЗП) */
        salary_to?: number;
        /** @description Расстояние до кандидата (в метрах) */
        search_radius_meters?: number;
        /** @description Поисковая строка */
        search_text?: string;
        /** @description Показывать только непросмотренные отклики коллекции «Все неразобранные» (`/response`) */
        show_only_new_responses?: boolean;
        /** @description Показывать соискателей с личным автомобилем */
        show_only_with_vehicle?: boolean;
        /** @description Показывать только отклики, в которых есть непрочитанные сообщения для всех коллекций, кроме «Все неразобранные» (`/response`) */
        show_only_new?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["NegotiationsCollectionNegotiationsResponse"];
        };
      };
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является работодателем или не имеет доступа к методу */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationCommonAndPaymentMethodError"];
        };
      };
      /** @description Запрашиваемая вакансия не существует или недоступна для текущего пользователя */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Пригласить соискателя на вакансию
   * @description Запрос формирует приглашение на вакансию для соискателя по инициативе работодателя.
   *
   * > Вместо `phone_interview` необходимо сформировать запрос из параметра `negotiations_actions[].url` [списка подходящих вакансий к резюме](#tag/Upravlenie-vakansiyami/operation/get-active-vacancy-list), передав аргументы из массива `negotiations_actions[].arguments`.
   *
   * Пример запроса:
   *
   * ```
   * POST /negotiations/phone_interview?resume_id=123456&vacancy_id=654321&message=new_msg
   * ```
   */
  "invite-applicant-to-vacancy": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Идентификатор резюме */
          resume_id: string;
          /** @description Идентификатор вакансии */
          vacancy_id: string;
          /** @description Сообщение, которое будет отправлено соискателю на электронную почту. Используйте [шаблоны](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-mail-templates) для получения текстов */
          message?: string;
          /**
           * @description Если установлено `true`, соискателю будет отправлено SMS-уведомление о приглашении. Обратите внимание, что в SMS-сообщении используется стандартный текст, изменить его нельзя
           * @default false
           */
          send_sms?: boolean;
        };
      };
    };
    responses: {
      /** @description Результат приглашения на вакансию */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "text/html": string;
        };
      };
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadRequestBadArgumentBadRequestAndBadArgumentErrors"];
        };
      };
      /** @description Невозможно пригласить на вакансию */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyApplyForbiddenErrors"];
        };
      };
    };
  };
  /**
   * Получить результаты тестов, прикрепленных к вакансии
   * @description Запрос возвращает информацию о пройденных тестах откликнувшегося соискателя
   */
  "get-negotiation-test-results": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор отклика */
        nid: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["NegotiationsNegotiationTestResultsResponse"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный отклик/приглашение не найден или у текущего пользователя нет доступа */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Редактирование сообщения в отклике
   * @description На данный момент доступно редактирование только сообщения при отклике.
   *
   * Текст сообщения можно редактировать после отправки при соблюдении следующих условий:
   * - сообщение еще не прочитано другой стороной;
   * - вакансия, на которую отправлялся отклик, должна быть активна (не в архиве);
   * - резюме из отклика не должно быть скрыто или удалено.
   *
   * Условия могут измениться.
   *
   * У каждого сообщения в [списке сообщений в отклике](https://github.com/hhru/api/blob/master/docs/negotiations.md#%D0%BF%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D1%81%D0%BF%D0%B8%D1%81%D0%BA%D0%B0-%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B9-%D0%B2-%D0%BE%D1%82%D0%BA%D0%BB%D0%B8%D0%BA%D0%B5) в поле `editable` указана возможность редактирования
   */
  "edit-negotiation-message": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор отклика */
        nid: string;
        /** @description Идентификатор сообщения в отклике */
        mid: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Выбранное сообщение не может быть отредактировано */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsNegotiationEditMessageForbiddenErrors"];
        };
      };
      /** @description Указанный отклик или сообщение не были найдены */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Отметить отклики прочитанными */
  "post-negotiations-topics-read": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Идентификаторы откликов */
          topic_id: string;
        };
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Топик не существует или недоступен для текущего пользователя */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Скрыть отклик */
  "hide-active-response": {
    parameters: {
      query?: {
        /** @description Должно ли быть отправлено работодателю сообщение об отказе, по умолчанию `false`. Возможность отправить сообщение об отказе определяется полем `decline_allowed` получаемым при запросе [списка откликов или одного отклика](https://github.com/hhru/api/blob/e2a0ac4e174a6b56272f78348c05958f5db1b392/docs/negotiations.md#get_negotiation) */
        with_decline_message?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор отклика */
        nid: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Невозможно отправить сообщение об отказе */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsNegotiationHideResponseForbiddenErrors"];
        };
      };
      /** @description Отклик не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
      /** @description Чат отклика еще не готов */
      425: {
        content: {
          "application/json": components["schemas"]["ErrorsNegotiationHideResponseTooEarlyErrors"];
        };
      };
    };
  };
  /**
   * Просмотр отклика/приглашения
   * @description Запрос возвращает информацию об отклике/приглашении по его ID.
   *
   * Работодатель может получить URL для запроса из [списка откликов/приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-collection-negotiations-list) (поле `items[].url`).
   *
   * > !! Обратите внимание, что методы для работы с сообщениями в рамках отклика/приглашения от имени [соискателя](#tag/Perepiska-(otklikipriglasheniya)-dlya-soiskatelya/operation/get-negotiation-messages) и [менеджера работодателя](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-messages) устарели, и новые возможности [чатов](https://feedback.hh.ru/knowledge-base/article/1290) в них не будут поддерживаться
   */
  "get-negotiation-item": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор отклика */
        id: string;
      };
    };
    responses: {
      /** @description Отклик/приглашение получено */
      200: {
        content: {
          "application/json": components["schemas"]["NegotiationsNegotiationGetResponse"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный отклик/приглашение не найден или у текущего пользователя нет доступа */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsNegotiationNegotiationsNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Действия по откликам/приглашениям
   * @description Работодатель может изменять состояние (state) отклика для соискателя, чтобы повысить качество обратной связи и упростить работу со статистикой откликов.
   *
   * Если работодатель, используя данный метод, отправляет соискателю сообщение об изменении состояния отклика/приглашения (поле `message` в теле запроса), это приведет также к изменению соискательского состояния отклика/приглашения.
   *
   * Обязательность аргументов в теле запроса отличается для разных откликов/приглашений. Проверить, является ли аргумент обязательным можно в поле `actions.arguments`, которое возвращается для каждого отклика в [списке откликов/приглашений](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md#действия-по-откликуприглашению-actions)
   */
  "put-negotiations-collection-to-next-state": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор [коллекции](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations) топиков, в которую будет перенесено состояние отклика */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * @description Идентификаторы откликов. Допускается передавать не более 50 идентификаторов,
           * перечисляя их через амперсанд, например: `topic_id=1&topic_id=2&topic_id=3...&topic_id=50`
           */
          topic_id: string;
          /** @description Идентификатор [адреса](https://api.hh.ru/openapi/redoc#tag/Adresa-rabotodatelya), который будет указан в приглашении */
          address_id?: string;
          /** @description Сообщение, которое будет отправлено соискателю на электронную почту. Используйте [шаблоны](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-mail-templates) для получения текстов */
          message?: string;
          /**
           * @description Если установлено `true`, соискателю будет отправлено SMS-уведомление о приглашении. Обратите внимание, что в SMS-сообщении используется стандартный текст, изменить его нельзя
           * @default false
           */
          send_sms?: boolean;
        };
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Ошибка доступа к отклику/приглашению */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsNegotiationForbiddenErrors"];
        };
      };
      /** @description Топик не существует или недоступен для текущего пользователя */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Статистика откликов для компании
   * @description Запрос выводит статистику по работе с откликами для вакансий компании за период (30 дней).
   *
   * Дополнительно рассчитывается [индекс вежливости](https://hh.ru/article/23734) компании по всем вакансиям
   */
  "get-negotiations-statistics-employer": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /**
         * @description Идентификатор работодателя
         * @example 1455
         */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["NegotiationsNegotiationsStatisticsEmployerResponse"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Запрашиваемый работодатель не существует или у текущего пользователя нет доступа */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Просмотр списка сообщений в отклике/приглашении
   * @description Запрос возвращает список всех сообщений выбранного отклика/приглашения. Работодатель может посмотреть список по URL, указанному в поле `messages` [списка откликов/приглашений](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiations) или в [отдельном отклике](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-item).
   *
   * Типы сообщений:
   *
   * * сопроводительное письмо соискателя;
   * * сопроводительное письмо работодателя при смене статуса отклика;
   * * свободная переписка между соискателем и работодателем.
   *
   * ‼️ Обратите внимание, что методы для работы с сообщениями в рамках отклика/приглашения от имени [соискателя](#tag/Perepiska-(otklikipriglasheniya)-dlya-soiskatelya/operation/get-negotiation-messages) и
   *   [менеджера работодателя](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-messages) устарели, и новые возможности [чатов](https://feedback.hh.ru/knowledge-base/article/1290) в них не будут поддерживаться.
   *   В связи с этим переписка может некорректно отображаться
   */
  "get-negotiation-messages": {
    parameters: {
      query?: {
        /** @description Вернуть непустые сообщения (содержат текст в параметре `text`) */
        with_text_only?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор отклика */
        nid: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["NegotiationsMessagesGetResponse"];
        };
      };
    };
  };
  /**
   * Отправка нового сообщения
   * @description Запрос отправляет новое сообщение в рамках переписки.
   *
   * Отправить новое сообщение можно, если:
   *
   * * Работодатель пригласил соискателя на вакансию.
   * * Соискатель оставил отклик на вакансию.
   *
   * Если вакансия была отправлена в архив или соискатель удалил резюме, переписка будет недоступна. Работодатель также может вручную отключить переписку для вакансии.
   *
   * ‼️ Обратите внимание, что методы для работы с сообщениями в рамках отклика/приглашения от имени [соискателя](#tag/Perepiska-(otklikipriglasheniya)-dlya-soiskatelya/operation/get-negotiation-messages) и
   *   [менеджера работодателя](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-negotiation-messages) устарели, и новые возможности [чатов](https://feedback.hh.ru/knowledge-base/article/1290) в них не будут поддерживаться.
   *   В связи с этим переписка может некорректно отображаться
   */
  "send-negotiation-message": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор отклика/приглашения */
        nid: string;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Сообщение отклика/приглашения */
          message?: string;
        };
      };
    };
    responses: {
      /** @description Сообщение отправлено */
      201: {
        content: {
          "application/json": components["schemas"]["NegotiationsMessageSent"];
          "text/html": string;
        };
      };
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
      /** @description Не удалось отправить сообщение */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsNegotiationNegotiationsBadAuthorizationErrors"];
        };
      };
      /** @description Указанный отклик/приглашение не найден или у текущего пользователя нет доступа */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsNegotiationNegotiationsNotFoundErrors"];
        };
      };
    };
  };
  /** Получение черновика вакансии */
  "get-vacancy-draft": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор черновика */
        draft_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ содержит информацию по созданному черновику и дополнительную информацию по полям */
      200: {
        content: {
          "application/json": components["schemas"]["VacancyDraftVacancyDraftFull"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Черновик не найден или пользователь не имеет прав на просмотр указанного черновика */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Изменение черновика вакансии */
  "change-vacancy-draft": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор черновика */
        draft_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VacancyDraftVacancyDraftEdit"];
      };
    };
    responses: {
      /** @description Успешный ответ содержит информацию по измененому черновику и дополнительную информацию по полям */
      200: {
        content: {
          "application/json": components["schemas"]["VacancyDraftDraftResponseSchema"];
        };
      };
      /** @description Переданный формат не json */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadJsonDataErrors"];
        };
      };
      /** @description Запрос выполнен не с авторизацией работодателя или черновик не был создан вами */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Черновик не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Удаление черновика вакансии */
  "delete-vacancy-draft": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор черновика */
        draft_id: string;
      };
    };
    responses: {
      /** @description Успешное выполнение запроса, черновик удалён */
      204: {
        content: never;
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Черновик не найден или у пользователя нет прав на удаление данного черновика */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Публикация вакансии на основе черновика */
  "publish-vacancy-from-draft": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /**
         * @description Идентификатор черновика вакансии
         * @example 1110031
         */
        draft_id: string;
      };
    };
    responses: {
      /** @description Массив идентификаторов опубликованных вакансий */
      201: {
        content: {
          "application/json": components["schemas"]["VacancyDraftVacanciesDraftResponse"];
        };
      };
      /** @description Ошибки в полях при добавлении вакансии */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsVacancyErrors"];
        };
      };
      /** @description Запрос выполнен не с авторизацией работодателя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Черновик не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Проверка наличия дубликатов вакансии */
  "search-for-vacancy-draft-duplicates": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /**
         * @description Идентификатор черновика вакансии
         * @example 12358
         */
        draft_id: string;
      };
    };
    responses: {
      /** @description Информация про найденные дубликаты вакансии */
      200: {
        content: {
          "application/json": components["schemas"]["VacancyDuplicates"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Черновик не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Получение списка черновиков вакансий */
  "get-vacancy-draft-list": {
    parameters: {
      query?: {
        /** @description Номер страницы (считается от 0, по умолчанию - 0) */
        page?: number;
        /** @description Количество элементов (по умолчанию - 20, максимальное значение - 50) */
        per_page?: number;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["VacancyDraftVacancyDraftItems"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /** Создание черновика вакансии */
  "create-vacancy-draft": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VacancyDraftVacancyDraftCreate"];
      };
    };
    responses: {
      /** @description Успешный ответ содержит информацию по созданному черновику и дополнительную информацию по полям */
      201: {
        content: {
          "application/json": components["schemas"]["VacancyDraftDraftResponseSchema"];
        };
      };
      /** @description Переданный формат не json */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadJsonDataErrors"];
        };
      };
      /** @description Запрос выполнен не с авторизацией работодателя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Превышено допустимое количество черновиков */
      429: {
        content: {
          "application/json": components["schemas"]["ErrorsDraftError"];
        };
      };
    };
  };
  /** Отмена автопубликации вакансии */
  "disable-automatic-vacancy-publication": {
    parameters: {
      query: {
        /** @description Идентификатор черновика */
        draft_id: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешное выполнение запроса, автопубликация произведена не будет */
      204: {
        content: never;
      };
      /** @description Не передан draft_id */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Черновик не найден или у пользователя нет прав на удаление данного расписания */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Изменить подписку на уведомления
   * @description Обновить можно как каждое поле по отдельности (в таком случае нужно отправить только обновляемое поле), так и несколько полей одновременно. Для обновления `actions` нужно передать полный список типов событий, по которым будут формироваться уведомления. Переданные типы событий не добавляются к типам событий, на которые пользователь уже подписан.
   * Пустой список `actions` передать нельзя
   */
  "change-webhook-subscription": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /**
         * @description Идентификатор подписки
         * @example 1455
         */
        subscription_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookSubscriptionUpdate"];
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Ошибка параметров запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadJsonDataErrors"];
        };
      };
      /** @description Запрос выполнен не с авторизацией работодателя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Подписка не найдена или недоступна текущему пользователю */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Удалить подписку на уведомление */
  "cancel-webhook-subscription": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /**
         * @description Идентификатор подписки
         * @example 1455
         */
        subscription_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Запрос выполнен не с авторизацией работодателя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Подписка не найдена или недоступна текущему пользователю */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Получить список уведомлений, на которые подписан пользователь */
  "get-webhook-subscriptions": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookSubscriptionsOutput"];
        };
      };
      /** @description Запрос выполнен не с авторизацией работодателя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Подписаться на уведомления
   * @description В рамках одного приложения пользователь может получать уведомления только на 1 url:
   * нельзя подписаться разными действиями на разные урлы.
   * После наступления события будет отправлен POST-запрос на указанный URL c json телом (**см. раздел "Callbacks"**).
   *
   * В ответ на POST-запрос ожидается ответ с кодом `2хх Success`, если сообщение принято, или `409 Conflict`, если пришел дубликат.
   * Для определения дубликатов нужно использовать id из запроса - уникальный идентификатор для пары "пользователь + приложение" в рамках одного типа события в подписке.
   * Дубликаты возможны, если мы не получили ответ из-за проблем с сетью, или не получили ожидаемый ответ.
   *
   * Если в рамках одной подписки ожидаемые ответы не поступают долгое время,
   * на почту разработчика приложения будет отправлено уведомительное письмо, подписка автоматически деактивируется, а отправки прекращаются.
   *
   * При удалении приложения владельцем или отзыве пользователем доступа у приложения все подписки на уведомления удаляются.
   * После восстановления доступа необходимо оформить новую подписку.
   *
   * Вебхуки не являются средствами гарантированной доставки. Мы отправляем все сообщения, но не гарантируем, что адресат их получит
   *
   * Структура и содержимое колбэков описаны в разделе [callbacks](#callbacks)
   */
  "post-webhook-subscription": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookSubscriptionCreate"];
      };
    };
    responses: {
      201: components["responses"]["SuccessCreated"];
      /** @description Ошибка параметров запроса */
      400: {
        content: {
          "application/json": components["schemas"]["WebhookBadDataError"];
        };
      };
      /** @description Запрос <a name="callbacks"></a> не от работодателя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Справочник тестов работодателя
   * @description Возвращает список сохраненных тестов работодателя
   */
  "get-tests-dictionary": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployerDictionariesTestsResponse"];
        };
      };
      /** @description Ошибка авторизации. Пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Работодатель не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Список регионов, в которых есть активные вакансии
   * @description Возвращает список регионов, в которых на данный момент есть активные вакансии от указанного работодателя.
   *
   * Значения в справочнике могут поменяться в любой момент
   */
  "get-employer-vacancy-areas": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя, который можно узнать [в информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployersEmployerVacancyAreasResponse"];
        };
      };
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Пользователь не имеет прав на просмотр информации */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Работодатель не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Информация о работодателе
   * @description Возвращает данные о работодателе со ссылкой на выдачу вакансий этого работодателя
   */
  "get-employer-info": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя, который можно получить в [списке работодателей](#tag/Rabotodatel/operation/search-employer) */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployersEmployerInfo"];
        };
      };
      /** @description Работодатель не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Добавление работодателя в список скрытых
   * @description Добавляет указанного работодателя в [список скрытых работодателей](#tag/Skrytye-vakansii/operation/get-blacklisted-vacancies)
   */
  "add-employer-to-blacklisted": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Превышен лимит на количество элементов в списке */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsEmployerBlacklistedErrors"];
        };
      };
      /** @description Текущий пользователь не является соискателем или не имеет прав на добавление работодателя в скрытые */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Работодатель не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsEmployerBlacklistedNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Удаление работодателя из списка скрытых
   * @description Удаляет указанного работодателя из [списка скрытых работодателей](#tag/Skrytye-vakansii/operation/get-blacklisted-vacancies)
   */
  "delete-employer-from-blacklisted": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя */
        employer_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Работодатель не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsEmployerBlacklistedNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Поиск работодателя
   * @description При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше `5000`. Например, возможен запрос `per_page=10&page=499` (выдача с `4991` по `5000` работодателя), но запрос с `per_page=10&page=500` вернёт ошибку (выдача с `5001` до `5010` работодателя)
   */
  "search-employer": {
    parameters: {
      query?: {
        /** @description Текст для поиска. Переданное значение ищется в названии и описании работодателя */
        text?: string;
        /** @description Идентификатор региона работодателя, множественный параметр. Идентификаторы регионов можно узнать в [справочнике регионов](#tag/Obshie-spravochniki/operation/get-areas) */
        area?: string;
        /** @description Тип работодателя, множественный параметр. Разрешенные значения перечислены в [справочнике](#tag/Obshie-spravochniki/operation/get-dictionaries) в поле `employer_type` */
        type?: string;
        /** @description Возвращать только работодателей у которых есть в данный момент открытые вакансии (`true`) или же всех (`false`). По умолчанию — `false` */
        only_with_vacancies?: boolean;
        /** @description Сортировка по имени (`by_name`) или по количеству открытых вакансий (`by_vacancies_open`). По умолчанию — `by_name` */
        sort_by?: "by_name" | "by_vacancies_open";
        /** @description Номер страницы с работодателями (считается от `0`, по умолчанию — `0`) */
        page?: number;
        /** @description Количество элементов на страницу (по умолчанию — 20, максимум — 100 ) */
        per_page?: number;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployersEmployersList"];
        };
      };
      /** @description Ошибка в параметрах запроса. В теле ответа может содержаться название параметра с ошибкой */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
    };
  };
  /**
   * Справочник департаментов работодателя
   * @description Возвращает список департаментов работодателя.
   *
   * Значения в справочнике могут поменяться в любой момент
   */
  "get-employer-departments": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя, который можно получить в [списке работодателей](#tag/Rabotodatel/operation/search-employer) */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployersEmployerDepartmentsResponse"];
        };
      };
      /** @description Пользователь не имеет прав на просмотр информации */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Работодатель не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Список доступных бренд шаблонов вакансий работодателя
   * @description Внимание! Значения в справочниках могут поменяться в любой момент. Не нужно завязываться на них.
   *
   * Использование брендированных шаблонов вакансии доступно работодателям, оплатившим и активировавшим соответствующую
   * услугу. Подробнее на сайте [hh.ru](https://hh.ru/article/brand)
   */
  "get-vacancy-branded-templates-list": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /**
         * @description Идентификатор работодателя
         * @example 12345
         */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployersVacancyBrandedTemplatesList"];
        };
      };
      /** @description Если текущий пользователь не авторизован или не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Если получение шаблонов по данной компании недоступно или компания не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Список скрытых работодателей
   * @description Возвращает [подмножество работодателей](#tag/Rabotodatel/operation/search-employer), скрытых пользователем, а также один дополнительный параметр
   */
  "get-blacklisted-employers": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["EmployersEmployersBlacklistedResponse"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /** Список районов во всех городах */
  "get-all-districts": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["DictionariesDistrictsResponse"];
        };
      };
    };
  };
  /**
   * Оценка заработной платы без прогноза
   * @description Возвращает статистику зарплат в соответствии с указанными параметрами запроса. Пользователь должен иметь доступ к платным отчетам [банка зарплат](https://salary.hh.ru/).
   *
   * Как это работает:
   *
   * * Основным источником данных для статистики служит информация о зарплатах, предоставляемая участниками проекта [Банк данных заработных плат](https://salary.hh.ru/promo).
   * * Все анкеты участников проходят проверку модераторами. Если заявленная участником зарплата сильно отличается от средней по рынку, она не будет включена в банк данных.
   * * Если в банке недостаточно данных для построения статистики по запросу, сервис использует следующие приемы:
   *
   *     * Объединяет сведения из нескольких отраслей, если недостаточно данных по запрошенной отрасли.
   *     * Объединяет сведения из нескольких близких специализаций, если недостаточно данных по запрошенной специализации.
   *     * Объединяет сведения из нескольких городов, если недостаточно данных по запрошенному городу.
   *     * Использует сведения по запрошенным специализациям из другого региона, если недостаточно данных по запрошенному региону. При этом вычисляется поправочный коэффициент, который отражает разницу в зарплатах между регионами.
   *
   *     Если эти приемы не позволяют получить достаточную выборку, сервис может использовать информацию о зарплатах из вакансий и резюме. Такая информация не проходит предварительную модерацию и считается менее надежной, поэтому используется только в крайнем случае. Чтобы использовать эту функцию, передайте в запросе параметр `extend_sources=true`
   */
  "get-salary-evaluation": {
    parameters: {
      query?: {
        /** @description Коды [регионов](#tag/Spravochniki-Banka-dannyh-zarabotnyh-plat/operation/get-salary-salary-areas), которые будут исключены из выборки для формирования отчета. Параметр позволяет получить оценку на региональном рынке за исключением определенных городов или областей */
        exclude_area?: string;
        /** @description Справочник [уровни компетенций](#tag/Spravochniki-Banka-dannyh-zarabotnyh-plat/operation/get-salary-employee-levels), которые будут включены в выборку для формирования отчета */
        employee_level?: string;
        /** @description Справочник [Коды отраслей](#tag/Spravochniki-Banka-dannyh-zarabotnyh-plat/operation/get-salary-industries), по которым будет построена выборка для формирования отчета */
        industry?: string;
        /** @description Справочник [Коды профобластей и специализаций](#tag/Spravochniki-Banka-dannyh-zarabotnyh-plat/operation/get-salary-professional-areas), которые будут включены в выборку для формирования отчета */
        speciality?: string;
        /** @description Использовать ли данные из резюме и вакансий, если по указанным параметрам не нашлось данных в банке зарплат. По умолчанию — `false` */
        extend_sources?: boolean;
        /** @description Наименование должности. Если не переданы параметры `speciality` или `employee_level`, сервис самостоятельно определит возможные специализации и уровень специалиста по указанной должности и отрасли, и построит отчет по ним */
        position_name?: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Код [региона](#tag/Spravochniki-Banka-dannyh-zarabotnyh-plat/operation/get-salary-salary-areas), по которому будет построена выборка для формирования отчета */
        area_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SalaryStatisticsEvaluationResponse"];
        };
      };
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationBadParameters"];
        };
      };
      /** @description Пользователь не авторизован или не имеет доступа к платным отчетам банка зарплат */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Для указанных параметров нет данных */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Список станций метро во всех городах */
  "get-metro-stations": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["MetroMetroResponse"];
        };
      };
    };
  };
  /** Список станций метро в указанном городе */
  "get-metro-stations-in-city": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор города */
        city_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["MetroCityMetroItem"];
        };
      };
      /** @description Город с указанным идентификатором не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Передача сохраненного поиска резюме другому менеджеру */
  "move-saved-resume-search": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор из [списка сохраненных поисков](#tag/Sohranennye-poiski-rezyume/operation/get-saved-resume-searches) */
        saved_search_id: string;
        /** @description Идентификатор менеджера, которому надо передать автопоиск ([список менеджеров компании](#tag/Menedzhery-rabotodatelya/operation/get-employer-managers)) */
        manager_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsSavedSearchForbiddenErrors"];
        };
      };
      404: components["responses"]["ErrorSavedSearchNotFound"];
    };
  };
  /**
   * Резюме, сгруппированные по возможности отклика на данную вакансию
   * @description Возвращает резюме пользователя, сгруппированные в четыре списка в зависимости от возможности отклика на указанную вакансию
   */
  "get-resumes-by-status": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesByStatusResponse"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Статус резюме и готовность к публикации
   * @description Возвращает информацию о статусе резюме, готовности резюме к публикации, а также замечания модератора по выбранному резюме
   */
  "get-resume-status": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumeStatusReadiness"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или недоступно для текущего пользователя */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * История откликов/приглашений по резюме
   * @description Возвращает последние действия с указанным резюме, ограниченные 30-ю вакансиями данного работодателя, и 10-ю изменениями состояний откликов/приглашений по каждой из этих вакансий.
   *
   * Метод требует наличия [платного доступа для работодателя](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access)
   */
  "get-resume-negotiations-history": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesResumeNegotiationsHistoryResponse"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или недоступно для текущего пользователя */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Получение единичного сохраненного поиска резюме
   * @description Внимание: счетчик `new_items.count` обновляется раз в час. Из-за этого реальное количество новых найденных резюме
   * может расходиться со значением этого счетчика
   */
  "get-saved-resume-search": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор сохраненного поиска из [списка](#tag/Sohranennye-poiski-rezyume/operation/get-saved-resume-searches) */
        id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SavedSearchesSavedSearchItem"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Сохраненный поиск не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Обновление сохраненного поиска резюме
   * @description У сохраненного поиска можно изменить имя (`name`) и статус подписки (`subscription`). В одном запросе можно передать только один из параметров
   */
  "update-saved-resume-search": {
    parameters: {
      query?: {
        /** @description Новое имя сохраненного поиска */
        name?: string;
        /** @description Статус подписки */
        subscription?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор сохраненного поиска */
        id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      400: components["responses"]["ErrorBadArgument"];
      403: components["responses"]["ErrorBadAuthorization"];
      404: components["responses"]["ErrorNotFound"];
      409: components["responses"]["ErrorBothChangedConflict"];
    };
  };
  /** Удаление сохраненного поиска резюме */
  "delete-saved-resume-search": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор сохраненного поиска */
        id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      403: components["responses"]["ErrorBadAuthorization"];
      404: components["responses"]["ErrorNotFound"];
    };
  };
  /**
   * Поиск резюме
   * @description Возвращает результаты поиска резюме.
   *
   * Требуется наличие [платного доступа](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access).
   *
   * Некоторые параметры запроса могут принимать множественные значения: `key=value&key=value`. Если параметр может принимать несколько значений, об этом явно указано в его описании. Неизвестные параметры и параметры с ошибкой в названии игнорируются.
   *
   * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше 2000. Например, возможен запрос `per_page=10&page=199` (выдача с 1991 по 2000 резюме), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с 2001 до 2010 резюме)
   */
  "search-for-resumes": {
    parameters: {
      query?: {
        /**
         * @description Поисковая фраза. Метод найдет резюме, в которых встречаются все слова заданной фразы.
         *
         * Особенности:
         *
         * * Можно указать несколько значений. Каждое дополнительное значение уточняет поиск.
         * * В качестве поисковой фразы можно использовать [язык поисковых запросов](http://hh.ru/article.xml?articleId=1175).
         * * Специально для этого поля предусмотрено [автодополнение по подсказкам](#tag/Podskazki/operation/get-resume-search-keywords-suggests).
         * * Для тонкой настройки по фразе можно использовать параметры `text.logic`, `text.field`, `text.period`. При использовании дополнительных `text.*` полей, необходимо указывать весь набор (триаду) параметров ([пример использования](#tag/Poisk-rezyume/Primery-poiskovyh-zaprosov))
         */
        text?: string;
        /** @description Описывает, как производится поиск. Возможные значения перечислены в поле `resume_search_logic` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        "text.logic"?: string;
        /** @description Описывает, где должны встречаться слова из поисковой фразы `text`. Можно указать несколько значений через запятую, например `?text.field=education,keywords`. Возможные значения перечислены в поле `resume_search_fields` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        "text.field"?: string;
        /**
         * @description Период опыта работы.
         *
         * Параметр имеет смысл только при `text.field` равным одному из значений: `experience`, `experience_company`, `experience_position`, `experience_description`, но указывать его необходимо всегда при указании других `text.*`. Если параметр не имеет смысла, то его значение можно оставить пустым
         */
        "text.period"?: string;
        /**
         * @description Нижняя граница возраста соискателя в годах.
         *
         * По умолчанию в выдачу добавляются также резюме с неуказанным возрастом. Для выдачи резюме только с указанным возрастом передайте значение `only_with_age` в параметре `label`
         */
        age_from?: string;
        /**
         * @description Верхняя граница возраста соискателя в годах.
         *
         * По умолчанию в выдачу добавляются также резюме с неуказанным возрастом. Для выдачи резюме только с указанным возрастом передайте значение `only_with_age` в параметре `label`
         */
        age_to?: string;
        /**
         * @description Регион. Возможные значения указаны в [справочнике регионов](https://github.com/hhru/api/blob/master/docs/areas.md). Можно указать несколько значений.
         *
         * По умолчанию выбираются резюме, в которых соискатели живут в указанных регионах или готовы в них переехать. Поменять это поведение поиска можно, указав параметр `relocation`
         */
        area?: string;
        /** @description Готовность к переезду. Возможные значения указаны в поле `resume_search_relocation` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Необходимо указывать вместе с параметром `area` */
        relocation?: string;
        /** @description Поиск ведется по резюме, опубликованным за указанный период в днях. Если период не указан, поиск ведется без ограничений по дате публикации */
        period?: number;
        /** @description Дата, от которой нужно начать поиск. Значение указывается в формате [ISO 8601](#date-format) — `YYYY-MM-DD` или с точностью до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Нельзя передавать вместе с параметром `period` */
        date_from?: string;
        /** @description Дата, до которой нужно искать. Значение указывается в формате [ISO 8601](#date-format) — `YYYY-MM-DD` или с точность до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Можно передавать только в паре с параметром `date_from`. Нельзя передавать вместе с параметром `period` */
        date_to?: string;
        /** @description Уровень образования. Возможные значения перечислены в поле `education_level` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Если параметр не указан, поиск ведется без ограничений на уровень образования */
        education_level?: string;
        /** @description Тип занятости. Возможные значения перечислены в поле `employment` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        employment?: string;
        /** @description Опыт работы. Возможные значения перечислены в поле `experience` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        experience?: string;
        /** @description Ключевые навыки. Указывается один или несколько идентификаторов ключевых навыков. Значения можно получить из поля `id` в [подсказке по ключевым навыкам](#tag/Podskazki/operation/get-skill-set-suggests) */
        skill?: string;
        /**
         * @description Пол соискателя. Возможные значения перечислены в поле `gender` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries).
         *
         * По умолчанию вне зависимости от значения параметра будут найдены резюме, в которых пол не указан, исключить из поисковой выдачи такие резюме можно с помощью параметра `label=only_with_gender`
         */
        gender?: string;
        /** @description Дополнительный фильтр. Возможные значения перечислены в поле `resume_search_label` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        label?: string;
        /**
         * @description Знание языка. Можно указать несколько значений.
         *
         * Возможные значения перечислены в [справочнике языков](#tag/Obshie-spravochniki/operation/get-languages)
         */
        language?: string;
        /**
         * @description Уровень знания языка. Можно указать несколько значений.
         *
         * Возможные значения перечислены в поле `language_level` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
         */
        "language.level"?: string;
        /**
         * @description Линия, либо станция метро. Можно указать несколько значений.
         *
         * Возможные значения перечислены в [справочнике метро](#tag/Obshie-spravochniki/operation/get-metro-stations)
         */
        metro?: string;
        /** @description Код валюты. Возможные значения перечислены в поле `currency.code` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        currency?: string;
        /**
         * @description Нижняя граница желаемой заработной платы (ЗП).
         *
         * По умолчанию в выдачу добавляются также резюме с неуказанной ЗП. Для выдачи резюме только с указанной ЗП передайте параметр `label=only_with_salary`
         */
        salary_from?: number;
        /**
         * @description Верхняя граница желаемой заработной платы (ЗП).
         *
         * По умолчанию в выдачу добавляются также резюме с неуказанной ЗП. Для выдачи резюме только с указанной ЗП передайте параметр `label=only_with_salary`
         */
        salary_to?: number;
        /** @description График работы. Возможные значения перечислены в поле `schedule` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        schedule?: string;
        /** @description Сортировка списка резюме. Возможные значения перечислены в поле `resume_search_order` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        order_by?: string;
        /** @description Страна гражданства соискателя. Возможные значения перечислены в [справочнике стран](https://github.com/hhru/api/blob/master/docs/areas.md#countries). Можно указать несколько значений */
        citizenship?: string;
        /** @description Страна, в которой у соискателя есть разрешение на работу. Возможные значения перечислены в [справочнике стран](https://github.com/hhru/api/blob/master/docs/areas.md#countries). Можно указать несколько значений */
        work_ticket?: string;
        /** @description Учебные заведения соискателя. В качестве параметров используются [подсказки по названиям университетов](#tag/Podskazki/operation/get-educational-institutions-suggests). Можно указать несколько значений */
        educational_institution?: string;
        /** @description Если `true`, то поиск осуществляется только по резюме, которыми соискатели откликались на вакансии компании текущего пользователя, если `false` — поиск осуществляется по всем резюме. По умолчанию — `false` */
        search_in_responses?: boolean;
        /** @description Если `true`, включается поиск по префиксу. Для каждого параметра `text` будут находиться не только полные совпадения слов, но еще и слова, начинающиеся с `text`. По умолчанию — `false` */
        by_text_prefix?: boolean;
        /** @description Категории водительских прав соискателя. Возможные значения перечислены в поле `driver_license_types` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        driver_license_types?: string;
        /** @description Идентификатор вакансии для поиска похожих резюме. Необходимо передавать идентификатор активной вакансии работодателя или вакансии работодателя в архиве */
        vacancy_id?: string;
        /** @description Номер страницы (считается от 0, по умолчанию — 0) */
        page?: number;
        /** @description Количество элементов (по умолчанию — 20, максимальное значение — 100) */
        per_page?: number;
        /** @description Профессиональная роль. Элемент справочника [профессиональных ролей](#tag/Obshie-spravochniki/operation/get-professional-roles-dictionary). Можно указать несколько значений */
        professional_role?: string;
        /** @description Один или несколько идентификаторов папок с отобранными резюме. Если данный параметр передан, поиск будет ограничен содержимым указанных папок. Можно передавать идентификаторы нескольких папок, например: `folder=111&folder=222&folder=333` */
        folder?: string;
        /**
         * @description Признак, указывающий, нужно ли вести поиск по всем папкам с отобранными резюме.
         *
         * Если у менеджера есть доступ к избранным папкам, то поиск проходит по умолчанию в избранных папках. Если передать параметр `false`, то поиск не будет ограничен папками. Если в одном запросе будут переданы параметры `folder` и `include_all_folders`, вернется ошибка `400 Bad Request`
         */
        include_all_folders?: boolean;
        /**
         * @description Статус поиска работы.
         *
         * Возможные значения перечислены в поле `job_search_statuses_employer` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений
         */
        job_search_status?: string;
        /** @description Идентификатор резюме для поиска похожих резюме */
        resume?: string;
        /**
         * @description Обрабатывается совместно с параметром `filter_exp_period`. Идентификатор отрасли, в которой у соискателя должен присутствовать опыт работы.
         * Возможные значения перечислены в [справочнике отраслей](#tag/Obshie-spravochniki/operation/get-industries) (поле id). Можно указать несколько значений
         */
        filter_exp_industry?: string;
        /**
         * @description Период, за который у соискателя должен присутствовать опыт работы в отрасли, указанной в параметре `filter_exp_industry`.
         *
         * Возможные значения:
         *
         * * `all_time` - за все время
         * * `last_year` - за последний год
         * * `last_three_years` - за последние 3 года
         * * `last_six_years` - за последние 6 лет.
         *
         * По умолчанию равен `all_time`
         */
        filter_exp_period?: string;
        /** @description Параметр для просмотра в резюме статуса поиска кандидата */
        with_job_search_status?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesSearchForResumesResponse"];
        };
      };
      /** @description Ошибки в аргументах или в запросе */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadRequestBadArgumentBadRequestAndBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является работодателем или не имеет доступа к методу */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationCommonAndPaymentMethodError"];
        };
      };
    };
  };
  /**
   * Создание резюме
   * @description Создает резюме с полями, переданными в теле запроса.
   *
   * Если передан параметр `source_resume_id`, новое резюме будет склонировано из указанного. Склонировать можно только собственное резюме
   */
  "create-resume": {
    parameters: {
      query?: {
        /** @description Идентификатор исходного резюме для клонирования */
        source_resume_id?: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ResumeAddResumeRequest"];
      };
    };
    responses: {
      /** @description Успешно создано */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "text/html": string;
        };
      };
      /** @description Ошибка в параметрах резюме или превышено допустимое количество резюме */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsResumeBadArgTooManyResumesErrors"];
        };
      };
      /** @description Ошибка авторизации. Пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Исходное резюме для клонирования не существует или не принадлежит текущему пользователю */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Список резюме авторизованного пользователя */
  "get-mine-resumes": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesMineResponse"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Публикация резюме
   * @description При первой публикации резюме оно становится доступно для использования. При повторной публикации происходит обновление даты резюме.
   *
   * Повторная публикация означает обновление даты резюме. Ключ `next_publish_at` у [резюме](#tag/Rezyume.-Prosmotr-informacii/operation/get-mine-resumes) указывает время, когда можно обновить резюме
   */
  "publish-resume": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Публикация или продление невозможны */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsBadRequestPublishResumeErrors"];
        };
      };
      /** @description Пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или недоступно для текущего пользователя */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
      /** @description Обновление резюме еще не доступно */
      429: {
        content: {
          "application/json": components["schemas"]["ErrorsResumeTooManyRequestsErrors"];
        };
      };
    };
  };
  /**
   * Условия заполнения полей нового резюме
   * @description Возвращает список требований для полей при заполнении нового резюме
   */
  "get-new-resume-conditions": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesResumeConditions"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Список подходящих для отклика резюме
   * @description Возвращает список сокращенных представлений резюме соискателя, которыми он может откликнуться на указанную вакансию.
   *
   * В качестве альтернативы данному методу можно использовать метод [resumes_by_status](#tag/Rezyume.-Prosmotr-informacii/operation/get-resumes-by-status)
   */
  "get-suitable-resumes": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор вакансии */
        vacancy_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesSuitableResumesResponse"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Вакансия не найдена */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Условия заполнения полей существующего резюме
   * @description Возвращает список требований для полей при заполнении указанного резюме
   */
  "get-resume-conditions": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesResumeConditions"];
        };
      };
      /** @description Текущий пользователь не является автором резюме */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * История просмотра резюме
   * @description Возвращает историю просмотров резюме.
   *
   * Этот запрос обнуляет счетчик новых просмотров (поле `new_views`), который возвращается в запросах на просмотр [конкретного резюме](#tag/Prosmotr-rezyume/operation/get-resume) и [списка резюме](#tag/Rezyume.-Prosmotr-informacii/operation/get-mine-resumes)
   */
  "get-resume-view-history": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesResumeViewHistoryResponse"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или недоступно для текущего пользователя */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Просмотр резюме
   * @description Возвращает информацию об указанном резюме.
   *
   * Особенности работы метода при запросе от работодателя:
   *
   * * Требуется наличие [платного доступа](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access).
   * * При просмотре резюме с контактами действуют [специальные правила](https://github.com/hhru/api/blob/master/docs/payable/resume.md#просмотр-резюме-с-контактами).
   * * Если просмотр полных данных по резюме недоступен при текущей авторизации, в некоторых полях вернется `null`, а поле `can_view_full_info` будет иметь значение `false`.
   * * Если у работодателя есть отклик/приглашение на это резюме, отклик будет считаться просмотренным
   */
  "get-resume": {
    parameters: {
      query?: {
        /**
         * @description В случае, если передан данный параметр, в ответе добавится поле negotiations_history.vacancies.
         * Его формат подробно описан в методе [полной истории откликов/приглашений по резюме](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-resume-negotiations-history) и различается лишь тем,
         * что в данном случае список будет ограничен тремя вакансиями данного работодателя и последним изменением состояния отклика/приглашения по каждой из этих вакансий
         */
        with_negotiations_history?: boolean;
        /** @description В случае, если передан данный параметр, в ответе добавится поле creds */
        with_creds?: boolean;
        /** @description Параметр для просмотра в резюме статуса поиска кандидата */
        with_job_search_status?: boolean;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumeResumeViewResponse"];
        };
      };
      /** @description Требуется авторизация пользователя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или недоступно для текущего пользователя */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
      /** @description Для работодателя превышен лимит просмотров резюме в сутки */
      429: {
        content: {
          "application/json": components["schemas"]["ErrorsResumeTooManyRequestsErrors"];
        };
      };
    };
  };
  /**
   * Обновление резюме
   * @description Обновляет переданные в теле запроса поля указанного резюме.
   *
   * Любой упомянутый в теле запроса массив полностью переопределит существующий. Чтобы добавить к существующему массиву новый элемент, перечислите также в запросе все элементы существующего массива. Так, в приведенном примере запроса к ранее указанному русскому языку добавляется английский.
   *
   * Дополнительные правила заполнения резюме:
   *
   * * У соискателя не может быть несколько резюме с одинаковым `title`.
   * * Специализации должны быть из одной профессиональной области.
   * * Город проживания должен быть одним из элементов справочника `/areas`, и у этого элемента не должно быть потомков. Например, нельзя указать город проживания «Россия».
   * * Ближайшая станция метро должна находиться в городе проживания.
   * * Для специализаций из профессиональной области «Начало карьеры, студенты» (`id=15`) можно не указывать опыт работы и навыки. Для остальных профессиональных областей данные поля должны содержать хотя бы по одной записи
   */
  "edit-resume": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ResumeEditResumeRequest"];
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Ошибка в параметрах резюме */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsResumeBadArgumentResumeErrors"];
        };
      };
      /** @description Ошибка авторизации. Пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или не принадлежит текущему пользователю */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Удаление резюме
   * @description Резюме удаляется без возможности восстановления. Все связанные с ним отклики исчезают
   */
  "delete-resume": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Ошибка авторизации. Пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не найдено или недоступно текущему пользователю */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Проверка возможности создания резюме */
  "get-resume-creation-availability": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesCreationAvailability"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /** Список сохраненных поисков резюме */
  "get-saved-resume-searches": {
    parameters: {
      query?: {
        /** @description Номер страницы (считается от 0, по умолчанию - 0) */
        page?: number;
        /** @description Количество элементов (по умолчанию - 5, максимальное значение - 10) */
        per_page?: number;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["SavedSearchesSavedSearchResponse"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Создание нового сохраненного поиска резюме
   * @description Некоторые параметры принимают множественные значения: `key=value&key=value`.
   *
   * При указании параметров пагинации (`page`, `per_page`) работает ограничение: глубина возвращаемых результатов не может быть больше 2000. Например, возможен запрос `per_page=10&page=199` (выдача с 1991 по 2000 вакансию), но запрос с `per_page=10&page=200` вернёт ошибку (выдача с 2001 до 2010 вакансию)
   */
  "create-saved-resume-search": {
    parameters: {
      query?: {
        /**
         * @description Поисковая фраза. Метод найдет резюме, в которых встречаются все слова заданной фразы.
         *
         * Особенности:
         *
         * * Можно указать несколько значений. Каждое дополнительное значение уточняет поиск.
         * * В качестве поисковой фразы можно использовать [язык поисковых запросов](http://hh.ru/article.xml?articleId=1175).
         * * Специально для этого поля предусмотрено [автодополнение по подсказкам](#tag/Podskazki/operation/get-resume-search-keywords-suggests).
         * * Для тонкой настройки по фразе можно использовать параметры `text.logic`, `text.field`, `text.period`. При использовании дополнительных `text.*` полей, необходимо указывать весь набор (триаду) параметров
         */
        text?: string;
        /** @description Описывает, как производится поиск. Возможные значения перечислены в поле `resume_search_logic` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        "text.logic"?: string;
        /** @description Описывает, где должны встречаться слова из поисковой фразы `text`. Можно указать несколько значений через запятую, например `?text.field=education,keywords`. Возможные значения перечислены в поле `resume_search_fields` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        "text.field"?: string;
        /**
         * @description Период опыта работы.
         *
         * Параметр имеет смысл только при `text.field` равным одному из значений: `experience`, `experience_company`, `experience_position`, `experience_description`, но указывать его необходимо всегда при указании других `text.*`. Если параметр не имеет смысла, то его значение можно оставить пустым
         */
        "text.period"?: string;
        /**
         * @description Нижняя граница возраста соискателя в годах.
         *
         * По умолчанию в выдачу добавляются также резюме с неуказанным возрастом. Для выдачи резюме только с указанным возрастом передайте значение `only_with_age` в параметре `label`
         */
        age_from?: number;
        /**
         * @description Верхняя граница возраста соискателя в годах.
         *
         * По умолчанию в выдачу добавляются также резюме с неуказанным возрастом. Для выдачи резюме только с указанным возрастом передайте значение `only_with_age` в параметре `label`
         */
        age_to?: number;
        /**
         * @description Регион. Возможные значения указаны в [справочнике регионов](#tag/Obshie-spravochniki/operation/get-areas). Можно указать несколько значений.
         *
         * По умолчанию выбираются резюме, в которых соискатели живут в указанных регионах или готовы в них переехать. Поменять это поведение поиска можно, указав параметр `relocation`
         */
        area?: string;
        /** @description Готовность к переезду. Возможные значения указаны в поле `resume_search_relocation` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Необходимо указывать вместе с параметром `area` */
        relocation?: string;
        /** @description Поиск ведется по резюме, опубликованным за указанный период в днях. Если период не указан, поиск ведется без ограничений по дате публикации */
        period?: number;
        /** @description Дата, от которой нужно начать поиск. Значение указывается в формате [ISO 8601](#date-format) — `YYYY-MM-DD` или с точностью до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Нельзя передавать вместе с параметром `period` */
        date_from?: string;
        /** @description Дата, до которой нужно искать. Значение указывается в формате [ISO 8601](#date-format) — `YYYY-MM-DD` или с точность до секунды `YYYY-MM-DDThh:mm:ss±hhmm`. Можно передавать только в паре с параметром `date_from`. Нельзя передавать вместе с параметром `period` */
        date_to?: string;
        /** @description Уровень образования. Возможные значения перечислены в поле `education_level` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Если параметр не указан, поиск ведется без ограничений на уровень образования */
        education_level?: string;
        /** @description Тип занятости. Возможные значения перечислены в поле `employment` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        employment?: string;
        /** @description Опыт работы. Возможные значения перечислены в поле `experience` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        experience?: string;
        /** @description Ключевые навыки. Указывается один или несколько идентификаторов ключевых навыков. Значения можно получить из поля `id` в [подсказке по ключевым навыкам](#tag/Podskazki/operation/get-skill-set-suggests) */
        skill?: string;
        /**
         * @description Пол соискателя. Возможные значения перечислены в поле `gender` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries).
         *
         * По умолчанию вне зависимости от значения параметра будут найдены резюме, в которых пол не указан, убрать такие резюме можно с помощью параметра `label=only_with_gender`
         */
        gender?: string;
        /** @description Дополнительный фильтр. Возможные значения перечислены в поле `resume_search_label` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        label?: string;
        /**
         * @description Знание языка. Можно указать несколько значений.
         *
         * Возможные значения перечислены в [справочнике языков](#tag/Obshie-spravochniki/operation/get-languages)
         */
        language?: string;
        /**
         * @description Уровень знания языка. Можно указать несколько значений.
         *
         * Возможные значения перечислены в поле `language_level` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries)
         */
        "language.level"?: string;
        /** @description Линия, либо станция метро. Возможные значения перечислены в [справочнике метро](#tag/Obshie-spravochniki/operation/get-metro-stations) */
        metro?: string;
        /** @description Код валюты. Возможные значения перечислены в поле `currency.code` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        currency?: string;
        /**
         * @description Нижняя граница желаемой заработной платы (ЗП).
         *
         * По умолчанию в выдачу добавляются также резюме с неуказанной ЗП. Для выдачи резюме только с указанной ЗП передайте параметр `label=only_with_salary`
         */
        salary_from?: number;
        /**
         * @description Верхняя граница желаемой заработной платы (ЗП).
         *
         * По умолчанию в выдачу добавляются также резюме с неуказанной ЗП. Для выдачи резюме только с указанной ЗП передайте параметр `label=only_with_salary`
         */
        salary_to?: number;
        /** @description График работы. Возможные значения перечислены в поле `schedule` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries). Можно указать несколько значений */
        schedule?: string;
        /** @description Сортировка списка резюме. Возможные значения перечислены в поле `resume_search_order` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        order_by?: string;
        /** @description Страна гражданства соискателя. Возможные значения перечислены в [справочнике стран](#tag/Obshie-spravochniki/operation/get-countries). Можно указать несколько значений */
        citizenship?: string;
        /** @description Страна, в которой у соискателя есть разрешение на работу. Возможные значения перечислены в [справочнике стран](#tag/Obshie-spravochniki/operation/get-countries). Можно указать несколько значений */
        work_ticket?: string;
        /** @description Учебные заведения соискателя. В качестве параметров используются [подсказки по названиям университетов](#tag/Podskazki). Можно указать несколько значений */
        educational_institution?: string;
        /** @description Если `true`, то поиск осуществляется только по резюме, которыми соискатели откликались на вакансии компании текущего пользователя, если `false` — поиск осуществляется по всем резюме. По умолчанию — `false` */
        search_in_responses?: boolean;
        /** @description Если `true`, включается поиск по префиксу. Для каждого параметра `text` будут находиться не только полные совпадения слов, но еще и слова, начинающиеся с `text`. По умолчанию — `false` */
        by_text_prefix?: boolean;
        /** @description Категории водительских прав соискателя. Возможные значения перечислены в поле `driver_license_types` в [справочнике полей](#tag/Obshie-spravochniki/operation/get-dictionaries) */
        driver_license_types?: string;
        /** @description Идентификатор вакансии для поиска похожих резюме. Необходимо передавать идентификатор активной вакансии работодателя или вакансии работодателя в архиве */
        vacancy_id?: string;
        /** @description Номер страницы (считается от 0, по умолчанию — 0) */
        page?: number;
        /** @description Количество элементов (по умолчанию — 10, максимальное значение — 50) */
        per_page?: number;
        /** @description Профессиональная роль. Элемент справочника [профессиональных ролей](#tag/Obshie-spravochniki/operation/get-professional-roles-dictionary). Можно указать несколько значений */
        professional_role?: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
    };
    responses: {
      /** @description Успешно создано */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "text/html": string;
        };
      };
      /** @description Ошибки в аргументах */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является работодателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
    };
  };
  /**
   * Получение списка типов видимости резюме
   * @description Некоторые типы видимости, например `whitelist` и `blacklist`, подразумевают наличие списка работодателей, для которых резюме должно быть видимо или скрыто. См. [управление списками видимости резюме](#tag/Rezyume.-Spiski-vidimosti)
   */
  "get-resume-access-types": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesAccessTypes"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или недоступно для текущего пользователя */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Поиск работодателей для добавления в список видимости
   * @description Возвращает результаты поиска работодателей
   */
  "get-resume-visibility-employers-list": {
    parameters: {
      query: {
        /** @description Строка для поиска. Переданное значение ищется в начале названия работодателя и в начале названия департаментов работодателя */
        text: string;
        /** @description Количество элементов на странице выдачи. Поддерживаются [стандартные параметры пагинации](#section/Obshaya-informaciya/Paginaciya). Значение по умолчанию и максимальное значение per_page составляет 100 */
        per_page?: number;
        /** @description Порядковый номер страницы в выдаче. Поддерживаются [стандартные параметры пагинации](#section/Obshaya-informaciya/Paginaciya). По умолчанию нумерация начинается с 0 страницы */
        page?: number;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
        /** @description Тип списка. Допустимые значения — `whitelist` или `blacklist` */
        list_type: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesResumeVisibilityListSearchResponse"];
        };
      };
      /** @description Входные параметры переданы с ошибкой */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или недоступно для текущего пользователя, либо передан неизвестный `list_type` */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Получение списка видимости резюме
   * @description Возвращает список работодателей, для которых резюме должно быть видимо или скрыто
   */
  "get-resume-visibility-list": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
        /** @description Тип списка. Допустимые значения — `whitelist` или `blacklist` */
        list_type: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ResumesGetResumeVisibilityListResponse"];
        };
      };
      /** @description Передано невалидное количество элементов на странице (максимум 100) */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsResumeVisibilityErrors"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или недоступно для текущего пользователя, либо передан неизвестный `list_type` */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Добавление работодателей в список видимости
   * @description Добавляет указанных работодателей в список видимости указанного типа.
   *
   * За один запрос можно добавить не больше 100 компаний.
   *
   * Добавление в список идемпотентно, то есть добавление работодателей, уже присутствующих в списке, игнорируется и не приводит к дублированию записей.
   *
   * Можно добавить в список заблокированного работодателя
   */
  "add-resume-visibility-list": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
        /** @description Тип списка. Допустимые значения — `whitelist` или `blacklist` */
        list_type: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResumesPostResumeVisibilityListBody"];
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Передан невалидный JSON или JSON неправильного формата */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsResumeVisibilityErrorsBadRequest"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или недоступно для текущего пользователя, либо передан неизвестный `list_type` */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /** Очистка списка видимости */
  "delete-resume-visibility-list": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
        /** @description Тип списка. Допустимые значения — `whitelist` или `blacklist` */
        list_type: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или недоступно для текущего пользователя, либо передан неизвестный `list_type` */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Удаление работодателя из списка видимости
   * @description Удаление из списка идемпотентно, то есть удаление отсутствующих в списке или несуществующих работодателей игнорируется и не приводит к ошибкам.
   *
   * Можно удалить из списка заблокированного работодателя.
   *
   * За один запрос можно удалить не более 100 компаний
   */
  "delete-employer-from-resume-visibility-list": {
    parameters: {
      query: {
        /** @description Идентификатор работодателя. Множественный параметр */
        id: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор резюме */
        resume_id: string;
        /** @description Тип списка. Допустимые значения — `whitelist` или `blacklist` */
        list_type: string;
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Дополнительные ошибки с описанием причины */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsResumeVisibilityErrors"];
        };
      };
      /** @description Текущий пользователь не является соискателем */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Резюме не существует или недоступно для текущего пользователя, либо передан неизвестный `list_type` */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Обновление комментария
   * @description Метод требует наличия [платного доступа для работодателя](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access).
   *
   * Автор комментария может изменить его текст и тип доступа. Если параметр не передан, то его значение останется прежним
   */
  "update-applicant-comment": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор соискателя, который можно узнать из поля `owner` [в резюме](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#owner-field) */
        applicant_id: string;
        /** @description Идентификатор комментария, который можно узнать в [списке комментариев](#tag/Kommentarii-k-soiskatelyu/operation/get-applicant-comments-list) */
        comment_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Текст комментария */
          text?: string;
          /** @description Тип доступа. Доступные значения перечислены [в справочнике](#tag/Obshie-spravochniki/operation/get-dictionaries) в поле `applicant_comment_access_type` */
          access_type?: string;
        };
      };
    };
    responses: {
      /** @description Успешный ответ. Комментарий обновлен */
      204: {
        content: never;
      };
      /** @description Ошибка в параметрах запроса. Дополнительно могут быть указаны названия параметров с ошибками */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Изменение комментария недоступно для текущего пользователя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный соискатель или комментарий не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Удаление комментария
   * @description Метод требует наличия [платного доступа для работодателя](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access).
   *
   * Удалить комментарий может только его автор
   */
  "delete-applicant-comment": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор соискателя, который можно узнать из поля `owner` [в резюме](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#owner-field) */
        applicant_id: string;
        /** @description Идентификатор комментария, который будет удален. Его можно узнать в [списке комментариев](#tag/Kommentarii-k-soiskatelyu/operation/get-applicant-comments-list) */
        comment_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ. Комментарий удален */
      204: {
        content: never;
      };
      /** @description Удаление комментария недоступно для текущего пользователя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный соискатель не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Получение списка комментариев
   * @description Метод требует наличия [платного доступа для работодателя](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access).
   *
   * Список будет содержать комментарии текущего пользователя, а также комментарии других менеджеров компании, если они открыли доступ к ним при публикации
   */
  "get-applicant-comments-list": {
    parameters: {
      query?: {
        /** @description Номер страницы */
        page?: number;
        /** @description Результатов на странице */
        per_page?: number;
        /** @description Сортировка комментариев. Доступные значения перечислены [в справочнике](#tag/Obshie-spravochniki/operation/get-dictionaries) в поле `applicant_comments_order` */
        order_by?: string;
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор соискателя, который можно узнать из поля `owner` [в резюме](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#owner-field) */
        applicant_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicantCommentsApplicantCommentsList"];
        };
      };
      /** @description Получение комментариев недоступно для текущего пользователя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный соискатель не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Добавление комментария
   * @description Метод требует наличия [платного доступа для работодателя](#tag/Uslugi-rabotodatelya/operation/get-payable-api-method-access)
   */
  "add-applicant-comment": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор соискателя, который можно узнать из поля `owner` [в резюме](https://github.com/hhru/api/blob/master/docs/employer_resumes.md#owner-field) */
        applicant_id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Текст комментария */
          text: string;
          /** @description Тип доступа. Доступные значения перечислены [в справочнике](#tag/Obshie-spravochniki/operation/get-dictionaries) в поле `applicant_comment_access_type` */
          access_type: string;
        };
      };
    };
    responses: {
      /** @description Комментарий добавлен */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicantCommentsApplicantCommentItem"];
        };
      };
      /** @description Ошибка в параметрах запроса */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadArgumentErrors"];
        };
      };
      /** @description Получение комментариев недоступно для текущего пользователя */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный соискатель не найден */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Изменение шаблона ответа соискателю
   * @description Изменение шаблона ответа для [переписки](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md)
   */
  "put-mail-templates-item": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя, который можно узнать [в информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
        /** @description Идентификатор шаблона для изменения из [списка доступных шаблонов ответов соискателю](#tag/Otklikipriglasheniya-rabotodatelya/operation/get-mail-templates) */
        template_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MailTemplatesMailTemplateInput"];
      };
    };
    responses: {
      204: components["responses"]["SuccessNoContent"];
      /** @description Текст шаблона слишком длинный или содержит неправильную переменную, reason (too_long, wrong_variable) */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadJsonDataErrors"];
        };
      };
      /** @description Неподходящая авторизация */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель или шаблон не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
  /**
   * Список доступных шаблонов ответов соискателю
   * @description Возвращает список возможных значений шаблонов ответов для [переписки](https://github.com/hhru/api/blob/master/docs/employer_negotiations.md)
   */
  "get-mail-templates": {
    parameters: {
      query?: {
        locale?: components["parameters"]["Locale"];
        host?: components["parameters"]["Host"];
      };
      header: {
        "HH-User-Agent": components["parameters"]["HHUserAgent"];
      };
      path: {
        /** @description Идентификатор работодателя, который можно узнать [в информации о текущем пользователе](#tag/Informaciya-o-menedzhere/operation/get-current-user-info) */
        employer_id: string;
      };
    };
    responses: {
      /** @description Успешный ответ */
      200: {
        content: {
          "application/json": components["schemas"]["MailTemplatesMailTemplates"];
        };
      };
      /** @description Неподходящая авторизация */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonBadAuthorizationErrors"];
        };
      };
      /** @description Указанный работодатель не существует */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorsCommonNotFoundErrors"];
        };
      };
    };
  };
}
